
/*
 *
 * Конфігурації ""Зберігання та Торгівля" для України"
 * Автор Тарахомин Юрій Іванович, accounting.org.ua
 * Дата конфігурації: 06.07.2025 19:21:20
 *
 *
 * Цей код згенерований в Конфігураторі 3. Шаблон GeneratedCode.xslt
 *
 */

using AccountingSoftware;
using System.Xml;

namespace GeneratedCode
{
    public static class Config
    {
        #region Const

        //Простір імен згенерованого коду
        public const string NameSpageCodeGeneration = "GeneratedCode";

        //Простір імен програми
        public const string NameSpageProgram = "StorageAndTrade";

        #endregion
        
        public static Kernel Kernel { get; set; } = new Kernel();
        public static async void StartBackgroundTask()
        {
            /*
            Схема роботи:

            1. В процесі запису в регістр залишків - додається запис у таблицю тригерів.
              Запис в таблицю тригерів містить дату запису в регістр, назву регістру.

            2. Раз на 5 сек викликається процедура SpetialTableRegAccumTrigerExecute і
              відбувається розрахунок віртуальних таблиць регістрів залишків.

              Розраховуються тільки змінені регістри на дату проведення документу і
              додатково на дату якщо змінена дата документу і документ уже був проведений.

              Додатково розраховуються підсумки в кінці всіх розрахунків.
            */

            if (Kernel.Session == Guid.Empty)
                throw new Exception("Порожня сесія користувача. Спочатку потрібно залогінитись, а тоді вже викликати функцію StartBackgroundTask()");

            while (true)
            {
                //Виконання обчислень
                await Kernel.DataBase.SpetialTableRegAccumTrigerExecute
                (
                    Kernel.Session,
                    РегістриНакопичення.VirtualTablesСalculation.Execute, 
                    РегістриНакопичення.VirtualTablesСalculation.ExecuteFinalCalculation
                );

                //Затримка на 5 сек
                await Task.Delay(5000);
            }
        }
    }

    public class Functions
    {
        /*
          Функція для типу який задається користувачем.
          Повертає презентацію для uuidAndText
        */
        public static async ValueTask<CompositePointerPresentation_Record> CompositePointerPresentation(UuidAndText uuidAndText)
        {
            CompositePointerPresentation_Record record = new();

            (bool result, string pointerGroup, string pointerType) = Configuration.PointerParse(uuidAndText.Text, out Exception? _);
            if (result)
            {
                record.pointer = pointerGroup;
                record.type = pointerType;

                if (!uuidAndText.IsEmpty())
                    if (record.pointer == "Довідники") 
                    {
                        record.result = record.type switch
                        {
                        "Організації" => await new Довідники.Організації_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Номенклатура" => await new Довідники.Номенклатура_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Виробники" => await new Довідники.Виробники_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ВидиНоменклатури" => await new Довідники.ВидиНоменклатури_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПакуванняОдиниціВиміру" => await new Довідники.ПакуванняОдиниціВиміру_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Валюти" => await new Довідники.Валюти_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Контрагенти" => await new Довідники.Контрагенти_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Склади" => await new Довідники.Склади_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ВидиЦін" => await new Довідники.ВидиЦін_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ВидиЦінПостачальників" => await new Довідники.ВидиЦінПостачальників_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Користувачі" => await new Довідники.Користувачі_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ФізичніОсоби" => await new Довідники.ФізичніОсоби_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "СтруктураПідприємства" => await new Довідники.СтруктураПідприємства_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "КраїниСвіту" => await new Довідники.КраїниСвіту_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Файли" => await new Довідники.Файли_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ХарактеристикиНоменклатури" => await new Довідники.ХарактеристикиНоменклатури_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Номенклатура_Папки" => await new Довідники.Номенклатура_Папки_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Контрагенти_Папки" => await new Довідники.Контрагенти_Папки_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Склади_Папки" => await new Довідники.Склади_Папки_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Каси" => await new Довідники.Каси_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "БанківськіРахункиОрганізацій" => await new Довідники.БанківськіРахункиОрганізацій_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ДоговориКонтрагентів" => await new Довідники.ДоговориКонтрагентів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "БанківськіРахункиКонтрагентів" => await new Довідники.БанківськіРахункиКонтрагентів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "СтаттяРухуКоштів" => await new Довідники.СтаттяРухуКоштів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "СеріїНоменклатури" => await new Довідники.СеріїНоменклатури_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПартіяТоварівКомпозит" => await new Довідники.ПартіяТоварівКомпозит_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ВидиЗапасів" => await new Довідники.ВидиЗапасів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Банки" => await new Довідники.Банки_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "СкладськіПриміщення" => await new Довідники.СкладськіПриміщення_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "СкладськіКомірки" => await new Довідники.СкладськіКомірки_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ОбластьЗберігання" => await new Довідники.ОбластьЗберігання_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ТипорозміриКомірок" => await new Довідники.ТипорозміриКомірок_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "СкладськіКомірки_Папки" => await new Довідники.СкладськіКомірки_Папки_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "Блокнот" => await new Довідники.Блокнот_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ЗбереженіЗвіти" => await new Довідники.ЗбереженіЗвіти_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "КасиККМ" => await new Довідники.КасиККМ_Pointer(uuidAndText.Uuid).GetPresentation(),
                        _ => ""
                        };
                    }
                    else if (record.pointer == "Документи") 
                    {
                        record.result = record.type switch
                        {
                        "ЗамовленняПостачальнику" => await new Документи.ЗамовленняПостачальнику_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПоступленняТоварівТаПослуг" => await new Документи.ПоступленняТоварівТаПослуг_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ЗамовленняКлієнта" => await new Документи.ЗамовленняКлієнта_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "РеалізаціяТоварівТаПослуг" => await new Документи.РеалізаціяТоварівТаПослуг_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ВстановленняЦінНоменклатури" => await new Документи.ВстановленняЦінНоменклатури_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПрихіднийКасовийОрдер" => await new Документи.ПрихіднийКасовийОрдер_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "РозхіднийКасовийОрдер" => await new Документи.РозхіднийКасовийОрдер_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПереміщенняТоварів" => await new Документи.ПереміщенняТоварів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПоверненняТоварівПостачальнику" => await new Документи.ПоверненняТоварівПостачальнику_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПоверненняТоварівВідКлієнта" => await new Документи.ПоверненняТоварівВідКлієнта_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "АктВиконанихРобіт" => await new Документи.АктВиконанихРобіт_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ВведенняЗалишків" => await new Документи.ВведенняЗалишків_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "НадлишкиТоварів" => await new Документи.НадлишкиТоварів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПересортицяТоварів" => await new Документи.ПересортицяТоварів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПерерахунокТоварів" => await new Документи.ПерерахунокТоварів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПсуванняТоварів" => await new Документи.ПсуванняТоварів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ВнутрішнєСпоживанняТоварів" => await new Документи.ВнутрішнєСпоживанняТоварів_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "РахунокФактура" => await new Документи.РахунокФактура_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "РозміщенняТоварівНаСкладі" => await new Документи.РозміщенняТоварівНаСкладі_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ПереміщенняТоварівНаСкладі" => await new Документи.ПереміщенняТоварівНаСкладі_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ЗбіркаТоварівНаСкладі" => await new Документи.ЗбіркаТоварівНаСкладі_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "РозміщенняНоменклатуриПоКоміркам" => await new Документи.РозміщенняНоменклатуриПоКоміркам_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "КорегуванняБоргу" => await new Документи.КорегуванняБоргу_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ЗакриттяЗамовленняКлієнта" => await new Документи.ЗакриттяЗамовленняКлієнта_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ЗакриттяРахункуФактури" => await new Документи.ЗакриттяРахункуФактури_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ЗакриттяЗамовленняПостачальнику" => await new Документи.ЗакриттяЗамовленняПостачальнику_Pointer(uuidAndText.Uuid).GetPresentation(),
                        "ЧекККМ" => await new Документи.ЧекККМ_Pointer(uuidAndText.Uuid).GetPresentation(),
                        _ => ""
                        };
                    }
            }
            return record;
        }
    }
}

namespace GeneratedCode.Константи
{
    
	  #region CONSTANTS BLOCK "ЗначенняТипові"
    public static class ЗначенняТипові
    {       
        public static Довідники.Організації_Pointer ОсновнаОрганізація_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a1"); } ).Result;
                return recordResult.Result ? (new Довідники.Організації_Pointer(recordResult.Value)) : new Довідники.Організації_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a1", value.UnigueID.UGuid);
            }
        }
        public static Довідники.Склади_Pointer ОсновнийСклад_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a2"); } ).Result;
                return recordResult.Result ? (new Довідники.Склади_Pointer(recordResult.Value)) : new Довідники.Склади_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a2", value.UnigueID.UGuid);
            }
        }
        public static Довідники.Валюти_Pointer ОсновнаВалюта_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a3"); } ).Result;
                return recordResult.Result ? (new Довідники.Валюти_Pointer(recordResult.Value)) : new Довідники.Валюти_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a3", value.UnigueID.UGuid);
            }
        }
        public static Довідники.Контрагенти_Pointer ОсновнийПостачальник_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a4"); } ).Result;
                return recordResult.Result ? (new Довідники.Контрагенти_Pointer(recordResult.Value)) : new Довідники.Контрагенти_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a4", value.UnigueID.UGuid);
            }
        }
        public static Довідники.Контрагенти_Pointer ОсновнийПокупець_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a5"); } ).Result;
                return recordResult.Result ? (new Довідники.Контрагенти_Pointer(recordResult.Value)) : new Довідники.Контрагенти_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a5", value.UnigueID.UGuid);
            }
        }
        public static Довідники.Каси_Pointer ОсновнаКаса_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a6"); } ).Result;
                return recordResult.Result ? (new Довідники.Каси_Pointer(recordResult.Value)) : new Довідники.Каси_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a6", value.UnigueID.UGuid);
            }
        }
        public static Довідники.ПакуванняОдиниціВиміру_Pointer ОсновнаОдиницяПакування_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a7"); } ).Result;
                return recordResult.Result ? (new Довідники.ПакуванняОдиниціВиміру_Pointer(recordResult.Value)) : new Довідники.ПакуванняОдиниціВиміру_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a7", value.UnigueID.UGuid);
            }
        }
        public static Довідники.СтруктураПідприємства_Pointer ОсновнийПідрозділ_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g4"); } ).Result;
                return recordResult.Result ? (new Довідники.СтруктураПідприємства_Pointer(recordResult.Value)) : new Довідники.СтруктураПідприємства_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g4", value.UnigueID.UGuid);
            }
        }
        public static Довідники.БанківськіРахункиОрганізацій_Pointer ОсновнийБанківськийРахунок_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g5"); } ).Result;
                return recordResult.Result ? (new Довідники.БанківськіРахункиОрганізацій_Pointer(recordResult.Value)) : new Довідники.БанківськіРахункиОрганізацій_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g5", value.UnigueID.UGuid);
            }
        }
        public static Довідники.ВидиЦін_Pointer ОсновнийВидЦіни_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g9"); } ).Result;
                return recordResult.Result ? (new Довідники.ВидиЦін_Pointer(recordResult.Value)) : new Довідники.ВидиЦін_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g9", value.UnigueID.UGuid);
            }
        }
        public static Довідники.ВидиНоменклатури_Pointer ОсновнийВидНоменклатури_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i2"); } ).Result;
                return recordResult.Result ? (new Довідники.ВидиНоменклатури_Pointer(recordResult.Value)) : new Довідники.ВидиНоменклатури_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i2", value.UnigueID.UGuid);
            }
        }
        public static Довідники.ВидиЦін_Pointer ОсновнийВидЦіниЗакупівлі_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c3"); } ).Result;
                return recordResult.Result ? (new Довідники.ВидиЦін_Pointer(recordResult.Value)) : new Довідники.ВидиЦін_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c3", value.UnigueID.UGuid);
            }
        }
        public static Довідники.КасиККМ_Pointer ОсновнаКасаККМ_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_j2"); } ).Result;
                return recordResult.Result ? (new Довідники.КасиККМ_Pointer(recordResult.Value)) : new Довідники.КасиККМ_Pointer();
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_j2", value.UnigueID.UGuid);
            }
        }
             
    }
    #endregion
    
	  #region CONSTANTS BLOCK "Системні"
    public static class Системні
    {       
        public static string ЖурналРеєстрації_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a8"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a8", value);
            }
        }
        public static string ФоновіЗадачі_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_a9"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_a9", value);
            }
        }
        public static bool ЗупинитиФоновіЗадачі_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g6"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (bool)recordResult.Value : false) : false;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g6", value);
            }
        }
        public static string ЗаблокованіОбєкти_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g7"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g7", value);
            }
        }
        public static string ПовідомленняТаПомилки_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h8"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h8", value);
            }
        }
        public static bool ВестиОблікПоСеріяхНоменклатури_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h9"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (bool)recordResult.Value : false) : false;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h9", value);
            }
        }
        public static bool ВестиОблікПоХарактеристикахНоменклатури_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (bool)recordResult.Value : false) : false;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i1", value);
            }
        }
        public static string НалаштуванняКористувача_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i6"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i6", value);
            }
        }
        
        
        public class ЖурналРеєстрації_Журнал_TablePart : ConstantsTablePart
        {
            public ЖурналРеєстрації_Журнал_TablePart() : base(Config.Kernel, "tab_a69",
                 ["col_a7", "col_a8", "col_a1", "col_a2", ]) 
            { 
              
            }
            
            public const string TABLE = "tab_a69";
            
            public const string Дата = "col_a7";
            public const string Коментар = "col_a8";
            public const string Обєкт = "col_a1";
            public const string Користувач = "col_a2";
            public List<Record> Records { get; set; } = [];

            public event EventHandler? Saved;
        
            public async ValueTask Read()
            {
                Records.Clear();
                await base.BaseRead();

                foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
                {
                    Record record = new Record()
                    {
                        UID = (Guid)fieldValue["uid"],
                        Дата = (fieldValue["col_a7"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a7"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        Коментар = fieldValue["col_a8"].ToString() ?? "",
                        Обєкт = fieldValue["col_a1"].ToString() ?? "",
                        Користувач = fieldValue["col_a2"].ToString() ?? "",
                        
                    };
                    Records.Add(record);
                }
            
                base.BaseClear();
            }
        
            public async ValueTask Save(bool clear_all_before_save /*= true*/) 
            {
                await base.BaseBeginTransaction();
                
                if (clear_all_before_save)
                    await base.BaseDelete();

                

                foreach (Record record in Records)
                {
                    
                    Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                    {
                        {"col_a7", record.Дата},
                        {"col_a8", record.Коментар},
                        {"col_a1", record.Обєкт},
                        {"col_a2", record.Користувач},
                        
                    };
                    record.UID = await base.BaseSave(record.UID, fieldValue);
                }
                
                await base.BaseCommitTransaction();
                Saved?.Invoke(this, new EventArgs());
            }

            public async ValueTask Remove(Record record)
            {
                await base.BaseRemove(record.UID);
                Records.RemoveAll(item => record.UID == item.UID);
            }

            public async ValueTask RemoveAll(List<Record> records)
            {
                List<Guid> removeList = [];

                await base.BaseBeginTransaction();
                foreach (Record record in records)
                {
                    removeList.Add(record.UID);
                    await base.BaseRemove(record.UID);
                }
                await base.BaseCommitTransaction();

                Records.RemoveAll(item => removeList.Exists(uid => uid == item.UID));
            }
        
            public async ValueTask Delete()
            {
                await base.BaseDelete();
            }
            
            public class Record : ConstantsTablePartRecord
            {
                public DateTime Дата { get; set; } = DateTime.MinValue;
                public string Коментар { get; set; } = "";
                public string Обєкт { get; set; } = "";
                public string Користувач { get; set; } = "";
                
            }
        }
          
        
        public class ФоновіЗадачі_Задачі_TablePart : ConstantsTablePart
        {
            public ФоновіЗадачі_Задачі_TablePart() : base(Config.Kernel, "tab_a67",
                 ["col_a2", "col_a1", "col_a5", "col_a3", "col_a4", "col_a6", ]) 
            { 
              
            }
            
            public const string TABLE = "tab_a67";
            
            public const string Назва = "col_a2";
            public const string Дата = "col_a1";
            public const string Ключ = "col_a5";
            public const string Виконано = "col_a3";
            public const string Заблоковано = "col_a4";
            public const string Результат = "col_a6";
            public List<Record> Records { get; set; } = [];

            public event EventHandler? Saved;
        
            public async ValueTask Read()
            {
                Records.Clear();
                await base.BaseRead();

                foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
                {
                    Record record = new Record()
                    {
                        UID = (Guid)fieldValue["uid"],
                        Назва = fieldValue["col_a2"].ToString() ?? "",
                        Дата = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        Ключ = fieldValue["col_a5"].ToString() ?? "",
                        Виконано = (fieldValue["col_a3"] != DBNull.Value) ? (bool)fieldValue["col_a3"] : false,
                        Заблоковано = (fieldValue["col_a4"] != DBNull.Value) ? (bool)fieldValue["col_a4"] : false,
                        Результат = fieldValue["col_a6"].ToString() ?? "",
                        
                    };
                    Records.Add(record);
                }
            
                base.BaseClear();
            }
        
            public async ValueTask Save(bool clear_all_before_save /*= true*/) 
            {
                await base.BaseBeginTransaction();
                
                if (clear_all_before_save)
                    await base.BaseDelete();

                

                foreach (Record record in Records)
                {
                    
                    Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                    {
                        {"col_a2", record.Назва},
                        {"col_a1", record.Дата},
                        {"col_a5", record.Ключ},
                        {"col_a3", record.Виконано},
                        {"col_a4", record.Заблоковано},
                        {"col_a6", record.Результат},
                        
                    };
                    record.UID = await base.BaseSave(record.UID, fieldValue);
                }
                
                await base.BaseCommitTransaction();
                Saved?.Invoke(this, new EventArgs());
            }

            public async ValueTask Remove(Record record)
            {
                await base.BaseRemove(record.UID);
                Records.RemoveAll(item => record.UID == item.UID);
            }

            public async ValueTask RemoveAll(List<Record> records)
            {
                List<Guid> removeList = [];

                await base.BaseBeginTransaction();
                foreach (Record record in records)
                {
                    removeList.Add(record.UID);
                    await base.BaseRemove(record.UID);
                }
                await base.BaseCommitTransaction();

                Records.RemoveAll(item => removeList.Exists(uid => uid == item.UID));
            }
        
            public async ValueTask Delete()
            {
                await base.BaseDelete();
            }
            
            public class Record : ConstantsTablePartRecord
            {
                public string Назва { get; set; } = "";
                public DateTime Дата { get; set; } = DateTime.MinValue;
                public string Ключ { get; set; } = "";
                public bool Виконано { get; set; } = false;
                public bool Заблоковано { get; set; } = false;
                public string Результат { get; set; } = "";
                
            }
        }
          
        
        public class ЗаблокованіОбєкти_Документи_TablePart : ConstantsTablePart
        {
            public ЗаблокованіОбєкти_Документи_TablePart() : base(Config.Kernel, "tab_b03",
                 ["col_a1", "col_a2", "col_a3", "col_a4", ]) 
            { 
              
            }
            
            public const string TABLE = "tab_b03";
            
            public const string Обєкт = "col_a1";
            public const string Користувач = "col_a2";
            public const string ДатаБлокування = "col_a3";
            public const string ДатаПідтвердженняБлокування = "col_a4";
            public List<Record> Records { get; set; } = [];

            public event EventHandler? Saved;
        
            public async ValueTask Read()
            {
                Records.Clear();
                await base.BaseRead();

                foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
                {
                    Record record = new Record()
                    {
                        UID = (Guid)fieldValue["uid"],
                        Обєкт = (fieldValue["col_a1"] != DBNull.Value) ? (Guid)fieldValue["col_a1"] : Guid.Empty,
                        Користувач = fieldValue["col_a2"].ToString() ?? "",
                        ДатаБлокування = (fieldValue["col_a3"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a3"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        ДатаПідтвердженняБлокування = (fieldValue["col_a4"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a4"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        
                    };
                    Records.Add(record);
                }
            
                base.BaseClear();
            }
        
            public async ValueTask Save(bool clear_all_before_save /*= true*/) 
            {
                await base.BaseBeginTransaction();
                
                if (clear_all_before_save)
                    await base.BaseDelete();

                

                foreach (Record record in Records)
                {
                    
                    Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                    {
                        {"col_a1", record.Обєкт},
                        {"col_a2", record.Користувач},
                        {"col_a3", record.ДатаБлокування},
                        {"col_a4", record.ДатаПідтвердженняБлокування},
                        
                    };
                    record.UID = await base.BaseSave(record.UID, fieldValue);
                }
                
                await base.BaseCommitTransaction();
                Saved?.Invoke(this, new EventArgs());
            }

            public async ValueTask Remove(Record record)
            {
                await base.BaseRemove(record.UID);
                Records.RemoveAll(item => record.UID == item.UID);
            }

            public async ValueTask RemoveAll(List<Record> records)
            {
                List<Guid> removeList = [];

                await base.BaseBeginTransaction();
                foreach (Record record in records)
                {
                    removeList.Add(record.UID);
                    await base.BaseRemove(record.UID);
                }
                await base.BaseCommitTransaction();

                Records.RemoveAll(item => removeList.Exists(uid => uid == item.UID));
            }
        
            public async ValueTask Delete()
            {
                await base.BaseDelete();
            }
            
            public class Record : ConstantsTablePartRecord
            {
                public Guid Обєкт { get; set; } = new Guid();
                public string Користувач { get; set; } = "";
                public DateTime ДатаБлокування { get; set; } = DateTime.MinValue;
                public DateTime ДатаПідтвердженняБлокування { get; set; } = DateTime.MinValue;
                
            }
        }
          
        
        public class ПовідомленняТаПомилки_Помилки_TablePart : ConstantsTablePart
        {
            public ПовідомленняТаПомилки_Помилки_TablePart() : base(Config.Kernel, "tab_b21",
                 ["col_a2", "col_a5", "col_a1", "col_a6", "col_a4", "col_a3", ]) 
            { 
              
            }
            
            public const string TABLE = "tab_b21";
            
            public const string Дата = "col_a2";
            public const string НазваПроцесу = "col_a5";
            public const string Обєкт = "col_a1";
            public const string ТипОбєкту = "col_a6";
            public const string НазваОбєкту = "col_a4";
            public const string Повідомлення = "col_a3";
            public List<Record> Records { get; set; } = [];

            public event EventHandler? Saved;
        
            public async ValueTask Read()
            {
                Records.Clear();
                await base.BaseRead();

                foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
                {
                    Record record = new Record()
                    {
                        UID = (Guid)fieldValue["uid"],
                        Дата = (fieldValue["col_a2"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a2"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        НазваПроцесу = fieldValue["col_a5"].ToString() ?? "",
                        Обєкт = (fieldValue["col_a1"] != DBNull.Value) ? (Guid)fieldValue["col_a1"] : Guid.Empty,
                        ТипОбєкту = fieldValue["col_a6"].ToString() ?? "",
                        НазваОбєкту = fieldValue["col_a4"].ToString() ?? "",
                        Повідомлення = fieldValue["col_a3"].ToString() ?? "",
                        
                    };
                    Records.Add(record);
                }
            
                base.BaseClear();
            }
        
            public async ValueTask Save(bool clear_all_before_save /*= true*/) 
            {
                await base.BaseBeginTransaction();
                
                if (clear_all_before_save)
                    await base.BaseDelete();

                

                foreach (Record record in Records)
                {
                    
                    Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                    {
                        {"col_a2", record.Дата},
                        {"col_a5", record.НазваПроцесу},
                        {"col_a1", record.Обєкт},
                        {"col_a6", record.ТипОбєкту},
                        {"col_a4", record.НазваОбєкту},
                        {"col_a3", record.Повідомлення},
                        
                    };
                    record.UID = await base.BaseSave(record.UID, fieldValue);
                }
                
                await base.BaseCommitTransaction();
                Saved?.Invoke(this, new EventArgs());
            }

            public async ValueTask Remove(Record record)
            {
                await base.BaseRemove(record.UID);
                Records.RemoveAll(item => record.UID == item.UID);
            }

            public async ValueTask RemoveAll(List<Record> records)
            {
                List<Guid> removeList = [];

                await base.BaseBeginTransaction();
                foreach (Record record in records)
                {
                    removeList.Add(record.UID);
                    await base.BaseRemove(record.UID);
                }
                await base.BaseCommitTransaction();

                Records.RemoveAll(item => removeList.Exists(uid => uid == item.UID));
            }
        
            public async ValueTask Delete()
            {
                await base.BaseDelete();
            }
            
            public class Record : ConstantsTablePartRecord
            {
                public DateTime Дата { get; set; } = DateTime.MinValue;
                public string НазваПроцесу { get; set; } = "";
                public Guid Обєкт { get; set; } = new Guid();
                public string ТипОбєкту { get; set; } = "";
                public string НазваОбєкту { get; set; } = "";
                public string Повідомлення { get; set; } = "";
                
            }
        }
          
        
        public class НалаштуванняКористувача_ПеріодиЖурналів_TablePart : ConstantsTablePart
        {
            public НалаштуванняКористувача_ПеріодиЖурналів_TablePart() : base(Config.Kernel, "tab_a80",
                 ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", ]) 
            { 
              
            }
            
            public const string TABLE = "tab_a80";
            
            public const string Користувач = "col_a1";
            public const string Журнал = "col_a2";
            public const string ПеріодЗначення = "col_a3";
            public const string ДатаСтарт = "col_a4";
            public const string ДатаСтоп = "col_a5";
            public List<Record> Records { get; set; } = [];

            public event EventHandler? Saved;
        
            public async ValueTask Read()
            {
                Records.Clear();
                await base.BaseRead();

                foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
                {
                    Record record = new Record()
                    {
                        UID = (Guid)fieldValue["uid"],
                        Користувач = new Довідники.Користувачі_Pointer(fieldValue["col_a1"]),
                        Журнал = fieldValue["col_a2"].ToString() ?? "",
                        ПеріодЗначення = fieldValue["col_a3"].ToString() ?? "",
                        ДатаСтарт = (fieldValue["col_a4"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a4"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        ДатаСтоп = (fieldValue["col_a5"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a5"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        
                    };
                    Records.Add(record);
                }
            
                base.BaseClear();
            }
        
            public async ValueTask Save(bool clear_all_before_save /*= true*/) 
            {
                await base.BaseBeginTransaction();
                
                if (clear_all_before_save)
                    await base.BaseDelete();

                

                foreach (Record record in Records)
                {
                    
                    Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                    {
                        {"col_a1", record.Користувач.UnigueID.UGuid},
                        {"col_a2", record.Журнал},
                        {"col_a3", record.ПеріодЗначення},
                        {"col_a4", record.ДатаСтарт},
                        {"col_a5", record.ДатаСтоп},
                        
                    };
                    record.UID = await base.BaseSave(record.UID, fieldValue);
                }
                
                await base.BaseCommitTransaction();
                Saved?.Invoke(this, new EventArgs());
            }

            public async ValueTask Remove(Record record)
            {
                await base.BaseRemove(record.UID);
                Records.RemoveAll(item => record.UID == item.UID);
            }

            public async ValueTask RemoveAll(List<Record> records)
            {
                List<Guid> removeList = [];

                await base.BaseBeginTransaction();
                foreach (Record record in records)
                {
                    removeList.Add(record.UID);
                    await base.BaseRemove(record.UID);
                }
                await base.BaseCommitTransaction();

                Records.RemoveAll(item => removeList.Exists(uid => uid == item.UID));
            }
        
            public async ValueTask Delete()
            {
                await base.BaseDelete();
            }
            
            public class Record : ConstantsTablePartRecord
            {
                public Довідники.Користувачі_Pointer Користувач { get; set; } = new Довідники.Користувачі_Pointer();
                public string Журнал { get; set; } = "";
                public string ПеріодЗначення { get; set; } = "";
                public DateTime ДатаСтарт { get; set; } = DateTime.MinValue;
                public DateTime ДатаСтоп { get; set; } = DateTime.MinValue;
                
            }
        }
               
    }
    #endregion
    
	  #region CONSTANTS BLOCK "НумераціяДокументів"
    public static class НумераціяДокументів
    {       
        public static int ПоступленняТоварівТаПослуг_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b7"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b7", value);
            }
        }
        public static int ЗамовленняПостачальнику_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b9"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b9", value);
            }
        }
        public static int ЗамовленняКлієнта_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c1", value);
            }
        }
        public static int РеалізаціяТоварівТаПослуг_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c2"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c2", value);
            }
        }
        public static int ВстановленняЦінНоменклатури_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c4"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c4", value);
            }
        }
        public static int ПрихіднийКасовийОрдер_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c5"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c5", value);
            }
        }
        public static int РозхіднийКасовийОрдер_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c6"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c6", value);
            }
        }
        public static int ПереміщенняТоварів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c7"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c7", value);
            }
        }
        public static int ПоверненняТоварівПостачальнику_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c8"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c8", value);
            }
        }
        public static int ПоверненняТоварівВідКлієнта_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_c9"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_c9", value);
            }
        }
        public static int АктВиконанихРобіт_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f6"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f6", value);
            }
        }
        public static int ВведенняЗалишків_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f7"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f7", value);
            }
        }
        public static int НадлишкиТоварів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f8"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f8", value);
            }
        }
        public static int ПересортицяТоварів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f9"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f9", value);
            }
        }
        public static int ПерерахунокТоварів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g1", value);
            }
        }
        public static int ПсуванняТоварів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g2"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g2", value);
            }
        }
        public static int ВнутрішнєСпоживанняТоварів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h1", value);
            }
        }
        public static int РахунокФактура_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h2"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h2", value);
            }
        }
        public static int РозміщенняТоварівНаСкладі_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b2"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b2", value);
            }
        }
        public static int ПереміщенняТоварівНаСкладі_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b3"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b3", value);
            }
        }
        public static int ЗбіркаТоварівНаСкладі_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b4"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b4", value);
            }
        }
        public static int РозміщенняНоменклатуриПоКоміркам_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b5"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b5", value);
            }
        }
        public static int КорегуванняБоргу_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i5"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i5", value);
            }
        }
        public static int ЗакриттяЗамовленняКлієнта_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i8"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i8", value);
            }
        }
        public static int ЗакриттяРахункуФактури_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i9"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i9", value);
            }
        }
        public static int ЗакриттяЗамовленняПостачальнику_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_j1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_j1", value);
            }
        }
        public static int ЧекККМ_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h6"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h6", value);
            }
        }
             
    }
    #endregion
    
	  #region CONSTANTS BLOCK "НумераціяДовідників"
    public static class НумераціяДовідників
    {       
        public static int Номенклатура_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b8"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b8", value);
            }
        }
        public static int Номенклатура_Папки_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d1", value);
            }
        }
        public static int Склади_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d2"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d2", value);
            }
        }
        public static int Склади_Папки_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d3"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d3", value);
            }
        }
        public static int Контрагенти_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d4"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d4", value);
            }
        }
        public static int Контрагенти_Папки_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d5"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d5", value);
            }
        }
        public static int ХарактеристикиНоменклатури_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d6"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d6", value);
            }
        }
        public static int Валюти_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d7"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d7", value);
            }
        }
        public static int Організації_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d8"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d8", value);
            }
        }
        public static int Виробники_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_d9"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_d9", value);
            }
        }
        public static int ВидиНоменклатури_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e1", value);
            }
        }
        public static int ПакуванняОдиниціВиміру_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e2"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e2", value);
            }
        }
        public static int ВидиЦін_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e3"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e3", value);
            }
        }
        public static int ВидиЦінПостачальників_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e4"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e4", value);
            }
        }
        public static int Користувачі_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e5"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e5", value);
            }
        }
        public static int ФізичніОсоби_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e6"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e6", value);
            }
        }
        public static int СтруктураПідприємства_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e7"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e7", value);
            }
        }
        public static int КраїниСвіту_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e8"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e8", value);
            }
        }
        public static int Файли_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_e9"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_e9", value);
            }
        }
        public static int Каси_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f1", value);
            }
        }
        public static int БанківськіРахункиОрганізацій_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f2"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f2", value);
            }
        }
        public static int ДоговориКонтрагентів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f3"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f3", value);
            }
        }
        public static int БанківськіРахункиКонтрагентів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f4"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f4", value);
            }
        }
        public static int СтаттяРухуКоштів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_f5"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_f5", value);
            }
        }
        public static int СкладськіКомірки_Папки_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b1"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b1", value);
            }
        }
        public static int Банки_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g8"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g8", value);
            }
        }
        public static int Блокнот_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i3"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i3", value);
            }
        }
        public static int ВидиЗапасів_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i4"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i4", value);
            }
        }
        public static int ЗбереженіЗвіти_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_i7"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (int)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_i7", value);
            }
        }
             
    }
    #endregion
    
	  #region CONSTANTS BLOCK "ЖурналиДокументів"
    public static class ЖурналиДокументів
    {       
        public static string ОсновнийТипПеріоду_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h3"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h3", value);
            }
        }
             
    }
    #endregion
    
	  #region CONSTANTS BLOCK "ПартіїТоварів"
    public static class ПартіїТоварів
    {       
        public static Перелічення.МетодиСписанняПартій МетодСписанняПартій_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h4"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (Перелічення.МетодиСписанняПартій)recordResult.Value : 0) : 0;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h4", (int)value);
            }
        }
             
    }
    #endregion
    
	  #region CONSTANTS BLOCK "ЗавантаженняДанихІзСайтів"
    public static class ЗавантаженняДанихІзСайтів
    {       
        public static string ЗавантаженняКурсівВалют_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h5"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h5", value);
            }
        }
        public static bool АвтоматичноЗавантажуватиКурсиВалютПриЗапуску_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_b6"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (bool)recordResult.Value : false) : false;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_b6", value);
            }
        }
        public static string ЗавантаженняСпискуБанків_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_g3"); } ).Result;
                return recordResult.Result ? (recordResult.Value.ToString() ?? "") : "";
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_g3", value);
            }
        }
        
        
        public class ЗавантаженняКурсівВалют_Історія_TablePart : ConstantsTablePart
        {
            public ЗавантаженняКурсівВалют_Історія_TablePart() : base(Config.Kernel, "tab_b22",
                 ["col_a1", "col_a2", "col_a3", "col_a4", ]) 
            { 
              
            }
            
            public const string TABLE = "tab_b22";
            
            public const string Дата = "col_a1";
            public const string Стан = "col_a2";
            public const string Посилання = "col_a3";
            public const string Повідомлення = "col_a4";
            public List<Record> Records { get; set; } = [];

            public event EventHandler? Saved;
        
            public async ValueTask Read()
            {
                Records.Clear();
                await base.BaseRead();

                foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
                {
                    Record record = new Record()
                    {
                        UID = (Guid)fieldValue["uid"],
                        Дата = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                        Стан = fieldValue["col_a2"].ToString() ?? "",
                        Посилання = fieldValue["col_a3"].ToString() ?? "",
                        Повідомлення = fieldValue["col_a4"].ToString() ?? "",
                        
                    };
                    Records.Add(record);
                }
            
                base.BaseClear();
            }
        
            public async ValueTask Save(bool clear_all_before_save /*= true*/) 
            {
                await base.BaseBeginTransaction();
                
                if (clear_all_before_save)
                    await base.BaseDelete();

                

                foreach (Record record in Records)
                {
                    
                    Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                    {
                        {"col_a1", record.Дата},
                        {"col_a2", record.Стан},
                        {"col_a3", record.Посилання},
                        {"col_a4", record.Повідомлення},
                        
                    };
                    record.UID = await base.BaseSave(record.UID, fieldValue);
                }
                
                await base.BaseCommitTransaction();
                Saved?.Invoke(this, new EventArgs());
            }

            public async ValueTask Remove(Record record)
            {
                await base.BaseRemove(record.UID);
                Records.RemoveAll(item => record.UID == item.UID);
            }

            public async ValueTask RemoveAll(List<Record> records)
            {
                List<Guid> removeList = [];

                await base.BaseBeginTransaction();
                foreach (Record record in records)
                {
                    removeList.Add(record.UID);
                    await base.BaseRemove(record.UID);
                }
                await base.BaseCommitTransaction();

                Records.RemoveAll(item => removeList.Exists(uid => uid == item.UID));
            }
        
            public async ValueTask Delete()
            {
                await base.BaseDelete();
            }
            
            public class Record : ConstantsTablePartRecord
            {
                public DateTime Дата { get; set; } = DateTime.MinValue;
                public string Стан { get; set; } = "";
                public string Посилання { get; set; } = "";
                public string Повідомлення { get; set; } = "";
                
            }
        }
               
    }
    #endregion
    
	  #region CONSTANTS BLOCK "ПриЗапускуПрограми"
    public static class ПриЗапускуПрограми
    {       
        public static bool ПрограмаЗаповненаПочатковимиДаними_Const
        {
            get 
            {
                var recordResult = Task.Run( async () => { return await Config.Kernel.DataBase.SelectConstants(SpecialTables.Constants, "col_h7"); } ).Result;
                return recordResult.Result ? ((recordResult.Value != DBNull.Value) ? (bool)recordResult.Value : false) : false;
            }
            set
            {
                Config.Kernel.DataBase.SaveConstants(SpecialTables.Constants, "col_h7", value);
            }
        }
             
    }
    #endregion
    
}

namespace GeneratedCode.Довідники
{
    
    #region DIRECTORY "Організації"
    public static class Організації_Const
    {
        public const string TABLE = "tab_a01";
        public const string TYPE = "Організації"; /* Назва вказівника */
        public const string POINTER = "Довідники.Організації"; /* Повна назва вказівника */
        public const string FULLNAME = "Організації"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a1", ];
        
        public const string Назва = "col_a1";
        public const string Код = "col_a2";
        public const string НазваПовна = "col_a3";
        public const string НазваСкорочена = "col_a4";
        public const string ДатаРеєстрації = "col_a5";
        public const string КраїнаРеєстрації = "col_a6";
        public const string СвідоцтвоСеріяНомер = "col_a7";
        public const string СвідоцтвоДатаВидачі = "col_a8";
        public const string Холдинг = "col_a9";
        public const string КлючовіСловаДляПошуку = "col_b1";
    }

    public class Організації_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Організації_Objest() : base(Config.Kernel, "tab_a01", Організації_Const.TYPE,
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", ], true)
        {
            
                //Табличні частини
                Контакти_TablePart = new Організації_Контакти_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Організації_Const.FULLNAME + " *");
            
                await Організації_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_a1"].ToString() ?? "";
                Код = base.FieldValue["col_a2"].ToString() ?? "";
                НазваПовна = base.FieldValue["col_a3"].ToString() ?? "";
                НазваСкорочена = base.FieldValue["col_a4"].ToString() ?? "";
                ДатаРеєстрації = (base.FieldValue["col_a5"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a5"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                КраїнаРеєстрації = base.FieldValue["col_a6"].ToString() ?? "";
                СвідоцтвоСеріяНомер = base.FieldValue["col_a7"].ToString() ?? "";
                СвідоцтвоДатаВидачі = base.FieldValue["col_a8"].ToString() ?? "";
                Холдинг = new Довідники.Організації_Pointer(base.FieldValue["col_a9"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_b1"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Контакти_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Назва;
            base.FieldValue["col_a2"] = Код;
            base.FieldValue["col_a3"] = НазваПовна;
            base.FieldValue["col_a4"] = НазваСкорочена;
            base.FieldValue["col_a5"] = ДатаРеєстрації;
            base.FieldValue["col_a6"] = КраїнаРеєстрації;
            base.FieldValue["col_a7"] = СвідоцтвоСеріяНомер;
            base.FieldValue["col_a8"] = СвідоцтвоДатаВидачі;
            base.FieldValue["col_a9"] = Холдинг.UnigueID.UGuid;
            base.FieldValue["col_b1"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НазваПовна, НазваСкорочена, КраїнаРеєстрації, СвідоцтвоСеріяНомер, СвідоцтвоДатаВидачі, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Організації_Objest> Copy(bool copyTableParts = false)
        {
            Організації_Objest copy = new Організації_Objest()
            {
                Назва = Назва,
                Код = Код,
                НазваПовна = НазваПовна,
                НазваСкорочена = НазваСкорочена,
                ДатаРеєстрації = ДатаРеєстрації,
                КраїнаРеєстрації = КраїнаРеєстрації,
                СвідоцтвоСеріяНомер = СвідоцтвоСеріяНомер,
                СвідоцтвоДатаВидачі = СвідоцтвоДатаВидачі,
                Холдинг = Холдинг,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Контакти - Таблична частина
                await Контакти_TablePart.Read();
                copy.Контакти_TablePart.Records = Контакти_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await Організації_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete(["tab_a02", ]);
        }
        
        public Організації_Pointer GetDirectoryPointer()
        {
            return new Організації_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Організації_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string НазваПовна { get; set; } = "";
        public string НазваСкорочена { get; set; } = "";
        public DateTime ДатаРеєстрації { get; set; } = DateTime.MinValue;
        public string КраїнаРеєстрації { get; set; } = "";
        public string СвідоцтвоСеріяНомер { get; set; } = "";
        public string СвідоцтвоДатаВидачі { get; set; } = "";
        public Довідники.Організації_Pointer Холдинг { get; set; } = new Довідники.Організації_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public Організації_Контакти_TablePart Контакти_TablePart { get; private set; }
        
    }

    public class Організації_Pointer : DirectoryPointer
    {
        public Організації_Pointer(object? uid = null) : base(Config.Kernel, "tab_a01", Організації_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Організації_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a01", Організації_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Організації_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Організації_Objest obj = new Організації_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Організації_Pointer Copy()
        {
            return new Організації_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Організації_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Організації_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Організації_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Організації_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Організації_Pointer GetEmptyPointer()
        {
            return new Організації_Pointer();
        }
    }
    
    public class Організації_Select : DirectorySelect
    {
        public Організації_Select() : base(Config.Kernel, "tab_a01") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Організації_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Організації_Pointer? Current { get; private set; }
        
        public async ValueTask<Організації_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Організації_Pointer(pointer) : new Організації_Pointer();
        }
        
        public async ValueTask<List<Організації_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Організації_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Організації_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class Організації_Контакти_TablePart : DirectoryTablePart
    {
        public Організації_Контакти_TablePart(Організації_Objest owner) : base(Config.Kernel, "tab_a02",
             ["col_a9", "col_a4", "col_a5", "col_a1", "col_a6", "col_a2", "col_a3", "col_a8", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_a02";
        
        public const string Тип = "col_a9";
        public const string Телефон = "col_a4";
        public const string ЕлектроннаПошта = "col_a5";
        public const string Країна = "col_a1";
        public const string Область = "col_a6";
        public const string Район = "col_a2";
        public const string Місто = "col_a3";
        public const string Значення = "col_a8";

        public Організації_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Тип = (fieldValue["col_a9"] != DBNull.Value) ? (Перелічення.ТипиКонтактноїІнформації)fieldValue["col_a9"] : 0,
                    Телефон = fieldValue["col_a4"].ToString() ?? "",
                    ЕлектроннаПошта = fieldValue["col_a5"].ToString() ?? "",
                    Країна = fieldValue["col_a1"].ToString() ?? "",
                    Область = fieldValue["col_a6"].ToString() ?? "",
                    Район = fieldValue["col_a2"].ToString() ?? "",
                    Місто = fieldValue["col_a3"].ToString() ?? "",
                    Значення = fieldValue["col_a8"].ToString() ?? "",
                    
                };
                Records.Add(record);
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a01"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a9", (int)record.Тип},
                    {"col_a4", record.Телефон},
                    {"col_a5", record.ЕлектроннаПошта},
                    {"col_a1", record.Країна},
                    {"col_a6", record.Область},
                    {"col_a2", record.Район},
                    {"col_a3", record.Місто},
                    {"col_a8", record.Значення},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Перелічення.ТипиКонтактноїІнформації Тип { get; set; } = 0;
            public string Телефон { get; set; } = "";
            public string ЕлектроннаПошта { get; set; } = "";
            public string Країна { get; set; } = "";
            public string Область { get; set; } = "";
            public string Район { get; set; } = "";
            public string Місто { get; set; } = "";
            public string Значення { get; set; } = "";
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "Номенклатура"
    public static class Номенклатура_Const
    {
        public const string TABLE = "tab_a03";
        public const string TYPE = "Номенклатура"; /* Назва вказівника */
        public const string POINTER = "Довідники.Номенклатура"; /* Повна назва вказівника */
        public const string FULLNAME = "Номенклатура"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_b1", ];
        
        public const string Назва = "col_b1";
        public const string Код = "col_b2";
        public const string НазваПовна = "col_b4";
        public const string Опис = "col_a1";
        public const string Артикул = "col_b3";
        public const string ТипНоменклатури = "col_b5";
        public const string Виробник = "col_a2";
        public const string ВидНоменклатури = "col_a3";
        public const string ОдиницяВиміру = "col_a4";
        public const string Папка = "col_a5";
        public const string ОсновнаКартинкаФайл = "col_a7";
    }

    public class Номенклатура_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Номенклатура_Objest() : base(Config.Kernel, "tab_a03", Номенклатура_Const.TYPE,
             ["col_b1", "col_b2", "col_b4", "col_a1", "col_b3", "col_b5", "col_a2", "col_a3", "col_a4", "col_a5", "col_a7", ], true)
        {
            
                //Табличні частини
                Файли_TablePart = new Номенклатура_Файли_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Номенклатура_Const.FULLNAME + " *");
            
                await Номенклатура_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_b1"].ToString() ?? "";
                Код = base.FieldValue["col_b2"].ToString() ?? "";
                НазваПовна = base.FieldValue["col_b4"].ToString() ?? "";
                Опис = base.FieldValue["col_a1"].ToString() ?? "";
                Артикул = base.FieldValue["col_b3"].ToString() ?? "";
                ТипНоменклатури = (base.FieldValue["col_b5"] != DBNull.Value) ? (Перелічення.ТипиНоменклатури)base.FieldValue["col_b5"] : 0;
                Виробник = new Довідники.Виробники_Pointer(base.FieldValue["col_a2"]);
                ВидНоменклатури = new Довідники.ВидиНоменклатури_Pointer(base.FieldValue["col_a3"]);
                ОдиницяВиміру = new Довідники.ПакуванняОдиниціВиміру_Pointer(base.FieldValue["col_a4"]);
                Папка = new Довідники.Номенклатура_Папки_Pointer(base.FieldValue["col_a5"]);
                ОсновнаКартинкаФайл = new Довідники.Файли_Pointer(base.FieldValue["col_a7"]);
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Файли_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_b1"] = Назва;
            base.FieldValue["col_b2"] = Код;
            base.FieldValue["col_b4"] = НазваПовна;
            base.FieldValue["col_a1"] = Опис;
            base.FieldValue["col_b3"] = Артикул;
            base.FieldValue["col_b5"] = (int)ТипНоменклатури;
            base.FieldValue["col_a2"] = Виробник.UnigueID.UGuid;
            base.FieldValue["col_a3"] = ВидНоменклатури.UnigueID.UGuid;
            base.FieldValue["col_a4"] = ОдиницяВиміру.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Папка.UnigueID.UGuid;
            base.FieldValue["col_a7"] = ОсновнаКартинкаФайл.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НазваПовна, Опис, Артикул, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Номенклатура_Objest> Copy(bool copyTableParts = false)
        {
            Номенклатура_Objest copy = new Номенклатура_Objest()
            {
                Назва = Назва,
                Код = Код,
                НазваПовна = НазваПовна,
                Опис = Опис,
                Артикул = Артикул,
                ТипНоменклатури = ТипНоменклатури,
                Виробник = Виробник,
                ВидНоменклатури = ВидНоменклатури,
                ОдиницяВиміру = ОдиницяВиміру,
                Папка = Папка,
                ОсновнаКартинкаФайл = ОсновнаКартинкаФайл,
                
            };
            
            if (copyTableParts)
            {
            
                //Файли - Таблична частина
                await Файли_TablePart.Read();
                copy.Файли_TablePart.Records = Файли_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await Номенклатура_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await Номенклатура_Triggers.SetDeletionLabel(this, label);      
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
                await Номенклатура_Triggers.BeforeDelete(this);      
            
            await base.BaseDelete(["tab_b19", ]);
        }
        
        public Номенклатура_Pointer GetDirectoryPointer()
        {
            return new Номенклатура_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Номенклатура_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string НазваПовна { get; set; } = "";
        public string Опис { get; set; } = "";
        public string Артикул { get; set; } = "";
        public Перелічення.ТипиНоменклатури ТипНоменклатури { get; set; } = 0;
        public Довідники.Виробники_Pointer Виробник { get; set; } = new Довідники.Виробники_Pointer();
        public Довідники.ВидиНоменклатури_Pointer ВидНоменклатури { get; set; } = new Довідники.ВидиНоменклатури_Pointer();
        public Довідники.ПакуванняОдиниціВиміру_Pointer ОдиницяВиміру { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
        public Довідники.Номенклатура_Папки_Pointer Папка { get; set; } = new Довідники.Номенклатура_Папки_Pointer();
        public Довідники.Файли_Pointer ОсновнаКартинкаФайл { get; set; } = new Довідники.Файли_Pointer();
        
        //Табличні частини
        public Номенклатура_Файли_TablePart Файли_TablePart { get; private set; }
        
    }

    public class Номенклатура_Pointer : DirectoryPointer
    {
        public Номенклатура_Pointer(object? uid = null) : base(Config.Kernel, "tab_a03", Номенклатура_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Номенклатура_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a03", Номенклатура_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Номенклатура_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Номенклатура_Objest obj = new Номенклатура_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Номенклатура_Pointer Copy()
        {
            return new Номенклатура_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Номенклатура_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Номенклатура_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Номенклатура_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Номенклатура_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            Номенклатура_Objest? obj = await GetDirectoryObject();
              if (obj != null) await Номенклатура_Triggers.SetDeletionLabel(obj, label);
            
            await base.BaseDeletionLabel(label);
        }
		
        public Номенклатура_Pointer GetEmptyPointer()
        {
            return new Номенклатура_Pointer();
        }
    }
    
    public class Номенклатура_Select : DirectorySelect
    {
        public Номенклатура_Select() : base(Config.Kernel, "tab_a03") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Номенклатура_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Номенклатура_Pointer? Current { get; private set; }
        
        public async ValueTask<Номенклатура_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Номенклатура_Pointer(pointer) : new Номенклатура_Pointer();
        }
        
        public async ValueTask<List<Номенклатура_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Номенклатура_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Номенклатура_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class Номенклатура_Файли_TablePart : DirectoryTablePart
    {
        public Номенклатура_Файли_TablePart(Номенклатура_Objest owner) : base(Config.Kernel, "tab_b19",
             ["col_a1", "col_a3", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_b19";
        
        public const string Файл = "col_a1";
        public const string Основний = "col_a3";

        public Номенклатура_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            Довідники.Файли_Pointer.GetJoin(QuerySelect, Файл, "tab_b19", "join_tab_1", "Файл");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Файл = new Довідники.Файли_Pointer(fieldValue["col_a1"]),
                    Основний = (fieldValue["col_a3"] != DBNull.Value) ? (bool)fieldValue["col_a3"] : false,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Файл.Name = ItemValue["Файл"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a03"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.Файл.UnigueID.UGuid},
                    {"col_a3", record.Основний},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Довідники.Файли_Pointer Файл { get; set; } = new Довідники.Файли_Pointer();
            public bool Основний { get; set; } = false;
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "Виробники"
    public static class Виробники_Const
    {
        public const string TABLE = "tab_a04";
        public const string TYPE = "Виробники"; /* Назва вказівника */
        public const string POINTER = "Довідники.Виробники"; /* Повна назва вказівника */
        public const string FULLNAME = "Виробники"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_b6", ];
        
        public const string Назва = "col_b6";
        public const string Код = "col_b7";
    }

    public class Виробники_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Виробники_Objest() : base(Config.Kernel, "tab_a04", Виробники_Const.TYPE,
             ["col_b6", "col_b7", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Виробники_Const.FULLNAME + " *");
            
                await Виробники_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_b6"].ToString() ?? "";
                Код = base.FieldValue["col_b7"].ToString() ?? "";
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_b6"] = Назва;
            base.FieldValue["col_b7"] = Код;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Виробники_Objest> Copy(bool copyTableParts = false)
        {
            Виробники_Objest copy = new Виробники_Objest()
            {
                Назва = Назва,
                Код = Код,
                
            };
            

            await copy.New();
            
            await Виробники_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public Виробники_Pointer GetDirectoryPointer()
        {
            return new Виробники_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Виробники_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        
    }

    public class Виробники_Pointer : DirectoryPointer
    {
        public Виробники_Pointer(object? uid = null) : base(Config.Kernel, "tab_a04", Виробники_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Виробники_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a04", Виробники_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Виробники_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Виробники_Objest obj = new Виробники_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Виробники_Pointer Copy()
        {
            return new Виробники_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Виробники_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Виробники_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Виробники_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Виробники_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Виробники_Pointer GetEmptyPointer()
        {
            return new Виробники_Pointer();
        }
    }
    
    public class Виробники_Select : DirectorySelect
    {
        public Виробники_Select() : base(Config.Kernel, "tab_a04") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Виробники_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Виробники_Pointer? Current { get; private set; }
        
        public async ValueTask<Виробники_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Виробники_Pointer(pointer) : new Виробники_Pointer();
        }
        
        public async ValueTask<List<Виробники_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Виробники_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Виробники_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ВидиНоменклатури"
    public static class ВидиНоменклатури_Const
    {
        public const string TABLE = "tab_a05";
        public const string TYPE = "ВидиНоменклатури"; /* Назва вказівника */
        public const string POINTER = "Довідники.ВидиНоменклатури"; /* Повна назва вказівника */
        public const string FULLNAME = "Види номенклатури"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_b8", ];
        
        public const string Назва = "col_b8";
        public const string Код = "col_b9";
        public const string Опис = "col_a2";
        public const string ТипНоменклатури = "col_a1";
        public const string ОдиницяВиміру = "col_a4";
    }

    public class ВидиНоменклатури_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ВидиНоменклатури_Objest() : base(Config.Kernel, "tab_a05", ВидиНоменклатури_Const.TYPE,
             ["col_b8", "col_b9", "col_a2", "col_a1", "col_a4", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ВидиНоменклатури_Const.FULLNAME + " *");
            
                await ВидиНоменклатури_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_b8"].ToString() ?? "";
                Код = base.FieldValue["col_b9"].ToString() ?? "";
                Опис = base.FieldValue["col_a2"].ToString() ?? "";
                ТипНоменклатури = (base.FieldValue["col_a1"] != DBNull.Value) ? (Перелічення.ТипиНоменклатури)base.FieldValue["col_a1"] : 0;
                ОдиницяВиміру = new Довідники.ПакуванняОдиниціВиміру_Pointer(base.FieldValue["col_a4"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_b8"] = Назва;
            base.FieldValue["col_b9"] = Код;
            base.FieldValue["col_a2"] = Опис;
            base.FieldValue["col_a1"] = (int)ТипНоменклатури;
            base.FieldValue["col_a4"] = ОдиницяВиміру.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, Опис, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ВидиНоменклатури_Objest> Copy(bool copyTableParts = false)
        {
            ВидиНоменклатури_Objest copy = new ВидиНоменклатури_Objest()
            {
                Назва = Назва,
                Код = Код,
                Опис = Опис,
                ТипНоменклатури = ТипНоменклатури,
                ОдиницяВиміру = ОдиницяВиміру,
                
            };
            

            await copy.New();
            
            await ВидиНоменклатури_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ВидиНоменклатури_Pointer GetDirectoryPointer()
        {
            return new ВидиНоменклатури_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ВидиНоменклатури_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string Опис { get; set; } = "";
        public Перелічення.ТипиНоменклатури ТипНоменклатури { get; set; } = 0;
        public Довідники.ПакуванняОдиниціВиміру_Pointer ОдиницяВиміру { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
        
    }

    public class ВидиНоменклатури_Pointer : DirectoryPointer
    {
        public ВидиНоменклатури_Pointer(object? uid = null) : base(Config.Kernel, "tab_a05", ВидиНоменклатури_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ВидиНоменклатури_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a05", ВидиНоменклатури_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ВидиНоменклатури_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ВидиНоменклатури_Objest obj = new ВидиНоменклатури_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ВидиНоменклатури_Pointer Copy()
        {
            return new ВидиНоменклатури_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ВидиНоменклатури_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ВидиНоменклатури_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ВидиНоменклатури_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ВидиНоменклатури_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ВидиНоменклатури_Pointer GetEmptyPointer()
        {
            return new ВидиНоменклатури_Pointer();
        }
    }
    
    public class ВидиНоменклатури_Select : DirectorySelect
    {
        public ВидиНоменклатури_Select() : base(Config.Kernel, "tab_a05") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ВидиНоменклатури_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ВидиНоменклатури_Pointer? Current { get; private set; }
        
        public async ValueTask<ВидиНоменклатури_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ВидиНоменклатури_Pointer(pointer) : new ВидиНоменклатури_Pointer();
        }
        
        public async ValueTask<List<ВидиНоменклатури_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ВидиНоменклатури_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ВидиНоменклатури_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ПакуванняОдиниціВиміру"
    public static class ПакуванняОдиниціВиміру_Const
    {
        public const string TABLE = "tab_a06";
        public const string TYPE = "ПакуванняОдиниціВиміру"; /* Назва вказівника */
        public const string POINTER = "Довідники.ПакуванняОдиниціВиміру"; /* Повна назва вказівника */
        public const string FULLNAME = "Одиниці виміру"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_c1", ];
        
        public const string Назва = "col_c1";
        public const string Код = "col_c2";
        public const string НазваПовна = "col_c3";
        public const string КількістьУпаковок = "col_c4";
    }

    public class ПакуванняОдиниціВиміру_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПакуванняОдиниціВиміру_Objest() : base(Config.Kernel, "tab_a06", ПакуванняОдиниціВиміру_Const.TYPE,
             ["col_c1", "col_c2", "col_c3", "col_c4", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПакуванняОдиниціВиміру_Const.FULLNAME + " *");
            
                await ПакуванняОдиниціВиміру_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_c1"].ToString() ?? "";
                Код = base.FieldValue["col_c2"].ToString() ?? "";
                НазваПовна = base.FieldValue["col_c3"].ToString() ?? "";
                КількістьУпаковок = (base.FieldValue["col_c4"] != DBNull.Value) ? (int)base.FieldValue["col_c4"] : 0;
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПакуванняОдиниціВиміру_Triggers.BeforeSave(this);
            base.FieldValue["col_c1"] = Назва;
            base.FieldValue["col_c2"] = Код;
            base.FieldValue["col_c3"] = НазваПовна;
            base.FieldValue["col_c4"] = КількістьУпаковок;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НазваПовна, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ПакуванняОдиниціВиміру_Objest> Copy(bool copyTableParts = false)
        {
            ПакуванняОдиниціВиміру_Objest copy = new ПакуванняОдиниціВиміру_Objest()
            {
                Назва = Назва,
                Код = Код,
                НазваПовна = НазваПовна,
                КількістьУпаковок = КількістьУпаковок,
                
            };
            

            await copy.New();
            
            await ПакуванняОдиниціВиміру_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ПакуванняОдиниціВиміру_Pointer GetDirectoryPointer()
        {
            return new ПакуванняОдиниціВиміру_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПакуванняОдиниціВиміру_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string НазваПовна { get; set; } = "";
        public int КількістьУпаковок { get; set; } = 0;
        
    }

    public class ПакуванняОдиниціВиміру_Pointer : DirectoryPointer
    {
        public ПакуванняОдиниціВиміру_Pointer(object? uid = null) : base(Config.Kernel, "tab_a06", ПакуванняОдиниціВиміру_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПакуванняОдиниціВиміру_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a06", ПакуванняОдиниціВиміру_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ПакуванняОдиниціВиміру_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПакуванняОдиниціВиміру_Objest obj = new ПакуванняОдиниціВиміру_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ПакуванняОдиниціВиміру_Pointer Copy()
        {
            return new ПакуванняОдиниціВиміру_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПакуванняОдиниціВиміру_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПакуванняОдиниціВиміру_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПакуванняОдиниціВиміру_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПакуванняОдиниціВиміру_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ПакуванняОдиниціВиміру_Pointer GetEmptyPointer()
        {
            return new ПакуванняОдиниціВиміру_Pointer();
        }
    }
    
    public class ПакуванняОдиниціВиміру_Select : DirectorySelect
    {
        public ПакуванняОдиниціВиміру_Select() : base(Config.Kernel, "tab_a06") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПакуванняОдиниціВиміру_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПакуванняОдиниціВиміру_Pointer? Current { get; private set; }
        
        public async ValueTask<ПакуванняОдиниціВиміру_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПакуванняОдиниціВиміру_Pointer(pointer) : new ПакуванняОдиниціВиміру_Pointer();
        }
        
        public async ValueTask<List<ПакуванняОдиниціВиміру_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПакуванняОдиниціВиміру_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ПакуванняОдиниціВиміру_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "Валюти"
    public static class Валюти_Const
    {
        public const string TABLE = "tab_a07";
        public const string TYPE = "Валюти"; /* Назва вказівника */
        public const string POINTER = "Довідники.Валюти"; /* Повна назва вказівника */
        public const string FULLNAME = "Валюти"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_c5", ];
        
        public const string Назва = "col_c5";
        public const string КороткаНазва = "col_a2";
        public const string Код = "col_c6";
        public const string Код_R030 = "col_a1";
        public const string ВиводитиКурсНаСтартову = "col_a3";
    }

    public class Валюти_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Валюти_Objest() : base(Config.Kernel, "tab_a07", Валюти_Const.TYPE,
             ["col_c5", "col_a2", "col_c6", "col_a1", "col_a3", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Валюти_Const.FULLNAME + " *");
            
                await Валюти_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_c5"].ToString() ?? "";
                КороткаНазва = base.FieldValue["col_a2"].ToString() ?? "";
                Код = base.FieldValue["col_c6"].ToString() ?? "";
                Код_R030 = base.FieldValue["col_a1"].ToString() ?? "";
                ВиводитиКурсНаСтартову = (base.FieldValue["col_a3"] != DBNull.Value) ? (bool)base.FieldValue["col_a3"] : false;
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_c5"] = Назва;
            base.FieldValue["col_a2"] = КороткаНазва;
            base.FieldValue["col_c6"] = Код;
            base.FieldValue["col_a1"] = Код_R030;
            base.FieldValue["col_a3"] = ВиводитиКурсНаСтартову;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, КороткаНазва, Код_R030, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Валюти_Objest> Copy(bool copyTableParts = false)
        {
            Валюти_Objest copy = new Валюти_Objest()
            {
                Назва = Назва,
                КороткаНазва = КороткаНазва,
                Код = Код,
                Код_R030 = Код_R030,
                ВиводитиКурсНаСтартову = ВиводитиКурсНаСтартову,
                
            };
            

            await copy.New();
            
            await Валюти_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await Валюти_Triggers.SetDeletionLabel(this, label);      
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
                await Валюти_Triggers.BeforeDelete(this);      
            
            await base.BaseDelete([]);
        }
        
        public Валюти_Pointer GetDirectoryPointer()
        {
            return new Валюти_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Валюти_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string КороткаНазва { get; set; } = "";
        public string Код { get; set; } = "";
        public string Код_R030 { get; set; } = "";
        public bool ВиводитиКурсНаСтартову { get; set; } = false;
        
    }

    public class Валюти_Pointer : DirectoryPointer
    {
        public Валюти_Pointer(object? uid = null) : base(Config.Kernel, "tab_a07", Валюти_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Валюти_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a07", Валюти_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Валюти_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Валюти_Objest obj = new Валюти_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Валюти_Pointer Copy()
        {
            return new Валюти_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Валюти_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Валюти_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Валюти_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Валюти_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            Валюти_Objest? obj = await GetDirectoryObject();
              if (obj != null) await Валюти_Triggers.SetDeletionLabel(obj, label);
            
            await base.BaseDeletionLabel(label);
        }
		
        public Валюти_Pointer GetEmptyPointer()
        {
            return new Валюти_Pointer();
        }
    }
    
    public class Валюти_Select : DirectorySelect
    {
        public Валюти_Select() : base(Config.Kernel, "tab_a07") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Валюти_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Валюти_Pointer? Current { get; private set; }
        
        public async ValueTask<Валюти_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Валюти_Pointer(pointer) : new Валюти_Pointer();
        }
        
        public async ValueTask<List<Валюти_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Валюти_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Валюти_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "Контрагенти"
    public static class Контрагенти_Const
    {
        public const string TABLE = "tab_a08";
        public const string TYPE = "Контрагенти"; /* Назва вказівника */
        public const string POINTER = "Довідники.Контрагенти"; /* Повна назва вказівника */
        public const string FULLNAME = "Контрагенти"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_c7", ];
        
        public const string Назва = "col_c7";
        public const string Код = "col_c8";
        public const string НазваПовна = "col_c9";
        public const string РеєстраційнийНомер = "col_d1";
        public const string Папка = "col_a1";
        public const string Опис = "col_a2";
        public const string КлючовіСловаДляПошуку = "col_a3";
        public const string Постачальник = "col_a4";
        public const string Покупець = "col_a5";
    }

    public class Контрагенти_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Контрагенти_Objest() : base(Config.Kernel, "tab_a08", Контрагенти_Const.TYPE,
             ["col_c7", "col_c8", "col_c9", "col_d1", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", ], true)
        {
            
                //Табличні частини
                Контакти_TablePart = new Контрагенти_Контакти_TablePart(this);
                Файли_TablePart = new Контрагенти_Файли_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Контрагенти_Const.FULLNAME + " *");
            
                await Контрагенти_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_c7"].ToString() ?? "";
                Код = base.FieldValue["col_c8"].ToString() ?? "";
                НазваПовна = base.FieldValue["col_c9"].ToString() ?? "";
                РеєстраційнийНомер = base.FieldValue["col_d1"].ToString() ?? "";
                Папка = new Довідники.Контрагенти_Папки_Pointer(base.FieldValue["col_a1"]);
                Опис = base.FieldValue["col_a2"].ToString() ?? "";
                КлючовіСловаДляПошуку = base.FieldValue["col_a3"].ToString() ?? "";
                Постачальник = (base.FieldValue["col_a4"] != DBNull.Value) ? (bool)base.FieldValue["col_a4"] : false;
                Покупець = (base.FieldValue["col_a5"] != DBNull.Value) ? (bool)base.FieldValue["col_a5"] : false;
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Контакти_TablePart.Read();
                    await Файли_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_c7"] = Назва;
            base.FieldValue["col_c8"] = Код;
            base.FieldValue["col_c9"] = НазваПовна;
            base.FieldValue["col_d1"] = РеєстраційнийНомер;
            base.FieldValue["col_a1"] = Папка.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Опис;
            base.FieldValue["col_a3"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a4"] = Постачальник;
            base.FieldValue["col_a5"] = Покупець;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await Контрагенти_Triggers.AfterSave(this);     
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НазваПовна, РеєстраційнийНомер, Опис, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Контрагенти_Objest> Copy(bool copyTableParts = false)
        {
            Контрагенти_Objest copy = new Контрагенти_Objest()
            {
                Назва = Назва,
                Код = Код,
                НазваПовна = НазваПовна,
                РеєстраційнийНомер = РеєстраційнийНомер,
                Папка = Папка,
                Опис = Опис,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Постачальник = Постачальник,
                Покупець = Покупець,
                
            };
            
            if (copyTableParts)
            {
            
                //Контакти - Таблична частина
                await Контакти_TablePart.Read();
                copy.Контакти_TablePart.Records = Контакти_TablePart.Copy();
            
                //Файли - Таблична частина
                await Файли_TablePart.Read();
                copy.Файли_TablePart.Records = Файли_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await Контрагенти_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await Контрагенти_Triggers.SetDeletionLabel(this, label);      
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete(["tab_a09", "tab_b20", ]);
        }
        
        public Контрагенти_Pointer GetDirectoryPointer()
        {
            return new Контрагенти_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Контрагенти_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string НазваПовна { get; set; } = "";
        public string РеєстраційнийНомер { get; set; } = "";
        public Довідники.Контрагенти_Папки_Pointer Папка { get; set; } = new Довідники.Контрагенти_Папки_Pointer();
        public string Опис { get; set; } = "";
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public bool Постачальник { get; set; } = false;
        public bool Покупець { get; set; } = false;
        
        //Табличні частини
        public Контрагенти_Контакти_TablePart Контакти_TablePart { get; private set; }
        public Контрагенти_Файли_TablePart Файли_TablePart { get; private set; }
        
    }

    public class Контрагенти_Pointer : DirectoryPointer
    {
        public Контрагенти_Pointer(object? uid = null) : base(Config.Kernel, "tab_a08", Контрагенти_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Контрагенти_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a08", Контрагенти_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Контрагенти_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Контрагенти_Objest obj = new Контрагенти_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Контрагенти_Pointer Copy()
        {
            return new Контрагенти_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Контрагенти_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Контрагенти_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Контрагенти_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Контрагенти_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            Контрагенти_Objest? obj = await GetDirectoryObject();
              if (obj != null) await Контрагенти_Triggers.SetDeletionLabel(obj, label);
            
            await base.BaseDeletionLabel(label);
        }
		
        public Контрагенти_Pointer GetEmptyPointer()
        {
            return new Контрагенти_Pointer();
        }
    }
    
    public class Контрагенти_Select : DirectorySelect
    {
        public Контрагенти_Select() : base(Config.Kernel, "tab_a08") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Контрагенти_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Контрагенти_Pointer? Current { get; private set; }
        
        public async ValueTask<Контрагенти_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Контрагенти_Pointer(pointer) : new Контрагенти_Pointer();
        }
        
        public async ValueTask<List<Контрагенти_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Контрагенти_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Контрагенти_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class Контрагенти_Контакти_TablePart : DirectoryTablePart
    {
        public Контрагенти_Контакти_TablePart(Контрагенти_Objest owner) : base(Config.Kernel, "tab_a09",
             ["col_d2", "col_d8", "col_d7", "col_d3", "col_d5", "col_d4", "col_d6", "col_a1", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_a09";
        
        public const string Тип = "col_d2";
        public const string Телефон = "col_d8";
        public const string ЕлектроннаПошта = "col_d7";
        public const string Країна = "col_d3";
        public const string Область = "col_d5";
        public const string Район = "col_d4";
        public const string Місто = "col_d6";
        public const string Значення = "col_a1";

        public Контрагенти_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Тип = (fieldValue["col_d2"] != DBNull.Value) ? (Перелічення.ТипиКонтактноїІнформації)fieldValue["col_d2"] : 0,
                    Телефон = fieldValue["col_d8"].ToString() ?? "",
                    ЕлектроннаПошта = fieldValue["col_d7"].ToString() ?? "",
                    Країна = fieldValue["col_d3"].ToString() ?? "",
                    Область = fieldValue["col_d5"].ToString() ?? "",
                    Район = fieldValue["col_d4"].ToString() ?? "",
                    Місто = fieldValue["col_d6"].ToString() ?? "",
                    Значення = fieldValue["col_a1"].ToString() ?? "",
                    
                };
                Records.Add(record);
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a08"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_d2", (int)record.Тип},
                    {"col_d8", record.Телефон},
                    {"col_d7", record.ЕлектроннаПошта},
                    {"col_d3", record.Країна},
                    {"col_d5", record.Область},
                    {"col_d4", record.Район},
                    {"col_d6", record.Місто},
                    {"col_a1", record.Значення},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Перелічення.ТипиКонтактноїІнформації Тип { get; set; } = 0;
            public string Телефон { get; set; } = "";
            public string ЕлектроннаПошта { get; set; } = "";
            public string Країна { get; set; } = "";
            public string Область { get; set; } = "";
            public string Район { get; set; } = "";
            public string Місто { get; set; } = "";
            public string Значення { get; set; } = "";
            
        }
    }
      
    
    public class Контрагенти_Файли_TablePart : DirectoryTablePart
    {
        public Контрагенти_Файли_TablePart(Контрагенти_Objest owner) : base(Config.Kernel, "tab_b20",
             ["col_a1", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_b20";
        
        public const string Файл = "col_a1";

        public Контрагенти_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            Довідники.Файли_Pointer.GetJoin(QuerySelect, Файл, "tab_b20", "join_tab_1", "Файл");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Файл = new Довідники.Файли_Pointer(fieldValue["col_a1"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Файл.Name = ItemValue["Файл"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a08"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.Файл.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Довідники.Файли_Pointer Файл { get; set; } = new Довідники.Файли_Pointer();
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "Склади"
    public static class Склади_Const
    {
        public const string TABLE = "tab_a10";
        public const string TYPE = "Склади"; /* Назва вказівника */
        public const string POINTER = "Довідники.Склади"; /* Повна назва вказівника */
        public const string FULLNAME = "Склади"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_d9", ];
        
        public const string Назва = "col_d9";
        public const string Код = "col_e1";
        public const string ТипСкладу = "col_a1";
        public const string Відповідальний = "col_a2";
        public const string ВидЦін = "col_a3";
        public const string Підрозділ = "col_a4";
        public const string Папка = "col_a5";
        public const string НалаштуванняАдресногоЗберігання = "col_a6";
        public const string КлючовіСловаДляПошуку = "col_a7";
    }

    public class Склади_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Склади_Objest() : base(Config.Kernel, "tab_a10", Склади_Const.TYPE,
             ["col_d9", "col_e1", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ], true)
        {
            
                //Табличні частини
                Контакти_TablePart = new Склади_Контакти_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Склади_Const.FULLNAME + " *");
            
                await Склади_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_d9"].ToString() ?? "";
                Код = base.FieldValue["col_e1"].ToString() ?? "";
                ТипСкладу = (base.FieldValue["col_a1"] != DBNull.Value) ? (Перелічення.ТипиСкладів)base.FieldValue["col_a1"] : 0;
                Відповідальний = new Довідники.ФізичніОсоби_Pointer(base.FieldValue["col_a2"]);
                ВидЦін = new Довідники.ВидиЦін_Pointer(base.FieldValue["col_a3"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a4"]);
                Папка = new Довідники.Склади_Папки_Pointer(base.FieldValue["col_a5"]);
                НалаштуванняАдресногоЗберігання = (base.FieldValue["col_a6"] != DBNull.Value) ? (Перелічення.НалаштуванняАдресногоЗберігання)base.FieldValue["col_a6"] : 0;
                КлючовіСловаДляПошуку = base.FieldValue["col_a7"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Контакти_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_d9"] = Назва;
            base.FieldValue["col_e1"] = Код;
            base.FieldValue["col_a1"] = (int)ТипСкладу;
            base.FieldValue["col_a2"] = Відповідальний.UnigueID.UGuid;
            base.FieldValue["col_a3"] = ВидЦін.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Папка.UnigueID.UGuid;
            base.FieldValue["col_a6"] = (int)НалаштуванняАдресногоЗберігання;
            base.FieldValue["col_a7"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Склади_Objest> Copy(bool copyTableParts = false)
        {
            Склади_Objest copy = new Склади_Objest()
            {
                Назва = Назва,
                Код = Код,
                ТипСкладу = ТипСкладу,
                Відповідальний = Відповідальний,
                ВидЦін = ВидЦін,
                Підрозділ = Підрозділ,
                Папка = Папка,
                НалаштуванняАдресногоЗберігання = НалаштуванняАдресногоЗберігання,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Контакти - Таблична частина
                await Контакти_TablePart.Read();
                copy.Контакти_TablePart.Records = Контакти_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await Склади_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete(["tab_a11", ]);
        }
        
        public Склади_Pointer GetDirectoryPointer()
        {
            return new Склади_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Склади_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Перелічення.ТипиСкладів ТипСкладу { get; set; } = 0;
        public Довідники.ФізичніОсоби_Pointer Відповідальний { get; set; } = new Довідники.ФізичніОсоби_Pointer();
        public Довідники.ВидиЦін_Pointer ВидЦін { get; set; } = new Довідники.ВидиЦін_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Папки_Pointer Папка { get; set; } = new Довідники.Склади_Папки_Pointer();
        public Перелічення.НалаштуванняАдресногоЗберігання НалаштуванняАдресногоЗберігання { get; set; } = 0;
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public Склади_Контакти_TablePart Контакти_TablePart { get; private set; }
        
    }

    public class Склади_Pointer : DirectoryPointer
    {
        public Склади_Pointer(object? uid = null) : base(Config.Kernel, "tab_a10", Склади_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Склади_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a10", Склади_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Склади_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Склади_Objest obj = new Склади_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Склади_Pointer Copy()
        {
            return new Склади_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Склади_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Склади_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Склади_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Склади_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Склади_Pointer GetEmptyPointer()
        {
            return new Склади_Pointer();
        }
    }
    
    public class Склади_Select : DirectorySelect
    {
        public Склади_Select() : base(Config.Kernel, "tab_a10") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Склади_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Склади_Pointer? Current { get; private set; }
        
        public async ValueTask<Склади_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Склади_Pointer(pointer) : new Склади_Pointer();
        }
        
        public async ValueTask<List<Склади_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Склади_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Склади_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class Склади_Контакти_TablePart : DirectoryTablePart
    {
        public Склади_Контакти_TablePart(Склади_Objest owner) : base(Config.Kernel, "tab_a11",
             ["col_e2", "col_e8", "col_e7", "col_e3", "col_e5", "col_e4", "col_e6", "col_a1", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_a11";
        
        public const string Тип = "col_e2";
        public const string Телефон = "col_e8";
        public const string ЕлектроннаПошта = "col_e7";
        public const string Країна = "col_e3";
        public const string Область = "col_e5";
        public const string Район = "col_e4";
        public const string Місто = "col_e6";
        public const string Значення = "col_a1";

        public Склади_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Тип = (fieldValue["col_e2"] != DBNull.Value) ? (Перелічення.ТипиКонтактноїІнформації)fieldValue["col_e2"] : 0,
                    Телефон = fieldValue["col_e8"].ToString() ?? "",
                    ЕлектроннаПошта = fieldValue["col_e7"].ToString() ?? "",
                    Країна = fieldValue["col_e3"].ToString() ?? "",
                    Область = fieldValue["col_e5"].ToString() ?? "",
                    Район = fieldValue["col_e4"].ToString() ?? "",
                    Місто = fieldValue["col_e6"].ToString() ?? "",
                    Значення = fieldValue["col_a1"].ToString() ?? "",
                    
                };
                Records.Add(record);
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a10"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_e2", (int)record.Тип},
                    {"col_e8", record.Телефон},
                    {"col_e7", record.ЕлектроннаПошта},
                    {"col_e3", record.Країна},
                    {"col_e5", record.Область},
                    {"col_e4", record.Район},
                    {"col_e6", record.Місто},
                    {"col_a1", record.Значення},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Перелічення.ТипиКонтактноїІнформації Тип { get; set; } = 0;
            public string Телефон { get; set; } = "";
            public string ЕлектроннаПошта { get; set; } = "";
            public string Країна { get; set; } = "";
            public string Область { get; set; } = "";
            public string Район { get; set; } = "";
            public string Місто { get; set; } = "";
            public string Значення { get; set; } = "";
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "ВидиЦін"
    public static class ВидиЦін_Const
    {
        public const string TABLE = "tab_a12";
        public const string TYPE = "ВидиЦін"; /* Назва вказівника */
        public const string POINTER = "Довідники.ВидиЦін"; /* Повна назва вказівника */
        public const string FULLNAME = "Види цін"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_e9", ];
        
        public const string Назва = "col_e9";
        public const string Код = "col_f1";
        public const string Валюта = "col_f2";
    }

    public class ВидиЦін_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ВидиЦін_Objest() : base(Config.Kernel, "tab_a12", ВидиЦін_Const.TYPE,
             ["col_e9", "col_f1", "col_f2", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ВидиЦін_Const.FULLNAME + " *");
            
                await ВидиЦін_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_e9"].ToString() ?? "";
                Код = base.FieldValue["col_f1"].ToString() ?? "";
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_f2"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_e9"] = Назва;
            base.FieldValue["col_f1"] = Код;
            base.FieldValue["col_f2"] = Валюта.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ВидиЦін_Objest> Copy(bool copyTableParts = false)
        {
            ВидиЦін_Objest copy = new ВидиЦін_Objest()
            {
                Назва = Назва,
                Код = Код,
                Валюта = Валюта,
                
            };
            

            await copy.New();
            
            await ВидиЦін_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ВидиЦін_Pointer GetDirectoryPointer()
        {
            return new ВидиЦін_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ВидиЦін_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        
    }

    public class ВидиЦін_Pointer : DirectoryPointer
    {
        public ВидиЦін_Pointer(object? uid = null) : base(Config.Kernel, "tab_a12", ВидиЦін_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ВидиЦін_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a12", ВидиЦін_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ВидиЦін_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ВидиЦін_Objest obj = new ВидиЦін_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ВидиЦін_Pointer Copy()
        {
            return new ВидиЦін_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ВидиЦін_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ВидиЦін_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ВидиЦін_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ВидиЦін_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ВидиЦін_Pointer GetEmptyPointer()
        {
            return new ВидиЦін_Pointer();
        }
    }
    
    public class ВидиЦін_Select : DirectorySelect
    {
        public ВидиЦін_Select() : base(Config.Kernel, "tab_a12") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ВидиЦін_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ВидиЦін_Pointer? Current { get; private set; }
        
        public async ValueTask<ВидиЦін_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ВидиЦін_Pointer(pointer) : new ВидиЦін_Pointer();
        }
        
        public async ValueTask<List<ВидиЦін_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ВидиЦін_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ВидиЦін_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ВидиЦінПостачальників"
    public static class ВидиЦінПостачальників_Const
    {
        public const string TABLE = "tab_a13";
        public const string TYPE = "ВидиЦінПостачальників"; /* Назва вказівника */
        public const string POINTER = "Довідники.ВидиЦінПостачальників"; /* Повна назва вказівника */
        public const string FULLNAME = "Види цін постачальників"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_f3", ];
        
        public const string Назва = "col_f3";
        public const string Код = "col_f4";
        public const string Валюта = "col_f5";
    }

    public class ВидиЦінПостачальників_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ВидиЦінПостачальників_Objest() : base(Config.Kernel, "tab_a13", ВидиЦінПостачальників_Const.TYPE,
             ["col_f3", "col_f4", "col_f5", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ВидиЦінПостачальників_Const.FULLNAME + " *");
            
                await ВидиЦінПостачальників_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_f3"].ToString() ?? "";
                Код = base.FieldValue["col_f4"].ToString() ?? "";
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_f5"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_f3"] = Назва;
            base.FieldValue["col_f4"] = Код;
            base.FieldValue["col_f5"] = Валюта.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ВидиЦінПостачальників_Objest> Copy(bool copyTableParts = false)
        {
            ВидиЦінПостачальників_Objest copy = new ВидиЦінПостачальників_Objest()
            {
                Назва = Назва,
                Код = Код,
                Валюта = Валюта,
                
            };
            

            await copy.New();
            
            await ВидиЦінПостачальників_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ВидиЦінПостачальників_Pointer GetDirectoryPointer()
        {
            return new ВидиЦінПостачальників_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ВидиЦінПостачальників_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        
    }

    public class ВидиЦінПостачальників_Pointer : DirectoryPointer
    {
        public ВидиЦінПостачальників_Pointer(object? uid = null) : base(Config.Kernel, "tab_a13", ВидиЦінПостачальників_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ВидиЦінПостачальників_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a13", ВидиЦінПостачальників_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ВидиЦінПостачальників_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ВидиЦінПостачальників_Objest obj = new ВидиЦінПостачальників_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ВидиЦінПостачальників_Pointer Copy()
        {
            return new ВидиЦінПостачальників_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ВидиЦінПостачальників_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ВидиЦінПостачальників_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ВидиЦінПостачальників_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ВидиЦінПостачальників_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ВидиЦінПостачальників_Pointer GetEmptyPointer()
        {
            return new ВидиЦінПостачальників_Pointer();
        }
    }
    
    public class ВидиЦінПостачальників_Select : DirectorySelect
    {
        public ВидиЦінПостачальників_Select() : base(Config.Kernel, "tab_a13") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ВидиЦінПостачальників_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ВидиЦінПостачальників_Pointer? Current { get; private set; }
        
        public async ValueTask<ВидиЦінПостачальників_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ВидиЦінПостачальників_Pointer(pointer) : new ВидиЦінПостачальників_Pointer();
        }
        
        public async ValueTask<List<ВидиЦінПостачальників_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ВидиЦінПостачальників_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ВидиЦінПостачальників_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "Користувачі"
    public static class Користувачі_Const
    {
        public const string TABLE = "tab_a14";
        public const string TYPE = "Користувачі"; /* Назва вказівника */
        public const string POINTER = "Довідники.Користувачі"; /* Повна назва вказівника */
        public const string FULLNAME = "Користувачі"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_f6", ];
        
        public const string Назва = "col_f6";
        public const string Код = "col_f7";
        public const string ФізичнаОсоба = "col_a1";
        public const string Коментар = "col_g6";
        public const string КодВСпеціальнійТаблиці = "col_a2";
    }

    public class Користувачі_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Користувачі_Objest() : base(Config.Kernel, "tab_a14", Користувачі_Const.TYPE,
             ["col_f6", "col_f7", "col_a1", "col_g6", "col_a2", ], true)
        {
            
                //Табличні частини
                Контакти_TablePart = new Користувачі_Контакти_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Користувачі_Const.FULLNAME + " *");
            
                await Користувачі_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_f6"].ToString() ?? "";
                Код = base.FieldValue["col_f7"].ToString() ?? "";
                ФізичнаОсоба = new Довідники.ФізичніОсоби_Pointer(base.FieldValue["col_a1"]);
                Коментар = base.FieldValue["col_g6"].ToString() ?? "";
                КодВСпеціальнійТаблиці = (base.FieldValue["col_a2"] != DBNull.Value) ? (Guid)base.FieldValue["col_a2"] : Guid.Empty;
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Контакти_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_f6"] = Назва;
            base.FieldValue["col_f7"] = Код;
            base.FieldValue["col_a1"] = ФізичнаОсоба.UnigueID.UGuid;
            base.FieldValue["col_g6"] = Коментар;
            base.FieldValue["col_a2"] = КодВСпеціальнійТаблиці;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, Коментар, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Користувачі_Objest> Copy(bool copyTableParts = false)
        {
            Користувачі_Objest copy = new Користувачі_Objest()
            {
                Назва = Назва,
                Код = Код,
                ФізичнаОсоба = ФізичнаОсоба,
                Коментар = Коментар,
                КодВСпеціальнійТаблиці = КодВСпеціальнійТаблиці,
                
            };
            
            if (copyTableParts)
            {
            
                //Контакти - Таблична частина
                await Контакти_TablePart.Read();
                copy.Контакти_TablePart.Records = Контакти_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await Користувачі_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete(["tab_a15", ]);
        }
        
        public Користувачі_Pointer GetDirectoryPointer()
        {
            return new Користувачі_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Користувачі_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.ФізичніОсоби_Pointer ФізичнаОсоба { get; set; } = new Довідники.ФізичніОсоби_Pointer();
        public string Коментар { get; set; } = "";
        public Guid КодВСпеціальнійТаблиці { get; set; } = new Guid();
        
        //Табличні частини
        public Користувачі_Контакти_TablePart Контакти_TablePart { get; private set; }
        
    }

    public class Користувачі_Pointer : DirectoryPointer
    {
        public Користувачі_Pointer(object? uid = null) : base(Config.Kernel, "tab_a14", Користувачі_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Користувачі_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a14", Користувачі_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Користувачі_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Користувачі_Objest obj = new Користувачі_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Користувачі_Pointer Copy()
        {
            return new Користувачі_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Користувачі_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Користувачі_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Користувачі_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Користувачі_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Користувачі_Pointer GetEmptyPointer()
        {
            return new Користувачі_Pointer();
        }
    }
    
    public class Користувачі_Select : DirectorySelect
    {
        public Користувачі_Select() : base(Config.Kernel, "tab_a14") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Користувачі_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Користувачі_Pointer? Current { get; private set; }
        
        public async ValueTask<Користувачі_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Користувачі_Pointer(pointer) : new Користувачі_Pointer();
        }
        
        public async ValueTask<List<Користувачі_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Користувачі_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Користувачі_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class Користувачі_Контакти_TablePart : DirectoryTablePart
    {
        public Користувачі_Контакти_TablePart(Користувачі_Objest owner) : base(Config.Kernel, "tab_a15",
             ["col_f8", "col_g5", "col_g4", "col_f9", "col_g1", "col_g2", "col_g3", ])
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_a15";
        
        public const string Тип = "col_f8";
        public const string Телефон = "col_g5";
        public const string ЕлектроннаПошта = "col_g4";
        public const string Країна = "col_f9";
        public const string Область = "col_g1";
        public const string Район = "col_g2";
        public const string Місто = "col_g3";

        public Користувачі_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Тип = (fieldValue["col_f8"] != DBNull.Value) ? (Перелічення.ТипиКонтактноїІнформації)fieldValue["col_f8"] : 0,
                    Телефон = fieldValue["col_g5"].ToString() ?? "",
                    ЕлектроннаПошта = fieldValue["col_g4"].ToString() ?? "",
                    Країна = fieldValue["col_f9"].ToString() ?? "",
                    Область = fieldValue["col_g1"].ToString() ?? "",
                    Район = fieldValue["col_g2"].ToString() ?? "",
                    Місто = fieldValue["col_g3"].ToString() ?? "",
                    
                };
                Records.Add(record);
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a14"))
                throw new Exception("Owner not exist");
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_f8", (int)record.Тип},
                    {"col_g5", record.Телефон},
                    {"col_g4", record.ЕлектроннаПошта},
                    {"col_f9", record.Країна},
                    {"col_g1", record.Область},
                    {"col_g2", record.Район},
                    {"col_g3", record.Місто},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Перелічення.ТипиКонтактноїІнформації Тип { get; set; } = 0;
            public string Телефон { get; set; } = "";
            public string ЕлектроннаПошта { get; set; } = "";
            public string Країна { get; set; } = "";
            public string Область { get; set; } = "";
            public string Район { get; set; } = "";
            public string Місто { get; set; } = "";
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "ФізичніОсоби"
    public static class ФізичніОсоби_Const
    {
        public const string TABLE = "tab_a16";
        public const string TYPE = "ФізичніОсоби"; /* Назва вказівника */
        public const string POINTER = "Довідники.ФізичніОсоби"; /* Повна назва вказівника */
        public const string FULLNAME = "Фізичні особи"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_g7", ];
        
        public const string Назва = "col_g7";
        public const string Код = "col_g8";
        public const string ДатаНародження = "col_g9";
        public const string Стать = "col_a1";
        public const string ІПН = "col_a2";
    }

    public class ФізичніОсоби_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ФізичніОсоби_Objest() : base(Config.Kernel, "tab_a16", ФізичніОсоби_Const.TYPE,
             ["col_g7", "col_g8", "col_g9", "col_a1", "col_a2", ], true)
        {
            
                //Табличні частини
                Контакти_TablePart = new ФізичніОсоби_Контакти_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ФізичніОсоби_Const.FULLNAME + " *");
            
                await ФізичніОсоби_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_g7"].ToString() ?? "";
                Код = base.FieldValue["col_g8"].ToString() ?? "";
                ДатаНародження = (base.FieldValue["col_g9"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_g9"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Стать = (base.FieldValue["col_a1"] != DBNull.Value) ? (Перелічення.СтатьФізичноїОсоби)base.FieldValue["col_a1"] : 0;
                ІПН = base.FieldValue["col_a2"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Контакти_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_g7"] = Назва;
            base.FieldValue["col_g8"] = Код;
            base.FieldValue["col_g9"] = ДатаНародження;
            base.FieldValue["col_a1"] = (int)Стать;
            base.FieldValue["col_a2"] = ІПН;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ІПН, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ФізичніОсоби_Objest> Copy(bool copyTableParts = false)
        {
            ФізичніОсоби_Objest copy = new ФізичніОсоби_Objest()
            {
                Назва = Назва,
                Код = Код,
                ДатаНародження = ДатаНародження,
                Стать = Стать,
                ІПН = ІПН,
                
            };
            
            if (copyTableParts)
            {
            
                //Контакти - Таблична частина
                await Контакти_TablePart.Read();
                copy.Контакти_TablePart.Records = Контакти_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await ФізичніОсоби_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete(["tab_a17", ]);
        }
        
        public ФізичніОсоби_Pointer GetDirectoryPointer()
        {
            return new ФізичніОсоби_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ФізичніОсоби_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public DateTime ДатаНародження { get; set; } = DateTime.MinValue;
        public Перелічення.СтатьФізичноїОсоби Стать { get; set; } = 0;
        public string ІПН { get; set; } = "";
        
        //Табличні частини
        public ФізичніОсоби_Контакти_TablePart Контакти_TablePart { get; private set; }
        
    }

    public class ФізичніОсоби_Pointer : DirectoryPointer
    {
        public ФізичніОсоби_Pointer(object? uid = null) : base(Config.Kernel, "tab_a16", ФізичніОсоби_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ФізичніОсоби_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a16", ФізичніОсоби_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ФізичніОсоби_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ФізичніОсоби_Objest obj = new ФізичніОсоби_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ФізичніОсоби_Pointer Copy()
        {
            return new ФізичніОсоби_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ФізичніОсоби_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ФізичніОсоби_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ФізичніОсоби_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ФізичніОсоби_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ФізичніОсоби_Pointer GetEmptyPointer()
        {
            return new ФізичніОсоби_Pointer();
        }
    }
    
    public class ФізичніОсоби_Select : DirectorySelect
    {
        public ФізичніОсоби_Select() : base(Config.Kernel, "tab_a16") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ФізичніОсоби_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ФізичніОсоби_Pointer? Current { get; private set; }
        
        public async ValueTask<ФізичніОсоби_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ФізичніОсоби_Pointer(pointer) : new ФізичніОсоби_Pointer();
        }
        
        public async ValueTask<List<ФізичніОсоби_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ФізичніОсоби_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ФізичніОсоби_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class ФізичніОсоби_Контакти_TablePart : DirectoryTablePart
    {
        public ФізичніОсоби_Контакти_TablePart(ФізичніОсоби_Objest owner) : base(Config.Kernel, "tab_a17",
             ["col_h1", "col_h7", "col_h6", "col_h2", "col_h3", "col_h4", "col_h5", "col_a1", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_a17";
        
        public const string Тип = "col_h1";
        public const string Телефон = "col_h7";
        public const string ЕлектроннаПошта = "col_h6";
        public const string Країна = "col_h2";
        public const string Область = "col_h3";
        public const string Район = "col_h4";
        public const string Місто = "col_h5";
        public const string Значення = "col_a1";

        public ФізичніОсоби_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Тип = (fieldValue["col_h1"] != DBNull.Value) ? (Перелічення.ТипиКонтактноїІнформації)fieldValue["col_h1"] : 0,
                    Телефон = fieldValue["col_h7"].ToString() ?? "",
                    ЕлектроннаПошта = fieldValue["col_h6"].ToString() ?? "",
                    Країна = fieldValue["col_h2"].ToString() ?? "",
                    Область = fieldValue["col_h3"].ToString() ?? "",
                    Район = fieldValue["col_h4"].ToString() ?? "",
                    Місто = fieldValue["col_h5"].ToString() ?? "",
                    Значення = fieldValue["col_a1"].ToString() ?? "",
                    
                };
                Records.Add(record);
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a16"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_h1", (int)record.Тип},
                    {"col_h7", record.Телефон},
                    {"col_h6", record.ЕлектроннаПошта},
                    {"col_h2", record.Країна},
                    {"col_h3", record.Область},
                    {"col_h4", record.Район},
                    {"col_h5", record.Місто},
                    {"col_a1", record.Значення},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Перелічення.ТипиКонтактноїІнформації Тип { get; set; } = 0;
            public string Телефон { get; set; } = "";
            public string ЕлектроннаПошта { get; set; } = "";
            public string Країна { get; set; } = "";
            public string Область { get; set; } = "";
            public string Район { get; set; } = "";
            public string Місто { get; set; } = "";
            public string Значення { get; set; } = "";
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "СтруктураПідприємства"
    public static class СтруктураПідприємства_Const
    {
        public const string TABLE = "tab_a18";
        public const string TYPE = "СтруктураПідприємства"; /* Назва вказівника */
        public const string POINTER = "Довідники.СтруктураПідприємства"; /* Повна назва вказівника */
        public const string FULLNAME = "Структура підприємства"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_h8", ];
        
        public const string Назва = "col_h8";
        public const string Код = "col_h9";
        public const string Керівник = "col_i1";
    }

    public class СтруктураПідприємства_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public СтруктураПідприємства_Objest() : base(Config.Kernel, "tab_a18", СтруктураПідприємства_Const.TYPE,
             ["col_h8", "col_h9", "col_i1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, СтруктураПідприємства_Const.FULLNAME + " *");
            
                await СтруктураПідприємства_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_h8"].ToString() ?? "";
                Код = base.FieldValue["col_h9"].ToString() ?? "";
                Керівник = new Довідники.ФізичніОсоби_Pointer(base.FieldValue["col_i1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_h8"] = Назва;
            base.FieldValue["col_h9"] = Код;
            base.FieldValue["col_i1"] = Керівник.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<СтруктураПідприємства_Objest> Copy(bool copyTableParts = false)
        {
            СтруктураПідприємства_Objest copy = new СтруктураПідприємства_Objest()
            {
                Назва = Назва,
                Код = Код,
                Керівник = Керівник,
                
            };
            

            await copy.New();
            
            await СтруктураПідприємства_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public СтруктураПідприємства_Pointer GetDirectoryPointer()
        {
            return new СтруктураПідприємства_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(СтруктураПідприємства_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.ФізичніОсоби_Pointer Керівник { get; set; } = new Довідники.ФізичніОсоби_Pointer();
        
    }

    public class СтруктураПідприємства_Pointer : DirectoryPointer
    {
        public СтруктураПідприємства_Pointer(object? uid = null) : base(Config.Kernel, "tab_a18", СтруктураПідприємства_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public СтруктураПідприємства_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a18", СтруктураПідприємства_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<СтруктураПідприємства_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            СтруктураПідприємства_Objest obj = new СтруктураПідприємства_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public СтруктураПідприємства_Pointer Copy()
        {
            return new СтруктураПідприємства_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(СтруктураПідприємства_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [СтруктураПідприємства_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{СтруктураПідприємства_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(СтруктураПідприємства_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public СтруктураПідприємства_Pointer GetEmptyPointer()
        {
            return new СтруктураПідприємства_Pointer();
        }
    }
    
    public class СтруктураПідприємства_Select : DirectorySelect
    {
        public СтруктураПідприємства_Select() : base(Config.Kernel, "tab_a18") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new СтруктураПідприємства_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public СтруктураПідприємства_Pointer? Current { get; private set; }
        
        public async ValueTask<СтруктураПідприємства_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new СтруктураПідприємства_Pointer(pointer) : new СтруктураПідприємства_Pointer();
        }
        
        public async ValueTask<List<СтруктураПідприємства_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<СтруктураПідприємства_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new СтруктураПідприємства_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "КраїниСвіту"
    public static class КраїниСвіту_Const
    {
        public const string TABLE = "tab_a19";
        public const string TYPE = "КраїниСвіту"; /* Назва вказівника */
        public const string POINTER = "Довідники.КраїниСвіту"; /* Повна назва вказівника */
        public const string FULLNAME = "Країни світу"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_i2", ];
        
        public const string Назва = "col_i2";
        public const string Код = "col_i3";
    }

    public class КраїниСвіту_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public КраїниСвіту_Objest() : base(Config.Kernel, "tab_a19", КраїниСвіту_Const.TYPE,
             ["col_i2", "col_i3", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, КраїниСвіту_Const.FULLNAME + " *");
            
                await КраїниСвіту_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_i2"].ToString() ?? "";
                Код = base.FieldValue["col_i3"].ToString() ?? "";
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_i2"] = Назва;
            base.FieldValue["col_i3"] = Код;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<КраїниСвіту_Objest> Copy(bool copyTableParts = false)
        {
            КраїниСвіту_Objest copy = new КраїниСвіту_Objest()
            {
                Назва = Назва,
                Код = Код,
                
            };
            

            await copy.New();
            
            await КраїниСвіту_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public КраїниСвіту_Pointer GetDirectoryPointer()
        {
            return new КраїниСвіту_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(КраїниСвіту_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        
    }

    public class КраїниСвіту_Pointer : DirectoryPointer
    {
        public КраїниСвіту_Pointer(object? uid = null) : base(Config.Kernel, "tab_a19", КраїниСвіту_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public КраїниСвіту_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a19", КраїниСвіту_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<КраїниСвіту_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            КраїниСвіту_Objest obj = new КраїниСвіту_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public КраїниСвіту_Pointer Copy()
        {
            return new КраїниСвіту_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(КраїниСвіту_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [КраїниСвіту_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{КраїниСвіту_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(КраїниСвіту_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public КраїниСвіту_Pointer GetEmptyPointer()
        {
            return new КраїниСвіту_Pointer();
        }
    }
    
    public class КраїниСвіту_Select : DirectorySelect
    {
        public КраїниСвіту_Select() : base(Config.Kernel, "tab_a19") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new КраїниСвіту_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public КраїниСвіту_Pointer? Current { get; private set; }
        
        public async ValueTask<КраїниСвіту_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new КраїниСвіту_Pointer(pointer) : new КраїниСвіту_Pointer();
        }
        
        public async ValueTask<List<КраїниСвіту_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<КраїниСвіту_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new КраїниСвіту_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "Файли"
    public static class Файли_Const
    {
        public const string TABLE = "tab_a20";
        public const string TYPE = "Файли"; /* Назва вказівника */
        public const string POINTER = "Довідники.Файли"; /* Повна назва вказівника */
        public const string FULLNAME = "Файли"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_i5", ];
        
        public const string Код = "col_i6";
        public const string Назва = "col_i5";
        public const string НазваФайлу = "col_a2";
        public const string БінарніДані = "col_a1";
        public const string Розмір = "col_a3";
        public const string ДатаСтворення = "col_a4";
    }

    public class Файли_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Файли_Objest() : base(Config.Kernel, "tab_a20", Файли_Const.TYPE,
             ["col_i6", "col_i5", "col_a2", "col_a1", "col_a3", "col_a4", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Файли_Const.FULLNAME + " *");
            
                await Файли_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Код = base.FieldValue["col_i6"].ToString() ?? "";
                Назва = base.FieldValue["col_i5"].ToString() ?? "";
                НазваФайлу = base.FieldValue["col_a2"].ToString() ?? "";
                БінарніДані = (base.FieldValue["col_a1"] != DBNull.Value) ? (byte[])base.FieldValue["col_a1"] : [];
                Розмір = base.FieldValue["col_a3"].ToString() ?? "";
                ДатаСтворення = (base.FieldValue["col_a4"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a4"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_i6"] = Код;
            base.FieldValue["col_i5"] = Назва;
            base.FieldValue["col_a2"] = НазваФайлу;
            base.FieldValue["col_a1"] = БінарніДані;
            base.FieldValue["col_a3"] = Розмір;
            base.FieldValue["col_a4"] = ДатаСтворення;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НазваФайлу, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Файли_Objest> Copy(bool copyTableParts = false)
        {
            Файли_Objest copy = new Файли_Objest()
            {
                Код = Код,
                Назва = Назва,
                НазваФайлу = НазваФайлу,
                БінарніДані = БінарніДані,
                Розмір = Розмір,
                ДатаСтворення = ДатаСтворення,
                
            };
            

            await copy.New();
            
            await Файли_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public Файли_Pointer GetDirectoryPointer()
        {
            return new Файли_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Файли_Const.PRESENTATION_FIELDS);
        }
                
        public string Код { get; set; } = "";
        public string Назва { get; set; } = "";
        public string НазваФайлу { get; set; } = "";
        public byte[] БінарніДані { get; set; } = [];
        public string Розмір { get; set; } = "";
        public DateTime ДатаСтворення { get; set; } = DateTime.MinValue;
        
    }

    public class Файли_Pointer : DirectoryPointer
    {
        public Файли_Pointer(object? uid = null) : base(Config.Kernel, "tab_a20", Файли_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Файли_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a20", Файли_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Файли_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Файли_Objest obj = new Файли_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Файли_Pointer Copy()
        {
            return new Файли_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Файли_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Файли_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Файли_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Файли_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Файли_Pointer GetEmptyPointer()
        {
            return new Файли_Pointer();
        }
    }
    
    public class Файли_Select : DirectorySelect
    {
        public Файли_Select() : base(Config.Kernel, "tab_a20") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Файли_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Файли_Pointer? Current { get; private set; }
        
        public async ValueTask<Файли_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Файли_Pointer(pointer) : new Файли_Pointer();
        }
        
        public async ValueTask<List<Файли_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Файли_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Файли_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ХарактеристикиНоменклатури"
    public static class ХарактеристикиНоменклатури_Const
    {
        public const string TABLE = "tab_a21";
        public const string TYPE = "ХарактеристикиНоменклатури"; /* Назва вказівника */
        public const string POINTER = "Довідники.ХарактеристикиНоменклатури"; /* Повна назва вказівника */
        public const string FULLNAME = "Характеристики"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_i7", ];
        
        public const string Назва = "col_i7";
        public const string Код = "col_i8";
        public const string НазваПовна = "col_i9";
        public const string Номенклатура = "col_a1";
    }

    public class ХарактеристикиНоменклатури_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ХарактеристикиНоменклатури_Objest() : base(Config.Kernel, "tab_a21", ХарактеристикиНоменклатури_Const.TYPE,
             ["col_i7", "col_i8", "col_i9", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ХарактеристикиНоменклатури_Const.FULLNAME + " *");
            
                await ХарактеристикиНоменклатури_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_i7"].ToString() ?? "";
                Код = base.FieldValue["col_i8"].ToString() ?? "";
                НазваПовна = base.FieldValue["col_i9"].ToString() ?? "";
                Номенклатура = new Довідники.Номенклатура_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_i7"] = Назва;
            base.FieldValue["col_i8"] = Код;
            base.FieldValue["col_i9"] = НазваПовна;
            base.FieldValue["col_a1"] = Номенклатура.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НазваПовна, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ХарактеристикиНоменклатури_Objest> Copy(bool copyTableParts = false)
        {
            ХарактеристикиНоменклатури_Objest copy = new ХарактеристикиНоменклатури_Objest()
            {
                Назва = Назва,
                Код = Код,
                НазваПовна = НазваПовна,
                Номенклатура = Номенклатура,
                
            };
            

            await copy.New();
            
            await ХарактеристикиНоменклатури_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ХарактеристикиНоменклатури_Pointer GetDirectoryPointer()
        {
            return new ХарактеристикиНоменклатури_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ХарактеристикиНоменклатури_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string НазваПовна { get; set; } = "";
        public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
        
    }

    public class ХарактеристикиНоменклатури_Pointer : DirectoryPointer
    {
        public ХарактеристикиНоменклатури_Pointer(object? uid = null) : base(Config.Kernel, "tab_a21", ХарактеристикиНоменклатури_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ХарактеристикиНоменклатури_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a21", ХарактеристикиНоменклатури_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ХарактеристикиНоменклатури_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ХарактеристикиНоменклатури_Objest obj = new ХарактеристикиНоменклатури_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ХарактеристикиНоменклатури_Pointer Copy()
        {
            return new ХарактеристикиНоменклатури_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ХарактеристикиНоменклатури_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ХарактеристикиНоменклатури_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ХарактеристикиНоменклатури_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ХарактеристикиНоменклатури_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ХарактеристикиНоменклатури_Pointer GetEmptyPointer()
        {
            return new ХарактеристикиНоменклатури_Pointer();
        }
    }
    
    public class ХарактеристикиНоменклатури_Select : DirectorySelect
    {
        public ХарактеристикиНоменклатури_Select() : base(Config.Kernel, "tab_a21") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ХарактеристикиНоменклатури_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ХарактеристикиНоменклатури_Pointer? Current { get; private set; }
        
        public async ValueTask<ХарактеристикиНоменклатури_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ХарактеристикиНоменклатури_Pointer(pointer) : new ХарактеристикиНоменклатури_Pointer();
        }
        
        public async ValueTask<List<ХарактеристикиНоменклатури_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ХарактеристикиНоменклатури_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ХарактеристикиНоменклатури_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "Номенклатура_Папки"
    public static class Номенклатура_Папки_Const
    {
        public const string TABLE = "tab_a22";
        public const string TYPE = "Номенклатура_Папки"; /* Назва вказівника */
        public const string POINTER = "Довідники.Номенклатура_Папки"; /* Повна назва вказівника */
        public const string FULLNAME = "Номенклатура папки"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_j1", ];
        
        public const string Назва = "col_j1";
        public const string Код = "col_j2";
        public const string Родич = "col_j3";
    }

    public class Номенклатура_Папки_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Номенклатура_Папки_Objest() : base(Config.Kernel, "tab_a22", Номенклатура_Папки_Const.TYPE,
             ["col_j1", "col_j2", "col_j3", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Номенклатура_Папки_Const.FULLNAME + " *");
            
                await Номенклатура_Папки_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_j1"].ToString() ?? "";
                Код = base.FieldValue["col_j2"].ToString() ?? "";
                Родич = new Довідники.Номенклатура_Папки_Pointer(base.FieldValue["col_j3"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_j1"] = Назва;
            base.FieldValue["col_j2"] = Код;
            base.FieldValue["col_j3"] = Родич.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Номенклатура_Папки_Objest> Copy(bool copyTableParts = false)
        {
            Номенклатура_Папки_Objest copy = new Номенклатура_Папки_Objest()
            {
                Назва = Назва,
                Код = Код,
                Родич = Родич,
                
            };
            

            await copy.New();
            
            await Номенклатура_Папки_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await Номенклатура_Папки_Triggers.SetDeletionLabel(this, label);      
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
                await Номенклатура_Папки_Triggers.BeforeDelete(this);      
            
            await base.BaseDelete([]);
        }
        
        public Номенклатура_Папки_Pointer GetDirectoryPointer()
        {
            return new Номенклатура_Папки_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Номенклатура_Папки_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.Номенклатура_Папки_Pointer Родич { get; set; } = new Довідники.Номенклатура_Папки_Pointer();
        
    }

    public class Номенклатура_Папки_Pointer : DirectoryPointer
    {
        public Номенклатура_Папки_Pointer(object? uid = null) : base(Config.Kernel, "tab_a22", Номенклатура_Папки_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Номенклатура_Папки_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a22", Номенклатура_Папки_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Номенклатура_Папки_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Номенклатура_Папки_Objest obj = new Номенклатура_Папки_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Номенклатура_Папки_Pointer Copy()
        {
            return new Номенклатура_Папки_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Номенклатура_Папки_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Номенклатура_Папки_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Номенклатура_Папки_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Номенклатура_Папки_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            Номенклатура_Папки_Objest? obj = await GetDirectoryObject();
              if (obj != null) await Номенклатура_Папки_Triggers.SetDeletionLabel(obj, label);
            
            await base.BaseDeletionLabel(label);
        }
		
        public Номенклатура_Папки_Pointer GetEmptyPointer()
        {
            return new Номенклатура_Папки_Pointer();
        }
    }
    
    public class Номенклатура_Папки_Select : DirectorySelect
    {
        public Номенклатура_Папки_Select() : base(Config.Kernel, "tab_a22") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Номенклатура_Папки_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Номенклатура_Папки_Pointer? Current { get; private set; }
        
        public async ValueTask<Номенклатура_Папки_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Номенклатура_Папки_Pointer(pointer) : new Номенклатура_Папки_Pointer();
        }
        
        public async ValueTask<List<Номенклатура_Папки_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Номенклатура_Папки_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Номенклатура_Папки_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    public class Номенклатура_Папки_SelectHierarchical : DirectorySelectHierarchical
    {
        public Номенклатура_Папки_SelectHierarchical() : base(Config.Kernel, "tab_a22", "col_j3") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = Parent = null; Level = 0; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPositionHierarchical.HasValue) { 
          Current = new Номенклатура_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.UnigueID, base.CurrentPointerPositionHierarchical.Value.Fields); 
          Parent = new Номенклатура_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.Parent); 
          Level = base.CurrentPointerPositionHierarchical.Value.Level; return true; } else { Current = Parent = null; Level = 0; return false; } }
        public Номенклатура_Папки_Pointer? Current { get; private set; }
        public Номенклатура_Папки_Pointer? Parent { get; private set; }
        public int Level { get; private set; } = 0;
    }
    
   
    #endregion
    
    #region DIRECTORY "Контрагенти_Папки"
    public static class Контрагенти_Папки_Const
    {
        public const string TABLE = "tab_a23";
        public const string TYPE = "Контрагенти_Папки"; /* Назва вказівника */
        public const string POINTER = "Довідники.Контрагенти_Папки"; /* Повна назва вказівника */
        public const string FULLNAME = "Контрагенти папки"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_j4", ];
        
        public const string Назва = "col_j4";
        public const string Код = "col_j5";
        public const string Родич = "col_j6";
    }

    public class Контрагенти_Папки_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Контрагенти_Папки_Objest() : base(Config.Kernel, "tab_a23", Контрагенти_Папки_Const.TYPE,
             ["col_j4", "col_j5", "col_j6", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Контрагенти_Папки_Const.FULLNAME + " *");
            
                await Контрагенти_Папки_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_j4"].ToString() ?? "";
                Код = base.FieldValue["col_j5"].ToString() ?? "";
                Родич = new Довідники.Контрагенти_Папки_Pointer(base.FieldValue["col_j6"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_j4"] = Назва;
            base.FieldValue["col_j5"] = Код;
            base.FieldValue["col_j6"] = Родич.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Контрагенти_Папки_Objest> Copy(bool copyTableParts = false)
        {
            Контрагенти_Папки_Objest copy = new Контрагенти_Папки_Objest()
            {
                Назва = Назва,
                Код = Код,
                Родич = Родич,
                
            };
            

            await copy.New();
            
            await Контрагенти_Папки_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await Контрагенти_Папки_Triggers.SetDeletionLabel(this, label);      
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
                await Контрагенти_Папки_Triggers.BeforeDelete(this);      
            
            await base.BaseDelete([]);
        }
        
        public Контрагенти_Папки_Pointer GetDirectoryPointer()
        {
            return new Контрагенти_Папки_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Контрагенти_Папки_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.Контрагенти_Папки_Pointer Родич { get; set; } = new Довідники.Контрагенти_Папки_Pointer();
        
    }

    public class Контрагенти_Папки_Pointer : DirectoryPointer
    {
        public Контрагенти_Папки_Pointer(object? uid = null) : base(Config.Kernel, "tab_a23", Контрагенти_Папки_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Контрагенти_Папки_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a23", Контрагенти_Папки_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Контрагенти_Папки_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Контрагенти_Папки_Objest obj = new Контрагенти_Папки_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Контрагенти_Папки_Pointer Copy()
        {
            return new Контрагенти_Папки_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Контрагенти_Папки_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Контрагенти_Папки_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Контрагенти_Папки_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Контрагенти_Папки_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            Контрагенти_Папки_Objest? obj = await GetDirectoryObject();
              if (obj != null) await Контрагенти_Папки_Triggers.SetDeletionLabel(obj, label);
            
            await base.BaseDeletionLabel(label);
        }
		
        public Контрагенти_Папки_Pointer GetEmptyPointer()
        {
            return new Контрагенти_Папки_Pointer();
        }
    }
    
    public class Контрагенти_Папки_Select : DirectorySelect
    {
        public Контрагенти_Папки_Select() : base(Config.Kernel, "tab_a23") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Контрагенти_Папки_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Контрагенти_Папки_Pointer? Current { get; private set; }
        
        public async ValueTask<Контрагенти_Папки_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Контрагенти_Папки_Pointer(pointer) : new Контрагенти_Папки_Pointer();
        }
        
        public async ValueTask<List<Контрагенти_Папки_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Контрагенти_Папки_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Контрагенти_Папки_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    public class Контрагенти_Папки_SelectHierarchical : DirectorySelectHierarchical
    {
        public Контрагенти_Папки_SelectHierarchical() : base(Config.Kernel, "tab_a23", "col_j6") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = Parent = null; Level = 0; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPositionHierarchical.HasValue) { 
          Current = new Контрагенти_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.UnigueID, base.CurrentPointerPositionHierarchical.Value.Fields); 
          Parent = new Контрагенти_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.Parent); 
          Level = base.CurrentPointerPositionHierarchical.Value.Level; return true; } else { Current = Parent = null; Level = 0; return false; } }
        public Контрагенти_Папки_Pointer? Current { get; private set; }
        public Контрагенти_Папки_Pointer? Parent { get; private set; }
        public int Level { get; private set; } = 0;
    }
    
   
    #endregion
    
    #region DIRECTORY "Склади_Папки"
    public static class Склади_Папки_Const
    {
        public const string TABLE = "tab_a24";
        public const string TYPE = "Склади_Папки"; /* Назва вказівника */
        public const string POINTER = "Довідники.Склади_Папки"; /* Повна назва вказівника */
        public const string FULLNAME = "Склади папки"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_j7", ];
        
        public const string Назва = "col_j7";
        public const string Код = "col_j8";
        public const string Родич = "col_a1";
    }

    public class Склади_Папки_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Склади_Папки_Objest() : base(Config.Kernel, "tab_a24", Склади_Папки_Const.TYPE,
             ["col_j7", "col_j8", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Склади_Папки_Const.FULLNAME + " *");
            
                await Склади_Папки_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_j7"].ToString() ?? "";
                Код = base.FieldValue["col_j8"].ToString() ?? "";
                Родич = new Довідники.Склади_Папки_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_j7"] = Назва;
            base.FieldValue["col_j8"] = Код;
            base.FieldValue["col_a1"] = Родич.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Склади_Папки_Objest> Copy(bool copyTableParts = false)
        {
            Склади_Папки_Objest copy = new Склади_Папки_Objest()
            {
                Назва = Назва,
                Код = Код,
                Родич = Родич,
                
            };
            

            await copy.New();
            
            await Склади_Папки_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await Склади_Папки_Triggers.SetDeletionLabel(this, label);      
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
                await Склади_Папки_Triggers.BeforeDelete(this);      
            
            await base.BaseDelete([]);
        }
        
        public Склади_Папки_Pointer GetDirectoryPointer()
        {
            return new Склади_Папки_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Склади_Папки_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.Склади_Папки_Pointer Родич { get; set; } = new Довідники.Склади_Папки_Pointer();
        
    }

    public class Склади_Папки_Pointer : DirectoryPointer
    {
        public Склади_Папки_Pointer(object? uid = null) : base(Config.Kernel, "tab_a24", Склади_Папки_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Склади_Папки_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a24", Склади_Папки_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Склади_Папки_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Склади_Папки_Objest obj = new Склади_Папки_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Склади_Папки_Pointer Copy()
        {
            return new Склади_Папки_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Склади_Папки_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Склади_Папки_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Склади_Папки_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Склади_Папки_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            Склади_Папки_Objest? obj = await GetDirectoryObject();
              if (obj != null) await Склади_Папки_Triggers.SetDeletionLabel(obj, label);
            
            await base.BaseDeletionLabel(label);
        }
		
        public Склади_Папки_Pointer GetEmptyPointer()
        {
            return new Склади_Папки_Pointer();
        }
    }
    
    public class Склади_Папки_Select : DirectorySelect
    {
        public Склади_Папки_Select() : base(Config.Kernel, "tab_a24") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Склади_Папки_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Склади_Папки_Pointer? Current { get; private set; }
        
        public async ValueTask<Склади_Папки_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Склади_Папки_Pointer(pointer) : new Склади_Папки_Pointer();
        }
        
        public async ValueTask<List<Склади_Папки_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Склади_Папки_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Склади_Папки_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    public class Склади_Папки_SelectHierarchical : DirectorySelectHierarchical
    {
        public Склади_Папки_SelectHierarchical() : base(Config.Kernel, "tab_a24", "col_a1") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = Parent = null; Level = 0; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPositionHierarchical.HasValue) { 
          Current = new Склади_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.UnigueID, base.CurrentPointerPositionHierarchical.Value.Fields); 
          Parent = new Склади_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.Parent); 
          Level = base.CurrentPointerPositionHierarchical.Value.Level; return true; } else { Current = Parent = null; Level = 0; return false; } }
        public Склади_Папки_Pointer? Current { get; private set; }
        public Склади_Папки_Pointer? Parent { get; private set; }
        public int Level { get; private set; } = 0;
    }
    
   
    #endregion
    
    #region DIRECTORY "Каси"
    public static class Каси_Const
    {
        public const string TABLE = "tab_a26";
        public const string TYPE = "Каси"; /* Назва вказівника */
        public const string POINTER = "Довідники.Каси"; /* Повна назва вказівника */
        public const string FULLNAME = "Каси"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_k8", ];
        
        public const string Назва = "col_k8";
        public const string Код = "col_k9";
        public const string Валюта = "col_a2";
        public const string Підрозділ = "col_a1";
    }

    public class Каси_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Каси_Objest() : base(Config.Kernel, "tab_a26", Каси_Const.TYPE,
             ["col_k8", "col_k9", "col_a2", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Каси_Const.FULLNAME + " *");
            
                await Каси_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_k8"].ToString() ?? "";
                Код = base.FieldValue["col_k9"].ToString() ?? "";
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a2"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_k8"] = Назва;
            base.FieldValue["col_k9"] = Код;
            base.FieldValue["col_a2"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a1"] = Підрозділ.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Каси_Objest> Copy(bool copyTableParts = false)
        {
            Каси_Objest copy = new Каси_Objest()
            {
                Назва = Назва,
                Код = Код,
                Валюта = Валюта,
                Підрозділ = Підрозділ,
                
            };
            

            await copy.New();
            
            await Каси_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public Каси_Pointer GetDirectoryPointer()
        {
            return new Каси_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Каси_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        
    }

    public class Каси_Pointer : DirectoryPointer
    {
        public Каси_Pointer(object? uid = null) : base(Config.Kernel, "tab_a26", Каси_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Каси_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a26", Каси_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Каси_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Каси_Objest obj = new Каси_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Каси_Pointer Copy()
        {
            return new Каси_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Каси_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Каси_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Каси_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Каси_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Каси_Pointer GetEmptyPointer()
        {
            return new Каси_Pointer();
        }
    }
    
    public class Каси_Select : DirectorySelect
    {
        public Каси_Select() : base(Config.Kernel, "tab_a26") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Каси_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Каси_Pointer? Current { get; private set; }
        
        public async ValueTask<Каси_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Каси_Pointer(pointer) : new Каси_Pointer();
        }
        
        public async ValueTask<List<Каси_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Каси_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Каси_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "БанківськіРахункиОрганізацій"
    public static class БанківськіРахункиОрганізацій_Const
    {
        public const string TABLE = "tab_a27";
        public const string TYPE = "БанківськіРахункиОрганізацій"; /* Назва вказівника */
        public const string POINTER = "Довідники.БанківськіРахункиОрганізацій"; /* Повна назва вказівника */
        public const string FULLNAME = "Банківські рахунки"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_l1", ];
        
        public const string Назва = "col_l1";
        public const string Код = "col_l2";
        public const string Валюта = "col_l3";
        public const string Банк = "col_l4";
        public const string Підрозділ = "col_l5";
        public const string НомерРахунку = "col_l7";
        public const string Організація = "col_a1";
    }

    public class БанківськіРахункиОрганізацій_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public БанківськіРахункиОрганізацій_Objest() : base(Config.Kernel, "tab_a27", БанківськіРахункиОрганізацій_Const.TYPE,
             ["col_l1", "col_l2", "col_l3", "col_l4", "col_l5", "col_l7", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, БанківськіРахункиОрганізацій_Const.FULLNAME + " *");
            
                await БанківськіРахункиОрганізацій_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_l1"].ToString() ?? "";
                Код = base.FieldValue["col_l2"].ToString() ?? "";
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_l3"]);
                Банк = new Довідники.Банки_Pointer(base.FieldValue["col_l4"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_l5"]);
                НомерРахунку = base.FieldValue["col_l7"].ToString() ?? "";
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_l1"] = Назва;
            base.FieldValue["col_l2"] = Код;
            base.FieldValue["col_l3"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_l4"] = Банк.UnigueID.UGuid;
            base.FieldValue["col_l5"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_l7"] = НомерРахунку;
            base.FieldValue["col_a1"] = Організація.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерРахунку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<БанківськіРахункиОрганізацій_Objest> Copy(bool copyTableParts = false)
        {
            БанківськіРахункиОрганізацій_Objest copy = new БанківськіРахункиОрганізацій_Objest()
            {
                Назва = Назва,
                Код = Код,
                Валюта = Валюта,
                Банк = Банк,
                Підрозділ = Підрозділ,
                НомерРахунку = НомерРахунку,
                Організація = Організація,
                
            };
            

            await copy.New();
            
            await БанківськіРахункиОрганізацій_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public БанківськіРахункиОрганізацій_Pointer GetDirectoryPointer()
        {
            return new БанківськіРахункиОрганізацій_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(БанківськіРахункиОрганізацій_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.Банки_Pointer Банк { get; set; } = new Довідники.Банки_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public string НомерРахунку { get; set; } = "";
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        
    }

    public class БанківськіРахункиОрганізацій_Pointer : DirectoryPointer
    {
        public БанківськіРахункиОрганізацій_Pointer(object? uid = null) : base(Config.Kernel, "tab_a27", БанківськіРахункиОрганізацій_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public БанківськіРахункиОрганізацій_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a27", БанківськіРахункиОрганізацій_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<БанківськіРахункиОрганізацій_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            БанківськіРахункиОрганізацій_Objest obj = new БанківськіРахункиОрганізацій_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public БанківськіРахункиОрганізацій_Pointer Copy()
        {
            return new БанківськіРахункиОрганізацій_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(БанківськіРахункиОрганізацій_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [БанківськіРахункиОрганізацій_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{БанківськіРахункиОрганізацій_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(БанківськіРахункиОрганізацій_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public БанківськіРахункиОрганізацій_Pointer GetEmptyPointer()
        {
            return new БанківськіРахункиОрганізацій_Pointer();
        }
    }
    
    public class БанківськіРахункиОрганізацій_Select : DirectorySelect
    {
        public БанківськіРахункиОрганізацій_Select() : base(Config.Kernel, "tab_a27") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new БанківськіРахункиОрганізацій_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public БанківськіРахункиОрганізацій_Pointer? Current { get; private set; }
        
        public async ValueTask<БанківськіРахункиОрганізацій_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new БанківськіРахункиОрганізацій_Pointer(pointer) : new БанківськіРахункиОрганізацій_Pointer();
        }
        
        public async ValueTask<List<БанківськіРахункиОрганізацій_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<БанківськіРахункиОрганізацій_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new БанківськіРахункиОрганізацій_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ДоговориКонтрагентів"
    public static class ДоговориКонтрагентів_Const
    {
        public const string TABLE = "tab_a28";
        public const string TYPE = "ДоговориКонтрагентів"; /* Назва вказівника */
        public const string POINTER = "Довідники.ДоговориКонтрагентів"; /* Повна назва вказівника */
        public const string FULLNAME = "Договори"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_n4", "col_b8", ];
        
        public const string Назва = "col_n4";
        public const string Код = "col_n5";
        public const string БанківськийРахунок = "col_n6";
        public const string БанківськийРахунокКонтрагента = "col_a1";
        public const string ВалютаВзаєморозрахунків = "col_a2";
        public const string ДатаПочаткуДії = "col_a4";
        public const string ДатаЗакінченняДії = "col_a5";
        public const string Організація = "col_a6";
        public const string Контрагент = "col_a7";
        public const string Дата = "col_a8";
        public const string Номер = "col_a9";
        public const string Підрозділ = "col_b1";
        public const string Узгоджений = "col_b2";
        public const string Статус = "col_b3";
        public const string ГосподарськаОперація = "col_b4";
        public const string ТипДоговору = "col_b5";
        public const string ТипДоговоруПредставлення = "col_b8";
        public const string ДопустимаСумаЗаборгованості = "col_b6";
        public const string Сума = "col_b7";
        public const string Коментар = "col_a3";
    }

    public class ДоговориКонтрагентів_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ДоговориКонтрагентів_Objest() : base(Config.Kernel, "tab_a28", ДоговориКонтрагентів_Const.TYPE,
             ["col_n4", "col_n5", "col_n6", "col_a1", "col_a2", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", "col_b3", "col_b4", "col_b5", "col_b8", "col_b6", "col_b7", "col_a3", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ДоговориКонтрагентів_Const.FULLNAME + " *");
            
                await ДоговориКонтрагентів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_n4"].ToString() ?? "";
                Код = base.FieldValue["col_n5"].ToString() ?? "";
                БанківськийРахунок = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_n6"]);
                БанківськийРахунокКонтрагента = new Довідники.БанківськіРахункиКонтрагентів_Pointer(base.FieldValue["col_a1"]);
                ВалютаВзаєморозрахунків = new Довідники.Валюти_Pointer(base.FieldValue["col_a2"]);
                ДатаПочаткуДії = (base.FieldValue["col_a4"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a4"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                ДатаЗакінченняДії = (base.FieldValue["col_a5"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a5"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a6"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_a7"]);
                Дата = (base.FieldValue["col_a8"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a8"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Номер = base.FieldValue["col_a9"].ToString() ?? "";
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_b1"]);
                Узгоджений = (base.FieldValue["col_b2"] != DBNull.Value) ? (bool)base.FieldValue["col_b2"] : false;
                Статус = (base.FieldValue["col_b3"] != DBNull.Value) ? (Перелічення.СтатусиДоговорівКонтрагентів)base.FieldValue["col_b3"] : 0;
                ГосподарськаОперація = (base.FieldValue["col_b4"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_b4"] : 0;
                ТипДоговору = (base.FieldValue["col_b5"] != DBNull.Value) ? (Перелічення.ТипДоговорів)base.FieldValue["col_b5"] : 0;
                ТипДоговоруПредставлення = base.FieldValue["col_b8"].ToString() ?? "";
                ДопустимаСумаЗаборгованості = (base.FieldValue["col_b6"] != DBNull.Value) ? (decimal)base.FieldValue["col_b6"] : 0;
                Сума = (base.FieldValue["col_b7"] != DBNull.Value) ? (decimal)base.FieldValue["col_b7"] : 0;
                Коментар = base.FieldValue["col_a3"].ToString() ?? "";
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ТипДоговоруПредставлення, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ДоговориКонтрагентів_Triggers.BeforeSave(this);
            base.FieldValue["col_n4"] = Назва;
            base.FieldValue["col_n5"] = Код;
            base.FieldValue["col_n6"] = БанківськийРахунок.UnigueID.UGuid;
            base.FieldValue["col_a1"] = БанківськийРахунокКонтрагента.UnigueID.UGuid;
            base.FieldValue["col_a2"] = ВалютаВзаєморозрахунків.UnigueID.UGuid;
            base.FieldValue["col_a4"] = ДатаПочаткуДії;
            base.FieldValue["col_a5"] = ДатаЗакінченняДії;
            base.FieldValue["col_a6"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a7"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_a8"] = Дата;
            base.FieldValue["col_a9"] = Номер;
            base.FieldValue["col_b1"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_b2"] = Узгоджений;
            base.FieldValue["col_b3"] = (int)Статус;
            base.FieldValue["col_b4"] = (int)ГосподарськаОперація;
            base.FieldValue["col_b5"] = (int)ТипДоговору;
            base.FieldValue["col_b8"] = ТипДоговоруПредставлення;
            base.FieldValue["col_b6"] = ДопустимаСумаЗаборгованості;
            base.FieldValue["col_b7"] = Сума;
            base.FieldValue["col_a3"] = Коментар;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, Коментар, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ТипДоговоруПредставлення, ]));
            return result;
        }

        public async ValueTask<ДоговориКонтрагентів_Objest> Copy(bool copyTableParts = false)
        {
            ДоговориКонтрагентів_Objest copy = new ДоговориКонтрагентів_Objest()
            {
                Назва = Назва,
                Код = Код,
                БанківськийРахунок = БанківськийРахунок,
                БанківськийРахунокКонтрагента = БанківськийРахунокКонтрагента,
                ВалютаВзаєморозрахунків = ВалютаВзаєморозрахунків,
                ДатаПочаткуДії = ДатаПочаткуДії,
                ДатаЗакінченняДії = ДатаЗакінченняДії,
                Організація = Організація,
                Контрагент = Контрагент,
                Дата = Дата,
                Номер = Номер,
                Підрозділ = Підрозділ,
                Узгоджений = Узгоджений,
                Статус = Статус,
                ГосподарськаОперація = ГосподарськаОперація,
                ТипДоговору = ТипДоговору,
                ТипДоговоруПредставлення = ТипДоговоруПредставлення,
                ДопустимаСумаЗаборгованості = ДопустимаСумаЗаборгованості,
                Сума = Сума,
                Коментар = Коментар,
                
            };
            

            await copy.New();
            
            await ДоговориКонтрагентів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ДоговориКонтрагентів_Pointer GetDirectoryPointer()
        {
            return new ДоговориКонтрагентів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ДоговориКонтрагентів_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунок { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.БанківськіРахункиКонтрагентів_Pointer БанківськийРахунокКонтрагента { get; set; } = new Довідники.БанківськіРахункиКонтрагентів_Pointer();
        public Довідники.Валюти_Pointer ВалютаВзаєморозрахунків { get; set; } = new Довідники.Валюти_Pointer();
        public DateTime ДатаПочаткуДії { get; set; } = DateTime.MinValue;
        public DateTime ДатаЗакінченняДії { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public DateTime Дата { get; set; } = DateTime.MinValue;
        public string Номер { get; set; } = "";
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public bool Узгоджений { get; set; } = false;
        public Перелічення.СтатусиДоговорівКонтрагентів Статус { get; set; } = 0;
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Перелічення.ТипДоговорів ТипДоговору { get; set; } = 0;
        public string ТипДоговоруПредставлення { get; set; } = "";
        public decimal ДопустимаСумаЗаборгованості { get; set; } = 0;
        public decimal Сума { get; set; } = 0;
        public string Коментар { get; set; } = "";
        
    }

    public class ДоговориКонтрагентів_Pointer : DirectoryPointer
    {
        public ДоговориКонтрагентів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a28", ДоговориКонтрагентів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ДоговориКонтрагентів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a28", ДоговориКонтрагентів_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ДоговориКонтрагентів_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ДоговориКонтрагентів_Objest obj = new ДоговориКонтрагентів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ДоговориКонтрагентів_Pointer Copy()
        {
            return new ДоговориКонтрагентів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ДоговориКонтрагентів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ДоговориКонтрагентів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ДоговориКонтрагентів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ДоговориКонтрагентів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ДоговориКонтрагентів_Pointer GetEmptyPointer()
        {
            return new ДоговориКонтрагентів_Pointer();
        }
    }
    
    public class ДоговориКонтрагентів_Select : DirectorySelect
    {
        public ДоговориКонтрагентів_Select() : base(Config.Kernel, "tab_a28") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ДоговориКонтрагентів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ДоговориКонтрагентів_Pointer? Current { get; private set; }
        
        public async ValueTask<ДоговориКонтрагентів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ДоговориКонтрагентів_Pointer(pointer) : new ДоговориКонтрагентів_Pointer();
        }
        
        public async ValueTask<List<ДоговориКонтрагентів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ДоговориКонтрагентів_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ДоговориКонтрагентів_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "БанківськіРахункиКонтрагентів"
    public static class БанківськіРахункиКонтрагентів_Const
    {
        public const string TABLE = "tab_a29";
        public const string TYPE = "БанківськіРахункиКонтрагентів"; /* Назва вказівника */
        public const string POINTER = "Довідники.БанківськіРахункиКонтрагентів"; /* Повна назва вказівника */
        public const string FULLNAME = "Банківські рахунки контрагентів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_n7", ];
        
        public const string Назва = "col_n7";
        public const string Код = "col_n8";
        public const string НомерРахунку = "col_n9";
        public const string Банк = "col_m1";
        public const string Валюта = "col_m5";
        public const string Контрагент = "col_o3";
    }

    public class БанківськіРахункиКонтрагентів_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public БанківськіРахункиКонтрагентів_Objest() : base(Config.Kernel, "tab_a29", БанківськіРахункиКонтрагентів_Const.TYPE,
             ["col_n7", "col_n8", "col_n9", "col_m1", "col_m5", "col_o3", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, БанківськіРахункиКонтрагентів_Const.FULLNAME + " *");
            
                await БанківськіРахункиКонтрагентів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_n7"].ToString() ?? "";
                Код = base.FieldValue["col_n8"].ToString() ?? "";
                НомерРахунку = base.FieldValue["col_n9"].ToString() ?? "";
                Банк = new Довідники.Банки_Pointer(base.FieldValue["col_m1"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_m5"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_o3"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_n7"] = Назва;
            base.FieldValue["col_n8"] = Код;
            base.FieldValue["col_n9"] = НомерРахунку;
            base.FieldValue["col_m1"] = Банк.UnigueID.UGuid;
            base.FieldValue["col_m5"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_o3"] = Контрагент.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<БанківськіРахункиКонтрагентів_Objest> Copy(bool copyTableParts = false)
        {
            БанківськіРахункиКонтрагентів_Objest copy = new БанківськіРахункиКонтрагентів_Objest()
            {
                Назва = Назва,
                Код = Код,
                НомерРахунку = НомерРахунку,
                Банк = Банк,
                Валюта = Валюта,
                Контрагент = Контрагент,
                
            };
            

            await copy.New();
            
            await БанківськіРахункиКонтрагентів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public БанківськіРахункиКонтрагентів_Pointer GetDirectoryPointer()
        {
            return new БанківськіРахункиКонтрагентів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(БанківськіРахункиКонтрагентів_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string НомерРахунку { get; set; } = "";
        public Довідники.Банки_Pointer Банк { get; set; } = new Довідники.Банки_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        
    }

    public class БанківськіРахункиКонтрагентів_Pointer : DirectoryPointer
    {
        public БанківськіРахункиКонтрагентів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a29", БанківськіРахункиКонтрагентів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public БанківськіРахункиКонтрагентів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a29", БанківськіРахункиКонтрагентів_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<БанківськіРахункиКонтрагентів_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            БанківськіРахункиКонтрагентів_Objest obj = new БанківськіРахункиКонтрагентів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public БанківськіРахункиКонтрагентів_Pointer Copy()
        {
            return new БанківськіРахункиКонтрагентів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(БанківськіРахункиКонтрагентів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [БанківськіРахункиКонтрагентів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{БанківськіРахункиКонтрагентів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(БанківськіРахункиКонтрагентів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public БанківськіРахункиКонтрагентів_Pointer GetEmptyPointer()
        {
            return new БанківськіРахункиКонтрагентів_Pointer();
        }
    }
    
    public class БанківськіРахункиКонтрагентів_Select : DirectorySelect
    {
        public БанківськіРахункиКонтрагентів_Select() : base(Config.Kernel, "tab_a29") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new БанківськіРахункиКонтрагентів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public БанківськіРахункиКонтрагентів_Pointer? Current { get; private set; }
        
        public async ValueTask<БанківськіРахункиКонтрагентів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new БанківськіРахункиКонтрагентів_Pointer(pointer) : new БанківськіРахункиКонтрагентів_Pointer();
        }
        
        public async ValueTask<List<БанківськіРахункиКонтрагентів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<БанківськіРахункиКонтрагентів_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new БанківськіРахункиКонтрагентів_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "СтаттяРухуКоштів"
    public static class СтаттяРухуКоштів_Const
    {
        public const string TABLE = "tab_a45";
        public const string TYPE = "СтаттяРухуКоштів"; /* Назва вказівника */
        public const string POINTER = "Довідники.СтаттяРухуКоштів"; /* Повна назва вказівника */
        public const string FULLNAME = "Стаття руху коштів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_i7", ];
        
        public const string Назва = "col_i7";
        public const string Код = "col_i8";
        public const string КореспондуючийРахунок = "col_i9";
        public const string ВидРухуКоштів = "col_j2";
        public const string Опис = "col_j1";
    }

    public class СтаттяРухуКоштів_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public СтаттяРухуКоштів_Objest() : base(Config.Kernel, "tab_a45", СтаттяРухуКоштів_Const.TYPE,
             ["col_i7", "col_i8", "col_i9", "col_j2", "col_j1", ], true)
        {
            
                //Табличні частини
                ГосподарськіОперації_TablePart = new СтаттяРухуКоштів_ГосподарськіОперації_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, СтаттяРухуКоштів_Const.FULLNAME + " *");
            
                await СтаттяРухуКоштів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_i7"].ToString() ?? "";
                Код = base.FieldValue["col_i8"].ToString() ?? "";
                КореспондуючийРахунок = base.FieldValue["col_i9"].ToString() ?? "";
                ВидРухуКоштів = (base.FieldValue["col_j2"] != DBNull.Value) ? (Перелічення.ВидиРухуКоштів)base.FieldValue["col_j2"] : 0;
                Опис = base.FieldValue["col_j1"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await ГосподарськіОперації_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_i7"] = Назва;
            base.FieldValue["col_i8"] = Код;
            base.FieldValue["col_i9"] = КореспондуючийРахунок;
            base.FieldValue["col_j2"] = (int)ВидРухуКоштів;
            base.FieldValue["col_j1"] = Опис;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, Опис, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<СтаттяРухуКоштів_Objest> Copy(bool copyTableParts = false)
        {
            СтаттяРухуКоштів_Objest copy = new СтаттяРухуКоштів_Objest()
            {
                Назва = Назва,
                Код = Код,
                КореспондуючийРахунок = КореспондуючийРахунок,
                ВидРухуКоштів = ВидРухуКоштів,
                Опис = Опис,
                
            };
            
            if (copyTableParts)
            {
            
                //ГосподарськіОперації - Таблична частина
                await ГосподарськіОперації_TablePart.Read();
                copy.ГосподарськіОперації_TablePart.Records = ГосподарськіОперації_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await СтаттяРухуКоштів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete(["tab_a46", ]);
        }
        
        public СтаттяРухуКоштів_Pointer GetDirectoryPointer()
        {
            return new СтаттяРухуКоштів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(СтаттяРухуКоштів_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public string КореспондуючийРахунок { get; set; } = "";
        public Перелічення.ВидиРухуКоштів ВидРухуКоштів { get; set; } = 0;
        public string Опис { get; set; } = "";
        
        //Табличні частини
        public СтаттяРухуКоштів_ГосподарськіОперації_TablePart ГосподарськіОперації_TablePart { get; private set; }
        
    }

    public class СтаттяРухуКоштів_Pointer : DirectoryPointer
    {
        public СтаттяРухуКоштів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a45", СтаттяРухуКоштів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public СтаттяРухуКоштів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a45", СтаттяРухуКоштів_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<СтаттяРухуКоштів_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            СтаттяРухуКоштів_Objest obj = new СтаттяРухуКоштів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public СтаттяРухуКоштів_Pointer Copy()
        {
            return new СтаттяРухуКоштів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(СтаттяРухуКоштів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [СтаттяРухуКоштів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{СтаттяРухуКоштів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(СтаттяРухуКоштів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public СтаттяРухуКоштів_Pointer GetEmptyPointer()
        {
            return new СтаттяРухуКоштів_Pointer();
        }
    }
    
    public class СтаттяРухуКоштів_Select : DirectorySelect
    {
        public СтаттяРухуКоштів_Select() : base(Config.Kernel, "tab_a45") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new СтаттяРухуКоштів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public СтаттяРухуКоштів_Pointer? Current { get; private set; }
        
        public async ValueTask<СтаттяРухуКоштів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new СтаттяРухуКоштів_Pointer(pointer) : new СтаттяРухуКоштів_Pointer();
        }
        
        public async ValueTask<List<СтаттяРухуКоштів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<СтаттяРухуКоштів_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new СтаттяРухуКоштів_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class СтаттяРухуКоштів_ГосподарськіОперації_TablePart : DirectoryTablePart
    {
        public СтаттяРухуКоштів_ГосподарськіОперації_TablePart(СтаттяРухуКоштів_Objest owner) : base(Config.Kernel, "tab_a46",
             ["col_j3", ])
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_a46";
        
        public const string ГосподарськаОперація = "col_j3";

        public СтаттяРухуКоштів_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    ГосподарськаОперація = (fieldValue["col_j3"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)fieldValue["col_j3"] : 0,
                    
                };
                Records.Add(record);
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a45"))
                throw new Exception("Owner not exist");
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_j3", (int)record.ГосподарськаОперація},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "СеріїНоменклатури"
    public static class СеріїНоменклатури_Const
    {
        public const string TABLE = "tab_b02";
        public const string TYPE = "СеріїНоменклатури"; /* Назва вказівника */
        public const string POINTER = "Довідники.СеріїНоменклатури"; /* Повна назва вказівника */
        public const string FULLNAME = "Серії"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a3", ];
        
        public const string Номер = "col_a3";
        public const string Коментар = "col_a1";
        public const string ДатаСтворення = "col_a2";
    }

    public class СеріїНоменклатури_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public СеріїНоменклатури_Objest() : base(Config.Kernel, "tab_b02", СеріїНоменклатури_Const.TYPE,
             ["col_a3", "col_a1", "col_a2", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, СеріїНоменклатури_Const.FULLNAME + " *");
            
                await СеріїНоменклатури_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Номер = base.FieldValue["col_a3"].ToString() ?? "";
                Коментар = base.FieldValue["col_a1"].ToString() ?? "";
                ДатаСтворення = (base.FieldValue["col_a2"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a2"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Номер, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await СеріїНоменклатури_Triggers.BeforeSave(this);
            base.FieldValue["col_a3"] = Номер;
            base.FieldValue["col_a1"] = Коментар;
            base.FieldValue["col_a2"] = ДатаСтворення;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Номер, Коментар, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Номер, ]));
            return result;
        }

        public async ValueTask<СеріїНоменклатури_Objest> Copy(bool copyTableParts = false)
        {
            СеріїНоменклатури_Objest copy = new СеріїНоменклатури_Objest()
            {
                Номер = Номер,
                Коментар = Коментар,
                ДатаСтворення = ДатаСтворення,
                
            };
            

            await copy.New();
            
            await СеріїНоменклатури_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public СеріїНоменклатури_Pointer GetDirectoryPointer()
        {
            return new СеріїНоменклатури_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(СеріїНоменклатури_Const.PRESENTATION_FIELDS);
        }
                
        public string Номер { get; set; } = "";
        public string Коментар { get; set; } = "";
        public DateTime ДатаСтворення { get; set; } = DateTime.MinValue;
        
    }

    public class СеріїНоменклатури_Pointer : DirectoryPointer
    {
        public СеріїНоменклатури_Pointer(object? uid = null) : base(Config.Kernel, "tab_b02", СеріїНоменклатури_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public СеріїНоменклатури_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b02", СеріїНоменклатури_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<СеріїНоменклатури_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            СеріїНоменклатури_Objest obj = new СеріїНоменклатури_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public СеріїНоменклатури_Pointer Copy()
        {
            return new СеріїНоменклатури_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(СеріїНоменклатури_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [СеріїНоменклатури_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{СеріїНоменклатури_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(СеріїНоменклатури_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public СеріїНоменклатури_Pointer GetEmptyPointer()
        {
            return new СеріїНоменклатури_Pointer();
        }
    }
    
    public class СеріїНоменклатури_Select : DirectorySelect
    {
        public СеріїНоменклатури_Select() : base(Config.Kernel, "tab_b02") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new СеріїНоменклатури_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public СеріїНоменклатури_Pointer? Current { get; private set; }
        
        public async ValueTask<СеріїНоменклатури_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new СеріїНоменклатури_Pointer(pointer) : new СеріїНоменклатури_Pointer();
        }
        
        public async ValueTask<List<СеріїНоменклатури_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<СеріїНоменклатури_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new СеріїНоменклатури_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ПартіяТоварівКомпозит"
    public static class ПартіяТоварівКомпозит_Const
    {
        public const string TABLE = "tab_b06";
        public const string TYPE = "ПартіяТоварівКомпозит"; /* Назва вказівника */
        public const string POINTER = "Довідники.ПартіяТоварівКомпозит"; /* Повна назва вказівника */
        public const string FULLNAME = "Партія товарів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a1", ];
        
        public const string Назва = "col_a1";
        public const string Дата = "col_a2";
        public const string ТипДокументу = "col_a3";
        public const string ДокументКлюч = "col_a6";
        public const string ПоступленняТоварівТаПослуг = "col_a4";
        public const string ВведенняЗалишків = "col_a5";
    }

    public class ПартіяТоварівКомпозит_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПартіяТоварівКомпозит_Objest() : base(Config.Kernel, "tab_b06", ПартіяТоварівКомпозит_Const.TYPE,
             ["col_a1", "col_a2", "col_a3", "col_a6", "col_a4", "col_a5", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПартіяТоварівКомпозит_Const.FULLNAME + " *");
            
                await ValueTask.FromResult(true);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_a1"].ToString() ?? "";
                Дата = (base.FieldValue["col_a2"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a2"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                ТипДокументу = (base.FieldValue["col_a3"] != DBNull.Value) ? (Перелічення.ТипДокументуПартіяТоварівКомпозит)base.FieldValue["col_a3"] : 0;
                ДокументКлюч = (base.FieldValue["col_a6"] != DBNull.Value) ? (Guid)base.FieldValue["col_a6"] : Guid.Empty;
                ПоступленняТоварівТаПослуг = new Документи.ПоступленняТоварівТаПослуг_Pointer(base.FieldValue["col_a4"]);
                ВведенняЗалишків = new Документи.ВведенняЗалишків_Pointer(base.FieldValue["col_a5"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Назва;
            base.FieldValue["col_a2"] = Дата;
            base.FieldValue["col_a3"] = (int)ТипДокументу;
            base.FieldValue["col_a6"] = ДокументКлюч;
            base.FieldValue["col_a4"] = ПоступленняТоварівТаПослуг.UnigueID.UGuid;
            base.FieldValue["col_a5"] = ВведенняЗалишків.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ПартіяТоварівКомпозит_Objest> Copy(bool copyTableParts = false)
        {
            ПартіяТоварівКомпозит_Objest copy = new ПартіяТоварівКомпозит_Objest()
            {
                Назва = Назва,
                Дата = Дата,
                ТипДокументу = ТипДокументу,
                ДокументКлюч = ДокументКлюч,
                ПоступленняТоварівТаПослуг = ПоступленняТоварівТаПослуг,
                ВведенняЗалишків = ВведенняЗалишків,
                
            };
            

            await copy.New();
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ПартіяТоварівКомпозит_Pointer GetDirectoryPointer()
        {
            return new ПартіяТоварівКомпозит_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПартіяТоварівКомпозит_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public DateTime Дата { get; set; } = DateTime.MinValue;
        public Перелічення.ТипДокументуПартіяТоварівКомпозит ТипДокументу { get; set; } = 0;
        public Guid ДокументКлюч { get; set; } = new Guid();
        public Документи.ПоступленняТоварівТаПослуг_Pointer ПоступленняТоварівТаПослуг { get; set; } = new Документи.ПоступленняТоварівТаПослуг_Pointer();
        public Документи.ВведенняЗалишків_Pointer ВведенняЗалишків { get; set; } = new Документи.ВведенняЗалишків_Pointer();
        
    }

    public class ПартіяТоварівКомпозит_Pointer : DirectoryPointer
    {
        public ПартіяТоварівКомпозит_Pointer(object? uid = null) : base(Config.Kernel, "tab_b06", ПартіяТоварівКомпозит_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПартіяТоварівКомпозит_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b06", ПартіяТоварівКомпозит_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ПартіяТоварівКомпозит_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПартіяТоварівКомпозит_Objest obj = new ПартіяТоварівКомпозит_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ПартіяТоварівКомпозит_Pointer Copy()
        {
            return new ПартіяТоварівКомпозит_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПартіяТоварівКомпозит_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПартіяТоварівКомпозит_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПартіяТоварівКомпозит_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПартіяТоварівКомпозит_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ПартіяТоварівКомпозит_Pointer GetEmptyPointer()
        {
            return new ПартіяТоварівКомпозит_Pointer();
        }
    }
    
    public class ПартіяТоварівКомпозит_Select : DirectorySelect
    {
        public ПартіяТоварівКомпозит_Select() : base(Config.Kernel, "tab_b06") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПартіяТоварівКомпозит_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПартіяТоварівКомпозит_Pointer? Current { get; private set; }
        
        public async ValueTask<ПартіяТоварівКомпозит_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПартіяТоварівКомпозит_Pointer(pointer) : new ПартіяТоварівКомпозит_Pointer();
        }
        
        public async ValueTask<List<ПартіяТоварівКомпозит_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПартіяТоварівКомпозит_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ПартіяТоварівКомпозит_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ВидиЗапасів"
    public static class ВидиЗапасів_Const
    {
        public const string TABLE = "tab_b13";
        public const string TYPE = "ВидиЗапасів"; /* Назва вказівника */
        public const string POINTER = "Довідники.ВидиЗапасів"; /* Повна назва вказівника */
        public const string FULLNAME = "Види запасів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a5", ];
        
        public const string Назва = "col_a5";
        public const string Організація = "col_b3";
        public const string ТипЗапасів = "col_a7";
        public const string Валюта = "col_a9";
        public const string Контрагент = "col_b1";
        public const string Договір = "col_b2";
        public const string Код = "col_a1";
    }

    public class ВидиЗапасів_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ВидиЗапасів_Objest() : base(Config.Kernel, "tab_b13", ВидиЗапасів_Const.TYPE,
             ["col_a5", "col_b3", "col_a7", "col_a9", "col_b1", "col_b2", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ВидиЗапасів_Const.FULLNAME + " *");
            
                await ВидиЗапасів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_a5"].ToString() ?? "";
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_b3"]);
                ТипЗапасів = (base.FieldValue["col_a7"] != DBNull.Value) ? (Перелічення.ТипЗапасів)base.FieldValue["col_a7"] : 0;
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a9"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_b1"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_b2"]);
                Код = base.FieldValue["col_a1"].ToString() ?? "";
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a5"] = Назва;
            base.FieldValue["col_b3"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a7"] = (int)ТипЗапасів;
            base.FieldValue["col_a9"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_b1"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_b2"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_a1"] = Код;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ВидиЗапасів_Objest> Copy(bool copyTableParts = false)
        {
            ВидиЗапасів_Objest copy = new ВидиЗапасів_Objest()
            {
                Назва = Назва,
                Організація = Організація,
                ТипЗапасів = ТипЗапасів,
                Валюта = Валюта,
                Контрагент = Контрагент,
                Договір = Договір,
                Код = Код,
                
            };
            

            await copy.New();
            
            await ВидиЗапасів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ВидиЗапасів_Pointer GetDirectoryPointer()
        {
            return new ВидиЗапасів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ВидиЗапасів_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Перелічення.ТипЗапасів ТипЗапасів { get; set; } = 0;
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public string Код { get; set; } = "";
        
    }

    public class ВидиЗапасів_Pointer : DirectoryPointer
    {
        public ВидиЗапасів_Pointer(object? uid = null) : base(Config.Kernel, "tab_b13", ВидиЗапасів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ВидиЗапасів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b13", ВидиЗапасів_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ВидиЗапасів_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ВидиЗапасів_Objest obj = new ВидиЗапасів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ВидиЗапасів_Pointer Copy()
        {
            return new ВидиЗапасів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ВидиЗапасів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ВидиЗапасів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ВидиЗапасів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ВидиЗапасів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ВидиЗапасів_Pointer GetEmptyPointer()
        {
            return new ВидиЗапасів_Pointer();
        }
    }
    
    public class ВидиЗапасів_Select : DirectorySelect
    {
        public ВидиЗапасів_Select() : base(Config.Kernel, "tab_b13") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ВидиЗапасів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ВидиЗапасів_Pointer? Current { get; private set; }
        
        public async ValueTask<ВидиЗапасів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ВидиЗапасів_Pointer(pointer) : new ВидиЗапасів_Pointer();
        }
        
        public async ValueTask<List<ВидиЗапасів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ВидиЗапасів_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ВидиЗапасів_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "Банки"
    public static class Банки_Const
    {
        public const string TABLE = "tab_a39";
        public const string TYPE = "Банки"; /* Назва вказівника */
        public const string POINTER = "Довідники.Банки"; /* Повна назва вказівника */
        public const string FULLNAME = "Банки"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Код = "col_a1";
        public const string Назва = "col_a2";
        public const string ТипНаселеногоПункту = "col_b4";
        public const string КодМФО = "col_a3";
        public const string НазваГоловноїУстановиАнг = "col_a4";
        public const string КодЄДРПОУ = "col_a5";
        public const string ПовнаНазва = "col_a6";
        public const string УнікальнийКодБанку = "col_a7";
        public const string КодОбластіОпераційноїДіяльності = "col_a8";
        public const string НазваОбластіОпераційноїДіяльності = "col_a9";
        public const string КодОбластіЗгідноСтатуту = "col_b1";
        public const string НазваОбластіЗгідноСтатуту = "col_b2";
        public const string ПоштовийІндекс = "col_b3";
        public const string НазваНаселеногоПункту = "col_b5";
        public const string Адреса = "col_b6";
        public const string КодТелефонногоЗвязку = "col_b7";
        public const string НомерТелефону = "col_b8";
        public const string ЧисловийКодСтануУстанови = "col_b9";
        public const string НазваСтануУстанови = "col_c1";
        public const string ДатаЗміниСтану = "col_c2";
        public const string ДатаВідкриттяУстанови = "col_c3";
        public const string ДатаЗакриттяУстанови = "col_c4";
        public const string КодНБУ = "col_c5";
        public const string НомерЛіцензії = "col_c6";
        public const string ДатаЛіцензії = "col_c7";
        public const string КодСтатусу = "col_c8";
        public const string Статус = "col_c9";
        public const string ДатаЗапису = "col_d1";
    }

    public class Банки_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Банки_Objest() : base(Config.Kernel, "tab_a39", Банки_Const.TYPE,
             ["col_a1", "col_a2", "col_b4", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", "col_b3", "col_b5", "col_b6", "col_b7", "col_b8", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c8", "col_c9", "col_d1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Банки_Const.FULLNAME + " *");
            
                await Банки_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Код = base.FieldValue["col_a1"].ToString() ?? "";
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                ТипНаселеногоПункту = base.FieldValue["col_b4"].ToString() ?? "";
                КодМФО = base.FieldValue["col_a3"].ToString() ?? "";
                НазваГоловноїУстановиАнг = base.FieldValue["col_a4"].ToString() ?? "";
                КодЄДРПОУ = base.FieldValue["col_a5"].ToString() ?? "";
                ПовнаНазва = base.FieldValue["col_a6"].ToString() ?? "";
                УнікальнийКодБанку = base.FieldValue["col_a7"].ToString() ?? "";
                КодОбластіОпераційноїДіяльності = base.FieldValue["col_a8"].ToString() ?? "";
                НазваОбластіОпераційноїДіяльності = base.FieldValue["col_a9"].ToString() ?? "";
                КодОбластіЗгідноСтатуту = base.FieldValue["col_b1"].ToString() ?? "";
                НазваОбластіЗгідноСтатуту = base.FieldValue["col_b2"].ToString() ?? "";
                ПоштовийІндекс = base.FieldValue["col_b3"].ToString() ?? "";
                НазваНаселеногоПункту = base.FieldValue["col_b5"].ToString() ?? "";
                Адреса = base.FieldValue["col_b6"].ToString() ?? "";
                КодТелефонногоЗвязку = base.FieldValue["col_b7"].ToString() ?? "";
                НомерТелефону = base.FieldValue["col_b8"].ToString() ?? "";
                ЧисловийКодСтануУстанови = base.FieldValue["col_b9"].ToString() ?? "";
                НазваСтануУстанови = base.FieldValue["col_c1"].ToString() ?? "";
                ДатаЗміниСтану = base.FieldValue["col_c2"].ToString() ?? "";
                ДатаВідкриттяУстанови = base.FieldValue["col_c3"].ToString() ?? "";
                ДатаЗакриттяУстанови = base.FieldValue["col_c4"].ToString() ?? "";
                КодНБУ = base.FieldValue["col_c5"].ToString() ?? "";
                НомерЛіцензії = base.FieldValue["col_c6"].ToString() ?? "";
                ДатаЛіцензії = base.FieldValue["col_c7"].ToString() ?? "";
                КодСтатусу = base.FieldValue["col_c8"].ToString() ?? "";
                Статус = base.FieldValue["col_c9"].ToString() ?? "";
                ДатаЗапису = base.FieldValue["col_d1"].ToString() ?? "";
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Код;
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_b4"] = ТипНаселеногоПункту;
            base.FieldValue["col_a3"] = КодМФО;
            base.FieldValue["col_a4"] = НазваГоловноїУстановиАнг;
            base.FieldValue["col_a5"] = КодЄДРПОУ;
            base.FieldValue["col_a6"] = ПовнаНазва;
            base.FieldValue["col_a7"] = УнікальнийКодБанку;
            base.FieldValue["col_a8"] = КодОбластіОпераційноїДіяльності;
            base.FieldValue["col_a9"] = НазваОбластіОпераційноїДіяльності;
            base.FieldValue["col_b1"] = КодОбластіЗгідноСтатуту;
            base.FieldValue["col_b2"] = НазваОбластіЗгідноСтатуту;
            base.FieldValue["col_b3"] = ПоштовийІндекс;
            base.FieldValue["col_b5"] = НазваНаселеногоПункту;
            base.FieldValue["col_b6"] = Адреса;
            base.FieldValue["col_b7"] = КодТелефонногоЗвязку;
            base.FieldValue["col_b8"] = НомерТелефону;
            base.FieldValue["col_b9"] = ЧисловийКодСтануУстанови;
            base.FieldValue["col_c1"] = НазваСтануУстанови;
            base.FieldValue["col_c2"] = ДатаЗміниСтану;
            base.FieldValue["col_c3"] = ДатаВідкриттяУстанови;
            base.FieldValue["col_c4"] = ДатаЗакриттяУстанови;
            base.FieldValue["col_c5"] = КодНБУ;
            base.FieldValue["col_c6"] = НомерЛіцензії;
            base.FieldValue["col_c7"] = ДатаЛіцензії;
            base.FieldValue["col_c8"] = КодСтатусу;
            base.FieldValue["col_c9"] = Статус;
            base.FieldValue["col_d1"] = ДатаЗапису;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, КодМФО, КодЄДРПОУ, НазваНаселеногоПункту, Адреса, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Банки_Objest> Copy(bool copyTableParts = false)
        {
            Банки_Objest copy = new Банки_Objest()
            {
                Код = Код,
                Назва = Назва,
                ТипНаселеногоПункту = ТипНаселеногоПункту,
                КодМФО = КодМФО,
                НазваГоловноїУстановиАнг = НазваГоловноїУстановиАнг,
                КодЄДРПОУ = КодЄДРПОУ,
                ПовнаНазва = ПовнаНазва,
                УнікальнийКодБанку = УнікальнийКодБанку,
                КодОбластіОпераційноїДіяльності = КодОбластіОпераційноїДіяльності,
                НазваОбластіОпераційноїДіяльності = НазваОбластіОпераційноїДіяльності,
                КодОбластіЗгідноСтатуту = КодОбластіЗгідноСтатуту,
                НазваОбластіЗгідноСтатуту = НазваОбластіЗгідноСтатуту,
                ПоштовийІндекс = ПоштовийІндекс,
                НазваНаселеногоПункту = НазваНаселеногоПункту,
                Адреса = Адреса,
                КодТелефонногоЗвязку = КодТелефонногоЗвязку,
                НомерТелефону = НомерТелефону,
                ЧисловийКодСтануУстанови = ЧисловийКодСтануУстанови,
                НазваСтануУстанови = НазваСтануУстанови,
                ДатаЗміниСтану = ДатаЗміниСтану,
                ДатаВідкриттяУстанови = ДатаВідкриттяУстанови,
                ДатаЗакриттяУстанови = ДатаЗакриттяУстанови,
                КодНБУ = КодНБУ,
                НомерЛіцензії = НомерЛіцензії,
                ДатаЛіцензії = ДатаЛіцензії,
                КодСтатусу = КодСтатусу,
                Статус = Статус,
                ДатаЗапису = ДатаЗапису,
                
            };
            

            await copy.New();
            
            await Банки_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public Банки_Pointer GetDirectoryPointer()
        {
            return new Банки_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Банки_Const.PRESENTATION_FIELDS);
        }
                
        public string Код { get; set; } = "";
        public string Назва { get; set; } = "";
        public string ТипНаселеногоПункту { get; set; } = "";
        public string КодМФО { get; set; } = "";
        public string НазваГоловноїУстановиАнг { get; set; } = "";
        public string КодЄДРПОУ { get; set; } = "";
        public string ПовнаНазва { get; set; } = "";
        public string УнікальнийКодБанку { get; set; } = "";
        public string КодОбластіОпераційноїДіяльності { get; set; } = "";
        public string НазваОбластіОпераційноїДіяльності { get; set; } = "";
        public string КодОбластіЗгідноСтатуту { get; set; } = "";
        public string НазваОбластіЗгідноСтатуту { get; set; } = "";
        public string ПоштовийІндекс { get; set; } = "";
        public string НазваНаселеногоПункту { get; set; } = "";
        public string Адреса { get; set; } = "";
        public string КодТелефонногоЗвязку { get; set; } = "";
        public string НомерТелефону { get; set; } = "";
        public string ЧисловийКодСтануУстанови { get; set; } = "";
        public string НазваСтануУстанови { get; set; } = "";
        public string ДатаЗміниСтану { get; set; } = "";
        public string ДатаВідкриттяУстанови { get; set; } = "";
        public string ДатаЗакриттяУстанови { get; set; } = "";
        public string КодНБУ { get; set; } = "";
        public string НомерЛіцензії { get; set; } = "";
        public string ДатаЛіцензії { get; set; } = "";
        public string КодСтатусу { get; set; } = "";
        public string Статус { get; set; } = "";
        public string ДатаЗапису { get; set; } = "";
        
    }

    public class Банки_Pointer : DirectoryPointer
    {
        public Банки_Pointer(object? uid = null) : base(Config.Kernel, "tab_a39", Банки_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Банки_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a39", Банки_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Банки_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Банки_Objest obj = new Банки_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Банки_Pointer Copy()
        {
            return new Банки_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Банки_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Банки_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Банки_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Банки_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Банки_Pointer GetEmptyPointer()
        {
            return new Банки_Pointer();
        }
    }
    
    public class Банки_Select : DirectorySelect
    {
        public Банки_Select() : base(Config.Kernel, "tab_a39") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Банки_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Банки_Pointer? Current { get; private set; }
        
        public async ValueTask<Банки_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Банки_Pointer(pointer) : new Банки_Pointer();
        }
        
        public async ValueTask<List<Банки_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Банки_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Банки_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "СкладськіПриміщення"
    public static class СкладськіПриміщення_Const
    {
        public const string TABLE = "tab_a71";
        public const string TYPE = "СкладськіПриміщення"; /* Назва вказівника */
        public const string POINTER = "Довідники.СкладськіПриміщення"; /* Повна назва вказівника */
        public const string FULLNAME = "Складські приміщення"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Назва = "col_a2";
        public const string НалаштуванняАдресногоЗберігання = "col_a3";
        public const string Склад = "col_a1";
    }

    public class СкладськіПриміщення_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public СкладськіПриміщення_Objest() : base(Config.Kernel, "tab_a71", СкладськіПриміщення_Const.TYPE,
             ["col_a2", "col_a3", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, СкладськіПриміщення_Const.FULLNAME + " *");
            
                await ValueTask.FromResult(true);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                НалаштуванняАдресногоЗберігання = (base.FieldValue["col_a3"] != DBNull.Value) ? (Перелічення.НалаштуванняАдресногоЗберігання)base.FieldValue["col_a3"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_a3"] = (int)НалаштуванняАдресногоЗберігання;
            base.FieldValue["col_a1"] = Склад.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<СкладськіПриміщення_Objest> Copy(bool copyTableParts = false)
        {
            СкладськіПриміщення_Objest copy = new СкладськіПриміщення_Objest()
            {
                Назва = Назва,
                НалаштуванняАдресногоЗберігання = НалаштуванняАдресногоЗберігання,
                Склад = Склад,
                
            };
            

            await copy.New();
            
            await СкладськіПриміщення_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public СкладськіПриміщення_Pointer GetDirectoryPointer()
        {
            return new СкладськіПриміщення_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(СкладськіПриміщення_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public Перелічення.НалаштуванняАдресногоЗберігання НалаштуванняАдресногоЗберігання { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        
    }

    public class СкладськіПриміщення_Pointer : DirectoryPointer
    {
        public СкладськіПриміщення_Pointer(object? uid = null) : base(Config.Kernel, "tab_a71", СкладськіПриміщення_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public СкладськіПриміщення_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a71", СкладськіПриміщення_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<СкладськіПриміщення_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            СкладськіПриміщення_Objest obj = new СкладськіПриміщення_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public СкладськіПриміщення_Pointer Copy()
        {
            return new СкладськіПриміщення_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(СкладськіПриміщення_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [СкладськіПриміщення_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{СкладськіПриміщення_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(СкладськіПриміщення_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public СкладськіПриміщення_Pointer GetEmptyPointer()
        {
            return new СкладськіПриміщення_Pointer();
        }
    }
    
    public class СкладськіПриміщення_Select : DirectorySelect
    {
        public СкладськіПриміщення_Select() : base(Config.Kernel, "tab_a71") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new СкладськіПриміщення_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public СкладськіПриміщення_Pointer? Current { get; private set; }
        
        public async ValueTask<СкладськіПриміщення_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new СкладськіПриміщення_Pointer(pointer) : new СкладськіПриміщення_Pointer();
        }
        
        public async ValueTask<List<СкладськіПриміщення_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<СкладськіПриміщення_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new СкладськіПриміщення_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "СкладськіКомірки"
    public static class СкладськіКомірки_Const
    {
        public const string TABLE = "tab_a72";
        public const string TYPE = "СкладськіКомірки"; /* Назва вказівника */
        public const string POINTER = "Довідники.СкладськіКомірки"; /* Повна назва вказівника */
        public const string FULLNAME = "Складські комірки"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Папка = "col_a1";
        public const string Назва = "col_a2";
        public const string ОбластьЗберігання = "col_a3";
        public const string Лінія = "col_a4";
        public const string Позиція = "col_a5";
        public const string Приміщення = "col_a6";
        public const string Стелаж = "col_a7";
        public const string Ярус = "col_a8";
        public const string ТипСкладськоїКомірки = "col_a9";
        public const string Типорозмір = "col_b1";
    }

    public class СкладськіКомірки_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public СкладськіКомірки_Objest() : base(Config.Kernel, "tab_a72", СкладськіКомірки_Const.TYPE,
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, СкладськіКомірки_Const.FULLNAME + " *");
            
                await ValueTask.FromResult(true);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Папка = new Довідники.СкладськіКомірки_Папки_Pointer(base.FieldValue["col_a1"]);
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                ОбластьЗберігання = new Довідники.ОбластьЗберігання_Pointer(base.FieldValue["col_a3"]);
                Лінія = base.FieldValue["col_a4"].ToString() ?? "";
                Позиція = base.FieldValue["col_a5"].ToString() ?? "";
                Приміщення = new Довідники.СкладськіПриміщення_Pointer(base.FieldValue["col_a6"]);
                Стелаж = base.FieldValue["col_a7"].ToString() ?? "";
                Ярус = base.FieldValue["col_a8"].ToString() ?? "";
                ТипСкладськоїКомірки = (base.FieldValue["col_a9"] != DBNull.Value) ? (Перелічення.ТипиСкладськихКомірок)base.FieldValue["col_a9"] : 0;
                Типорозмір = new Довідники.ТипорозміриКомірок_Pointer(base.FieldValue["col_b1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Папка.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_a3"] = ОбластьЗберігання.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Лінія;
            base.FieldValue["col_a5"] = Позиція;
            base.FieldValue["col_a6"] = Приміщення.UnigueID.UGuid;
            base.FieldValue["col_a7"] = Стелаж;
            base.FieldValue["col_a8"] = Ярус;
            base.FieldValue["col_a9"] = (int)ТипСкладськоїКомірки;
            base.FieldValue["col_b1"] = Типорозмір.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<СкладськіКомірки_Objest> Copy(bool copyTableParts = false)
        {
            СкладськіКомірки_Objest copy = new СкладськіКомірки_Objest()
            {
                Папка = Папка,
                Назва = Назва,
                ОбластьЗберігання = ОбластьЗберігання,
                Лінія = Лінія,
                Позиція = Позиція,
                Приміщення = Приміщення,
                Стелаж = Стелаж,
                Ярус = Ярус,
                ТипСкладськоїКомірки = ТипСкладськоїКомірки,
                Типорозмір = Типорозмір,
                
            };
            

            await copy.New();
            
            await СкладськіКомірки_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public СкладськіКомірки_Pointer GetDirectoryPointer()
        {
            return new СкладськіКомірки_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(СкладськіКомірки_Const.PRESENTATION_FIELDS);
        }
                
        public Довідники.СкладськіКомірки_Папки_Pointer Папка { get; set; } = new Довідники.СкладськіКомірки_Папки_Pointer();
        public string Назва { get; set; } = "";
        public Довідники.ОбластьЗберігання_Pointer ОбластьЗберігання { get; set; } = new Довідники.ОбластьЗберігання_Pointer();
        public string Лінія { get; set; } = "";
        public string Позиція { get; set; } = "";
        public Довідники.СкладськіПриміщення_Pointer Приміщення { get; set; } = new Довідники.СкладськіПриміщення_Pointer();
        public string Стелаж { get; set; } = "";
        public string Ярус { get; set; } = "";
        public Перелічення.ТипиСкладськихКомірок ТипСкладськоїКомірки { get; set; } = 0;
        public Довідники.ТипорозміриКомірок_Pointer Типорозмір { get; set; } = new Довідники.ТипорозміриКомірок_Pointer();
        
    }

    public class СкладськіКомірки_Pointer : DirectoryPointer
    {
        public СкладськіКомірки_Pointer(object? uid = null) : base(Config.Kernel, "tab_a72", СкладськіКомірки_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public СкладськіКомірки_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a72", СкладськіКомірки_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<СкладськіКомірки_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            СкладськіКомірки_Objest obj = new СкладськіКомірки_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public СкладськіКомірки_Pointer Copy()
        {
            return new СкладськіКомірки_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(СкладськіКомірки_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [СкладськіКомірки_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{СкладськіКомірки_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(СкладськіКомірки_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public СкладськіКомірки_Pointer GetEmptyPointer()
        {
            return new СкладськіКомірки_Pointer();
        }
    }
    
    public class СкладськіКомірки_Select : DirectorySelect
    {
        public СкладськіКомірки_Select() : base(Config.Kernel, "tab_a72") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new СкладськіКомірки_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public СкладськіКомірки_Pointer? Current { get; private set; }
        
        public async ValueTask<СкладськіКомірки_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new СкладськіКомірки_Pointer(pointer) : new СкладськіКомірки_Pointer();
        }
        
        public async ValueTask<List<СкладськіКомірки_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<СкладськіКомірки_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new СкладськіКомірки_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ОбластьЗберігання"
    public static class ОбластьЗберігання_Const
    {
        public const string TABLE = "tab_a73";
        public const string TYPE = "ОбластьЗберігання"; /* Назва вказівника */
        public const string POINTER = "Довідники.ОбластьЗберігання"; /* Повна назва вказівника */
        public const string FULLNAME = "Область зберігання"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Назва = "col_a2";
        public const string Опис = "col_a3";
        public const string Приміщення = "col_a4";
    }

    public class ОбластьЗберігання_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ОбластьЗберігання_Objest() : base(Config.Kernel, "tab_a73", ОбластьЗберігання_Const.TYPE,
             ["col_a2", "col_a3", "col_a4", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ОбластьЗберігання_Const.FULLNAME + " *");
            
                await ValueTask.FromResult(true);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                Опис = base.FieldValue["col_a3"].ToString() ?? "";
                Приміщення = new Довідники.СкладськіПриміщення_Pointer(base.FieldValue["col_a4"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_a3"] = Опис;
            base.FieldValue["col_a4"] = Приміщення.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ОбластьЗберігання_Objest> Copy(bool copyTableParts = false)
        {
            ОбластьЗберігання_Objest copy = new ОбластьЗберігання_Objest()
            {
                Назва = Назва,
                Опис = Опис,
                Приміщення = Приміщення,
                
            };
            

            await copy.New();
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ОбластьЗберігання_Pointer GetDirectoryPointer()
        {
            return new ОбластьЗберігання_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ОбластьЗберігання_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Опис { get; set; } = "";
        public Довідники.СкладськіПриміщення_Pointer Приміщення { get; set; } = new Довідники.СкладськіПриміщення_Pointer();
        
    }

    public class ОбластьЗберігання_Pointer : DirectoryPointer
    {
        public ОбластьЗберігання_Pointer(object? uid = null) : base(Config.Kernel, "tab_a73", ОбластьЗберігання_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ОбластьЗберігання_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a73", ОбластьЗберігання_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ОбластьЗберігання_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ОбластьЗберігання_Objest obj = new ОбластьЗберігання_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ОбластьЗберігання_Pointer Copy()
        {
            return new ОбластьЗберігання_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ОбластьЗберігання_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ОбластьЗберігання_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ОбластьЗберігання_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ОбластьЗберігання_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ОбластьЗберігання_Pointer GetEmptyPointer()
        {
            return new ОбластьЗберігання_Pointer();
        }
    }
    
    public class ОбластьЗберігання_Select : DirectorySelect
    {
        public ОбластьЗберігання_Select() : base(Config.Kernel, "tab_a73") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ОбластьЗберігання_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ОбластьЗберігання_Pointer? Current { get; private set; }
        
        public async ValueTask<ОбластьЗберігання_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ОбластьЗберігання_Pointer(pointer) : new ОбластьЗберігання_Pointer();
        }
        
        public async ValueTask<List<ОбластьЗберігання_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ОбластьЗберігання_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ОбластьЗберігання_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ТипорозміриКомірок"
    public static class ТипорозміриКомірок_Const
    {
        public const string TABLE = "tab_a75";
        public const string TYPE = "ТипорозміриКомірок"; /* Назва вказівника */
        public const string POINTER = "Довідники.ТипорозміриКомірок"; /* Повна назва вказівника */
        public const string FULLNAME = "Типорозміри комірок"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Висота = "col_a1";
        public const string Назва = "col_a2";
        public const string Глибина = "col_a3";
        public const string Вантажопідйомність = "col_a4";
        public const string Обєм = "col_a5";
        public const string Ширина = "col_a6";
    }

    public class ТипорозміриКомірок_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ТипорозміриКомірок_Objest() : base(Config.Kernel, "tab_a75", ТипорозміриКомірок_Const.TYPE,
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ТипорозміриКомірок_Const.FULLNAME + " *");
            
                await ValueTask.FromResult(true);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Висота = base.FieldValue["col_a1"].ToString() ?? "";
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                Глибина = base.FieldValue["col_a3"].ToString() ?? "";
                Вантажопідйомність = base.FieldValue["col_a4"].ToString() ?? "";
                Обєм = base.FieldValue["col_a5"].ToString() ?? "";
                Ширина = base.FieldValue["col_a6"].ToString() ?? "";
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Висота;
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_a3"] = Глибина;
            base.FieldValue["col_a4"] = Вантажопідйомність;
            base.FieldValue["col_a5"] = Обєм;
            base.FieldValue["col_a6"] = Ширина;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ТипорозміриКомірок_Objest> Copy(bool copyTableParts = false)
        {
            ТипорозміриКомірок_Objest copy = new ТипорозміриКомірок_Objest()
            {
                Висота = Висота,
                Назва = Назва,
                Глибина = Глибина,
                Вантажопідйомність = Вантажопідйомність,
                Обєм = Обєм,
                Ширина = Ширина,
                
            };
            

            await copy.New();
            
            await ТипорозміриКомірок_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public ТипорозміриКомірок_Pointer GetDirectoryPointer()
        {
            return new ТипорозміриКомірок_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ТипорозміриКомірок_Const.PRESENTATION_FIELDS);
        }
                
        public string Висота { get; set; } = "";
        public string Назва { get; set; } = "";
        public string Глибина { get; set; } = "";
        public string Вантажопідйомність { get; set; } = "";
        public string Обєм { get; set; } = "";
        public string Ширина { get; set; } = "";
        
    }

    public class ТипорозміриКомірок_Pointer : DirectoryPointer
    {
        public ТипорозміриКомірок_Pointer(object? uid = null) : base(Config.Kernel, "tab_a75", ТипорозміриКомірок_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ТипорозміриКомірок_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a75", ТипорозміриКомірок_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ТипорозміриКомірок_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ТипорозміриКомірок_Objest obj = new ТипорозміриКомірок_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ТипорозміриКомірок_Pointer Copy()
        {
            return new ТипорозміриКомірок_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ТипорозміриКомірок_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ТипорозміриКомірок_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ТипорозміриКомірок_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ТипорозміриКомірок_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ТипорозміриКомірок_Pointer GetEmptyPointer()
        {
            return new ТипорозміриКомірок_Pointer();
        }
    }
    
    public class ТипорозміриКомірок_Select : DirectorySelect
    {
        public ТипорозміриКомірок_Select() : base(Config.Kernel, "tab_a75") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ТипорозміриКомірок_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ТипорозміриКомірок_Pointer? Current { get; private set; }
        
        public async ValueTask<ТипорозміриКомірок_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ТипорозміриКомірок_Pointer(pointer) : new ТипорозміриКомірок_Pointer();
        }
        
        public async ValueTask<List<ТипорозміриКомірок_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ТипорозміриКомірок_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ТипорозміриКомірок_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "СкладськіКомірки_Папки"
    public static class СкладськіКомірки_Папки_Const
    {
        public const string TABLE = "tab_a76";
        public const string TYPE = "СкладськіКомірки_Папки"; /* Назва вказівника */
        public const string POINTER = "Довідники.СкладськіКомірки_Папки"; /* Повна назва вказівника */
        public const string FULLNAME = "Складські комірки папки"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_j1", ];
        
        public const string Назва = "col_j1";
        public const string Код = "col_j2";
        public const string Родич = "col_j3";
        public const string Власник = "col_a1";
    }

    public class СкладськіКомірки_Папки_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public СкладськіКомірки_Папки_Objest() : base(Config.Kernel, "tab_a76", СкладськіКомірки_Папки_Const.TYPE,
             ["col_j1", "col_j2", "col_j3", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, СкладськіКомірки_Папки_Const.FULLNAME + " *");
            
                await СкладськіКомірки_Папки_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_j1"].ToString() ?? "";
                Код = base.FieldValue["col_j2"].ToString() ?? "";
                Родич = new Довідники.СкладськіКомірки_Папки_Pointer(base.FieldValue["col_j3"]);
                Власник = new Довідники.СкладськіПриміщення_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_j1"] = Назва;
            base.FieldValue["col_j2"] = Код;
            base.FieldValue["col_j3"] = Родич.UnigueID.UGuid;
            base.FieldValue["col_a1"] = Власник.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<СкладськіКомірки_Папки_Objest> Copy(bool copyTableParts = false)
        {
            СкладськіКомірки_Папки_Objest copy = new СкладськіКомірки_Папки_Objest()
            {
                Назва = Назва,
                Код = Код,
                Родич = Родич,
                Власник = Власник,
                
            };
            

            await copy.New();
            
            await СкладськіКомірки_Папки_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await СкладськіКомірки_Папки_Triggers.SetDeletionLabel(this, label);      
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
                await СкладськіКомірки_Папки_Triggers.BeforeDelete(this);      
            
            await base.BaseDelete([]);
        }
        
        public СкладськіКомірки_Папки_Pointer GetDirectoryPointer()
        {
            return new СкладськіКомірки_Папки_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(СкладськіКомірки_Папки_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public string Код { get; set; } = "";
        public Довідники.СкладськіКомірки_Папки_Pointer Родич { get; set; } = new Довідники.СкладськіКомірки_Папки_Pointer();
        public Довідники.СкладськіПриміщення_Pointer Власник { get; set; } = new Довідники.СкладськіПриміщення_Pointer();
        
    }

    public class СкладськіКомірки_Папки_Pointer : DirectoryPointer
    {
        public СкладськіКомірки_Папки_Pointer(object? uid = null) : base(Config.Kernel, "tab_a76", СкладськіКомірки_Папки_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public СкладськіКомірки_Папки_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a76", СкладськіКомірки_Папки_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<СкладськіКомірки_Папки_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            СкладськіКомірки_Папки_Objest obj = new СкладськіКомірки_Папки_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public СкладськіКомірки_Папки_Pointer Copy()
        {
            return new СкладськіКомірки_Папки_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(СкладськіКомірки_Папки_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [СкладськіКомірки_Папки_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{СкладськіКомірки_Папки_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(СкладськіКомірки_Папки_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            СкладськіКомірки_Папки_Objest? obj = await GetDirectoryObject();
              if (obj != null) await СкладськіКомірки_Папки_Triggers.SetDeletionLabel(obj, label);
            
            await base.BaseDeletionLabel(label);
        }
		
        public СкладськіКомірки_Папки_Pointer GetEmptyPointer()
        {
            return new СкладськіКомірки_Папки_Pointer();
        }
    }
    
    public class СкладськіКомірки_Папки_Select : DirectorySelect
    {
        public СкладськіКомірки_Папки_Select() : base(Config.Kernel, "tab_a76") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new СкладськіКомірки_Папки_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public СкладськіКомірки_Папки_Pointer? Current { get; private set; }
        
        public async ValueTask<СкладськіКомірки_Папки_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new СкладськіКомірки_Папки_Pointer(pointer) : new СкладськіКомірки_Папки_Pointer();
        }
        
        public async ValueTask<List<СкладськіКомірки_Папки_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<СкладськіКомірки_Папки_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new СкладськіКомірки_Папки_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    public class СкладськіКомірки_Папки_SelectHierarchical : DirectorySelectHierarchical
    {
        public СкладськіКомірки_Папки_SelectHierarchical() : base(Config.Kernel, "tab_a76", "col_j3") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = Parent = null; Level = 0; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPositionHierarchical.HasValue) { 
          Current = new СкладськіКомірки_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.UnigueID, base.CurrentPointerPositionHierarchical.Value.Fields); 
          Parent = new СкладськіКомірки_Папки_Pointer(base.CurrentPointerPositionHierarchical.Value.Parent); 
          Level = base.CurrentPointerPositionHierarchical.Value.Level; return true; } else { Current = Parent = null; Level = 0; return false; } }
        public СкладськіКомірки_Папки_Pointer? Current { get; private set; }
        public СкладськіКомірки_Папки_Pointer? Parent { get; private set; }
        public int Level { get; private set; } = 0;
    }
    
   
    #endregion
    
    #region DIRECTORY "Блокнот"
    public static class Блокнот_Const
    {
        public const string TABLE = "tab_a41";
        public const string TYPE = "Блокнот"; /* Назва вказівника */
        public const string POINTER = "Довідники.Блокнот"; /* Повна назва вказівника */
        public const string FULLNAME = "Блокнот"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Код = "col_a1";
        public const string Назва = "col_a2";
        public const string ДатаЗапису = "col_a3";
        public const string Опис = "col_a4";
        public const string Лінк = "col_a5";
    }

    public class Блокнот_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public Блокнот_Objest() : base(Config.Kernel, "tab_a41", Блокнот_Const.TYPE,
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, Блокнот_Const.FULLNAME + " *");
            
                await Блокнот_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Код = base.FieldValue["col_a1"].ToString() ?? "";
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                ДатаЗапису = (base.FieldValue["col_a3"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a3"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Опис = base.FieldValue["col_a4"].ToString() ?? "";
                Лінк = base.FieldValue["col_a5"].ToString() ?? "";
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Код;
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_a3"] = ДатаЗапису;
            base.FieldValue["col_a4"] = Опис;
            base.FieldValue["col_a5"] = Лінк;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, Опис, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<Блокнот_Objest> Copy(bool copyTableParts = false)
        {
            Блокнот_Objest copy = new Блокнот_Objest()
            {
                Код = Код,
                Назва = Назва,
                ДатаЗапису = ДатаЗапису,
                Опис = Опис,
                Лінк = Лінк,
                
            };
            

            await copy.New();
            
            await Блокнот_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public Блокнот_Pointer GetDirectoryPointer()
        {
            return new Блокнот_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(Блокнот_Const.PRESENTATION_FIELDS);
        }
                
        public string Код { get; set; } = "";
        public string Назва { get; set; } = "";
        public DateTime ДатаЗапису { get; set; } = DateTime.MinValue;
        public string Опис { get; set; } = "";
        public string Лінк { get; set; } = "";
        
    }

    public class Блокнот_Pointer : DirectoryPointer
    {
        public Блокнот_Pointer(object? uid = null) : base(Config.Kernel, "tab_a41", Блокнот_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public Блокнот_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a41", Блокнот_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<Блокнот_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            Блокнот_Objest obj = new Блокнот_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public Блокнот_Pointer Copy()
        {
            return new Блокнот_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(Блокнот_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [Блокнот_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{Блокнот_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(Блокнот_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public Блокнот_Pointer GetEmptyPointer()
        {
            return new Блокнот_Pointer();
        }
    }
    
    public class Блокнот_Select : DirectorySelect
    {
        public Блокнот_Select() : base(Config.Kernel, "tab_a41") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new Блокнот_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public Блокнот_Pointer? Current { get; private set; }
        
        public async ValueTask<Блокнот_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new Блокнот_Pointer(pointer) : new Блокнот_Pointer();
        }
        
        public async ValueTask<List<Блокнот_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<Блокнот_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new Блокнот_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
    #region DIRECTORY "ЗбереженіЗвіти"
    public static class ЗбереженіЗвіти_Const
    {
        public const string TABLE = "tab_b04";
        public const string TYPE = "ЗбереженіЗвіти"; /* Назва вказівника */
        public const string POINTER = "Довідники.ЗбереженіЗвіти"; /* Повна назва вказівника */
        public const string FULLNAME = "Збережені звіти"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Додано = "col_a1";
        public const string Назва = "col_a2";
        public const string Користувач = "col_a3";
        public const string Опис = "col_a4";
        public const string Інформація = "col_a5";
        public const string Код = "col_a6";
    }

    public class ЗбереженіЗвіти_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЗбереженіЗвіти_Objest() : base(Config.Kernel, "tab_b04", ЗбереженіЗвіти_Const.TYPE,
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ], true)
        {
            
                //Табличні частини
                ЗвітСторінка_TablePart = new ЗбереженіЗвіти_ЗвітСторінка_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЗбереженіЗвіти_Const.FULLNAME + " *");
            
                await ЗбереженіЗвіти_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Додано = (base.FieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                Користувач = new Довідники.Користувачі_Pointer(base.FieldValue["col_a3"]);
                Опис = base.FieldValue["col_a4"].ToString() ?? "";
                Інформація = base.FieldValue["col_a5"].ToString() ?? "";
                Код = base.FieldValue["col_a6"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await ЗвітСторінка_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Додано;
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_a3"] = Користувач.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Опис;
            base.FieldValue["col_a5"] = Інформація;
            base.FieldValue["col_a6"] = Код;
            
            bool result = await BaseSave();
            if (result)
            {
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<ЗбереженіЗвіти_Objest> Copy(bool copyTableParts = false)
        {
            ЗбереженіЗвіти_Objest copy = new ЗбереженіЗвіти_Objest()
            {
                Додано = Додано,
                Назва = Назва,
                Користувач = Користувач,
                Опис = Опис,
                Інформація = Інформація,
                Код = Код,
                
            };
            
            if (copyTableParts)
            {
            
                //ЗвітСторінка - Таблична частина
                await ЗвітСторінка_TablePart.Read();
                copy.ЗвітСторінка_TablePart.Records = ЗвітСторінка_TablePart.Copy();
            
            }
            

            await copy.New();
            
            await ЗбереженіЗвіти_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete(["tab_b15", ]);
        }
        
        public ЗбереженіЗвіти_Pointer GetDirectoryPointer()
        {
            return new ЗбереженіЗвіти_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЗбереженіЗвіти_Const.PRESENTATION_FIELDS);
        }
                
        public DateTime Додано { get; set; } = DateTime.MinValue;
        public string Назва { get; set; } = "";
        public Довідники.Користувачі_Pointer Користувач { get; set; } = new Довідники.Користувачі_Pointer();
        public string Опис { get; set; } = "";
        public string Інформація { get; set; } = "";
        public string Код { get; set; } = "";
        
        //Табличні частини
        public ЗбереженіЗвіти_ЗвітСторінка_TablePart ЗвітСторінка_TablePart { get; private set; }
        
    }

    public class ЗбереженіЗвіти_Pointer : DirectoryPointer
    {
        public ЗбереженіЗвіти_Pointer(object? uid = null) : base(Config.Kernel, "tab_b04", ЗбереженіЗвіти_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЗбереженіЗвіти_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b04", ЗбереженіЗвіти_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<ЗбереженіЗвіти_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЗбереженіЗвіти_Objest obj = new ЗбереженіЗвіти_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public ЗбереженіЗвіти_Pointer Copy()
        {
            return new ЗбереженіЗвіти_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЗбереженіЗвіти_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЗбереженіЗвіти_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЗбереженіЗвіти_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЗбереженіЗвіти_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public ЗбереженіЗвіти_Pointer GetEmptyPointer()
        {
            return new ЗбереженіЗвіти_Pointer();
        }
    }
    
    public class ЗбереженіЗвіти_Select : DirectorySelect
    {
        public ЗбереженіЗвіти_Select() : base(Config.Kernel, "tab_b04") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЗбереженіЗвіти_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЗбереженіЗвіти_Pointer? Current { get; private set; }
        
        public async ValueTask<ЗбереженіЗвіти_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЗбереженіЗвіти_Pointer(pointer) : new ЗбереженіЗвіти_Pointer();
        }
        
        public async ValueTask<List<ЗбереженіЗвіти_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЗбереженіЗвіти_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new ЗбереженіЗвіти_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
    
    public class ЗбереженіЗвіти_ЗвітСторінка_TablePart : DirectoryTablePart
    {
        public ЗбереженіЗвіти_ЗвітСторінка_TablePart(ЗбереженіЗвіти_Objest owner) : base(Config.Kernel, "tab_b15",
             ["col_a2", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", "col_b3", "col_b4", "col_b5", "col_b6", "col_b7", "col_b8", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c8", "col_c9", "col_d1", "col_d2", "col_d3", "col_d4", "col_d5", "col_d6", "col_d7", "col_d8", "col_d9", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_b15";
        
        public const string А = "col_a2";
        public const string Б = "col_a5";
        public const string В = "col_a6";
        public const string Г = "col_a7";
        public const string Ґ = "col_a8";
        public const string Д = "col_a9";
        public const string Е = "col_b1";
        public const string Є = "col_b2";
        public const string Ж = "col_b3";
        public const string З = "col_b4";
        public const string И = "col_b5";
        public const string І = "col_b6";
        public const string Ї = "col_b7";
        public const string Й = "col_b8";
        public const string К = "col_b9";
        public const string Л = "col_c1";
        public const string М = "col_c2";
        public const string Н = "col_c3";
        public const string О = "col_c4";
        public const string П = "col_c5";
        public const string Р = "col_c6";
        public const string С = "col_c7";
        public const string Т = "col_c8";
        public const string У = "col_c9";
        public const string Ф = "col_d1";
        public const string Х = "col_d2";
        public const string Ц = "col_d3";
        public const string Ч = "col_d4";
        public const string Ш = "col_d5";
        public const string Щ = "col_d6";
        public const string Ь = "col_d7";
        public const string Ю = "col_d8";
        public const string Я = "col_d9";

        public ЗбереженіЗвіти_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    А = fieldValue["col_a2"].ToString() ?? "",
                    Б = fieldValue["col_a5"].ToString() ?? "",
                    В = fieldValue["col_a6"].ToString() ?? "",
                    Г = fieldValue["col_a7"].ToString() ?? "",
                    Ґ = fieldValue["col_a8"].ToString() ?? "",
                    Д = fieldValue["col_a9"].ToString() ?? "",
                    Е = fieldValue["col_b1"].ToString() ?? "",
                    Є = fieldValue["col_b2"].ToString() ?? "",
                    Ж = fieldValue["col_b3"].ToString() ?? "",
                    З = fieldValue["col_b4"].ToString() ?? "",
                    И = fieldValue["col_b5"].ToString() ?? "",
                    І = fieldValue["col_b6"].ToString() ?? "",
                    Ї = fieldValue["col_b7"].ToString() ?? "",
                    Й = fieldValue["col_b8"].ToString() ?? "",
                    К = fieldValue["col_b9"].ToString() ?? "",
                    Л = fieldValue["col_c1"].ToString() ?? "",
                    М = fieldValue["col_c2"].ToString() ?? "",
                    Н = fieldValue["col_c3"].ToString() ?? "",
                    О = fieldValue["col_c4"].ToString() ?? "",
                    П = fieldValue["col_c5"].ToString() ?? "",
                    Р = fieldValue["col_c6"].ToString() ?? "",
                    С = fieldValue["col_c7"].ToString() ?? "",
                    Т = fieldValue["col_c8"].ToString() ?? "",
                    У = fieldValue["col_c9"].ToString() ?? "",
                    Ф = fieldValue["col_d1"].ToString() ?? "",
                    Х = fieldValue["col_d2"].ToString() ?? "",
                    Ц = fieldValue["col_d3"].ToString() ?? "",
                    Ч = fieldValue["col_d4"].ToString() ?? "",
                    Ш = fieldValue["col_d5"].ToString() ?? "",
                    Щ = fieldValue["col_d6"].ToString() ?? "",
                    Ь = fieldValue["col_d7"].ToString() ?? "",
                    Ю = fieldValue["col_d8"].ToString() ?? "",
                    Я = fieldValue["col_d9"].ToString() ?? "",
                    
                };
                Records.Add(record);
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b04"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            
                
            await base.BaseBeginTransaction();

            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);
            
            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a2", record.А},
                    {"col_a5", record.Б},
                    {"col_a6", record.В},
                    {"col_a7", record.Г},
                    {"col_a8", record.Ґ},
                    {"col_a9", record.Д},
                    {"col_b1", record.Е},
                    {"col_b2", record.Є},
                    {"col_b3", record.Ж},
                    {"col_b4", record.З},
                    {"col_b5", record.И},
                    {"col_b6", record.І},
                    {"col_b7", record.Ї},
                    {"col_b8", record.Й},
                    {"col_b9", record.К},
                    {"col_c1", record.Л},
                    {"col_c2", record.М},
                    {"col_c3", record.Н},
                    {"col_c4", record.О},
                    {"col_c5", record.П},
                    {"col_c6", record.Р},
                    {"col_c7", record.С},
                    {"col_c8", record.Т},
                    {"col_c9", record.У},
                    {"col_d1", record.Ф},
                    {"col_d2", record.Х},
                    {"col_d3", record.Ц},
                    {"col_d4", record.Ч},
                    {"col_d5", record.Ш},
                    {"col_d6", record.Щ},
                    {"col_d7", record.Ь},
                    {"col_d8", record.Ю},
                    {"col_d9", record.Я},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
                
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in Records)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }
        
        public class Record : DirectoryTablePartRecord
        {
            public string А { get; set; } = "";
            public string Б { get; set; } = "";
            public string В { get; set; } = "";
            public string Г { get; set; } = "";
            public string Ґ { get; set; } = "";
            public string Д { get; set; } = "";
            public string Е { get; set; } = "";
            public string Є { get; set; } = "";
            public string Ж { get; set; } = "";
            public string З { get; set; } = "";
            public string И { get; set; } = "";
            public string І { get; set; } = "";
            public string Ї { get; set; } = "";
            public string Й { get; set; } = "";
            public string К { get; set; } = "";
            public string Л { get; set; } = "";
            public string М { get; set; } = "";
            public string Н { get; set; } = "";
            public string О { get; set; } = "";
            public string П { get; set; } = "";
            public string Р { get; set; } = "";
            public string С { get; set; } = "";
            public string Т { get; set; } = "";
            public string У { get; set; } = "";
            public string Ф { get; set; } = "";
            public string Х { get; set; } = "";
            public string Ц { get; set; } = "";
            public string Ч { get; set; } = "";
            public string Ш { get; set; } = "";
            public string Щ { get; set; } = "";
            public string Ь { get; set; } = "";
            public string Ю { get; set; } = "";
            public string Я { get; set; } = "";
            
        }
    }
      
   
    #endregion
    
    #region DIRECTORY "КасиККМ"
    public static class КасиККМ_Const
    {
        public const string TABLE = "tab_b52";
        public const string TYPE = "КасиККМ"; /* Назва вказівника */
        public const string POINTER = "Довідники.КасиККМ"; /* Повна назва вказівника */
        public const string FULLNAME = "Каси ККМ"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public readonly static string[] PRESENTATION_FIELDS = ["col_a2", ];
        
        public const string Назва = "col_a2";
        public const string Склад = "col_a3";
        public const string Тип = "col_a4";
        public const string Валюта = "col_a1";
    }

    public class КасиККМ_Objest : DirectoryObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public КасиККМ_Objest() : base(Config.Kernel, "tab_b52", КасиККМ_Const.TYPE,
             ["col_a2", "col_a3", "col_a4", "col_a1", ], true)
        {
            
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, КасиККМ_Const.FULLNAME + " *");
            
                await КасиККМ_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["col_a2"].ToString() ?? "";
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a3"]);
                Тип = (base.FieldValue["col_a4"] != DBNull.Value) ? (Перелічення.ТипККМ)base.FieldValue["col_a4"] : 0;
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a2"] = Назва;
            base.FieldValue["col_a3"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a4"] = (int)Тип;
            base.FieldValue["col_a1"] = Валюта.UnigueID.UGuid;
            
            bool result = await BaseSave();
            if (result)
            {
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<КасиККМ_Objest> Copy(bool copyTableParts = false)
        {
            КасиККМ_Objest copy = new КасиККМ_Objest()
            {
                Назва = Назва,
                Склад = Склад,
                Тип = Тип,
                Валюта = Валюта,
                
            };
            

            await copy.New();
            
            await КасиККМ_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await base.BaseDelete([]);
        }
        
        public КасиККМ_Pointer GetDirectoryPointer()
        {
            return new КасиККМ_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(КасиККМ_Const.PRESENTATION_FIELDS);
        }
                
        public string Назва { get; set; } = "";
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Перелічення.ТипККМ Тип { get; set; } = 0;
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        
    }

    public class КасиККМ_Pointer : DirectoryPointer
    {
        public КасиККМ_Pointer(object? uid = null) : base(Config.Kernel, "tab_b52", КасиККМ_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public КасиККМ_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b52", КасиККМ_Const.TYPE)
        {
            base.Init(uid, fields);
        }
        
        public async ValueTask<КасиККМ_Objest?> GetDirectoryObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            КасиККМ_Objest obj = new КасиККМ_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }

        public КасиККМ_Pointer Copy()
        {
            return new КасиККМ_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(КасиККМ_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [КасиККМ_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{КасиККМ_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(КасиККМ_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await base.BaseDeletionLabel(label);
        }
		
        public КасиККМ_Pointer GetEmptyPointer()
        {
            return new КасиККМ_Pointer();
        }
    }
    
    public class КасиККМ_Select : DirectorySelect
    {
        public КасиККМ_Select() : base(Config.Kernel, "tab_b52") { }        
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new КасиККМ_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public КасиККМ_Pointer? Current { get; private set; }
        
        public async ValueTask<КасиККМ_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new КасиККМ_Pointer(pointer) : new КасиККМ_Pointer();
        }
        
        public async ValueTask<List<КасиККМ_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<КасиККМ_Pointer> directoryPointerList = [];
            foreach (var directoryPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                directoryPointerList.Add(new КасиККМ_Pointer(directoryPointer.UnigueID, directoryPointer.Fields));
            return directoryPointerList;
        }
    }

    
   
    #endregion
    
}

namespace GeneratedCode.Перелічення
{
    
    #region ENUM "ТипиКонтактноїІнформації"
    public enum ТипиКонтактноїІнформації
    {
         Адрес = 1,
         Телефон = 2,
         ЕлектроннаПошта = 3,
         Сайт = 4,
         Skype = 5,
         Інше = 6
    }
    #endregion
    
    #region ENUM "ТипиНоменклатури"
    public enum ТипиНоменклатури
    {
         Товар = 1,
         Послуга = 2,
         Робота = 3,
         Тара = 4,
         Набір = 5
    }
    #endregion
    
    #region ENUM "ТипиСкладів"
    public enum ТипиСкладів
    {
         Гуртовий = 1,
         Роздрібний = 2
    }
    #endregion
    
    #region ENUM "СтатьФізичноїОсоби"
    public enum СтатьФізичноїОсоби
    {
         Чоловік = 1,
         Жінка = 2
    }
    #endregion
    
    #region ENUM "СтатусиДоговорівКонтрагентів"
    public enum СтатусиДоговорівКонтрагентів
    {
         НеУзгоджений = 1,
         Діє = 2,
         Закритий = 3
    }
    #endregion
    
    #region ENUM "ГосподарськіОперації"
    public enum ГосподарськіОперації
    {
         ЗамовленняВПостачальника = 1,
         ОплатаПостачальнику = 2,
         ОприбуткуванняТоварів = 3,
         ПереміщенняТоварів = 4,
         НадходженняПослуг = 5,
         ІншеНадходженняТоварів = 6,
         ІншіДоходи = 7,
         ІншіВитрати = 8,
         РеалізаціяКлієнту = 9,
         СписанняТоварів = 10,
         ПоступленняОплатиВідКлієнта = 11,
         ПоступленняКоштівЗІншоїКаси = 12,
         ПоступленняКоштівЗБанку = 13,
         ПоверненняКоштівВідПостачальника = 14,
         ПоверненняКоштівПостачальнику = 15,
         ЗдачаКоштівВБанк = 16,
         ПоверненняОплатиКлієнту = 17,
         ВидачаКоштівВІншуКасу = 18,
         ЗакупівляВПостачальника = 19,
         ПлануванняПоЗамовленнямПостачальнику = 20,
         ПлануванняПоЗамовленнямКлієнта = 21,
         ПоверненняТоварівВідКлієнта = 22,
         ПоверненняТоварівПостачальнику = 23,
         ВведенняЗалишків = 24,
         ВнутрішнєСпоживанняТоварів = 25
    }
    #endregion
    
    #region ENUM "ТипДоговорів"
    public enum ТипДоговорів
    {
         ЗПокупцями = 1,
         ЗПостачальниками = 2
    }
    #endregion
    
    #region ENUM "СпособиДоставки"
    public enum СпособиДоставки
    {
         Самовивіз = 1,
         ДоКлієнта = 2,
         СиламиПеревізника = 3,
         НашимиСиламиЗАдресиВідправника = 4,
         ПорученняЕкспедитору = 5
    }
    #endregion
    
    #region ENUM "ФормаОплати"
    public enum ФормаОплати
    {
         Готівка = 1,
         Безготівка = 2,
         Взаєморозрахунок = 3
    }
    #endregion
    
    #region ENUM "СтатусиЗамовленьКлієнтів"
    public enum СтатусиЗамовленьКлієнтів
    {
         НеУзгоджений = 1,
         ДоЗабезпечення = 2,
         ДоВідгрузки = 3,
         Закритий = 4
    }
    #endregion
    
    #region ENUM "СтатусиРеалізаціїТоварівТаПослуг"
    public enum СтатусиРеалізаціїТоварівТаПослуг
    {
         ДоОплати = 1,
         ВДорозі = 2,
         Відгружено = 3
    }
    #endregion
    
    #region ENUM "ВидиРухуКоштів"
    public enum ВидиРухуКоштів
    {
         ОплатаПраці = 1,
         ПодатокНаПрибуток = 2,
         ОплатаОборотнихАктивів = 3
    }
    #endregion
    
    #region ENUM "СтатусиПереміщенняТоварів"
    public enum СтатусиПереміщенняТоварів
    {
         Відгружено = 1,
         Принято = 2
    }
    #endregion
    
    #region ENUM "СтатусиЗамовленьПостачальникам"
    public enum СтатусиЗамовленьПостачальникам
    {
         НеУзгоджений = 1,
         Узгоджений = 2,
         Підтверджений = 3,
         Закритий = 4
    }
    #endregion
    
    #region ENUM "ТипДокументуПартіяТоварівКомпозит"
    public enum ТипДокументуПартіяТоварівКомпозит
    {
         ПоступленняТоварівТаПослуг = 1,
         ВведенняЗалишків = 2
    }
    #endregion
    
    #region ENUM "ТипЗапасів"
    public enum ТипЗапасів
    {
         Товар = 1,
         Послуга = 2
    }
    #endregion
    
    #region ENUM "ТипДокументуПродажіДокументКомпозит"
    public enum ТипДокументуПродажіДокументКомпозит
    {
         ЗамовленняКлієнта = 5,
         АктВиконанихРобіт = 6,
         РеалізаціяТоварівТаПослуг = 7
    }
    #endregion
    
    #region ENUM "МетодиСписанняПартій"
    public enum МетодиСписанняПартій
    {
         FIFO = 1,
         LIFO = 2
    }
    #endregion
    
    #region ENUM "ТипиКонтрагентів"
    public enum ТипиКонтрагентів
    {
         Постачальник = 1,
         Клієнт = 2
    }
    #endregion
    
    #region ENUM "НалаштуванняАдресногоЗберігання"
    public enum НалаштуванняАдресногоЗберігання
    {
         НеВикористовувати = 1,
         Комірка = 2
    }
    #endregion
    
    #region ENUM "ТипиСкладськихКомірок"
    public enum ТипиСкладськихКомірок
    {
         Приймання = 1,
         Відвантаження = 2,
         Зберігання = 3
    }
    #endregion
    
    #region ENUM "ПричиниЗакриттяЗамовленняКлієнта"
    public enum ПричиниЗакриттяЗамовленняКлієнта
    {
         Відмова = 1,
         Інше = 2
    }
    #endregion
    
    #region ENUM "ПричиниЗакриттяРахункуФактури"
    public enum ПричиниЗакриттяРахункуФактури
    {
         Відмова = 1,
         Інше = 2
    }
    #endregion
    
    #region ENUM "ПричиниЗакриттяЗамовленняПостачальнику"
    public enum ПричиниЗакриттяЗамовленняПостачальнику
    {
         Відмова = 1,
         Інше = 2
    }
    #endregion
    
    #region ENUM "ТипККМ"
    public enum ТипККМ
    {
         Фіскальний = 1
    }
    #endregion
    

    public static class ПсевдонімиПерелічення
    {
    
        #region ENUM "ТипиКонтактноїІнформації"
        public static string ТипиКонтактноїІнформації_Alias(ТипиКонтактноїІнформації value)
        {
            return value switch
            {
                ТипиКонтактноїІнформації.Адрес => "Адрес",
                ТипиКонтактноїІнформації.Телефон => "Телефон",
                ТипиКонтактноїІнформації.ЕлектроннаПошта => "Електронна пошта",
                ТипиКонтактноїІнформації.Сайт => "Сайт",
                ТипиКонтактноїІнформації.Skype => "Skype",
                ТипиКонтактноїІнформації.Інше => "Інше",
                _ => ""
            };
        }

        public static ТипиКонтактноїІнформації ТипиКонтактноїІнформації_FindByName(string name)
        {
            return name switch
            {
                "Адрес" => ТипиКонтактноїІнформації.Адрес,
                  "Телефон" => ТипиКонтактноїІнформації.Телефон,
                  "ЕлектроннаПошта" => ТипиКонтактноїІнформації.ЕлектроннаПошта,
                  "Електронна пошта" => ТипиКонтактноїІнформації.ЕлектроннаПошта,
                  "Сайт" => ТипиКонтактноїІнформації.Сайт,
                  "Skype" => ТипиКонтактноїІнформації.Skype,
                  "Інше" => ТипиКонтактноїІнформації.Інше,
                  _ => 0
            };
        }

        public static List<NameValue<ТипиКонтактноїІнформації>> ТипиКонтактноїІнформації_List()
        {
            return [
            new NameValue<ТипиКонтактноїІнформації>("Адрес", ТипиКонтактноїІнформації.Адрес),
            new NameValue<ТипиКонтактноїІнформації>("Телефон", ТипиКонтактноїІнформації.Телефон),
            new NameValue<ТипиКонтактноїІнформації>("Електронна пошта", ТипиКонтактноїІнформації.ЕлектроннаПошта),
            new NameValue<ТипиКонтактноїІнформації>("Сайт", ТипиКонтактноїІнформації.Сайт),
            new NameValue<ТипиКонтактноїІнформації>("Skype", ТипиКонтактноїІнформації.Skype),
            new NameValue<ТипиКонтактноїІнформації>("Інше", ТипиКонтактноїІнформації.Інше),
            ];
        }
        #endregion
    
        #region ENUM "ТипиНоменклатури"
        public static string ТипиНоменклатури_Alias(ТипиНоменклатури value)
        {
            return value switch
            {
                ТипиНоменклатури.Товар => "Товар",
                ТипиНоменклатури.Послуга => "Послуга",
                ТипиНоменклатури.Робота => "Робота",
                ТипиНоменклатури.Тара => "Тара",
                ТипиНоменклатури.Набір => "Набір",
                _ => ""
            };
        }

        public static ТипиНоменклатури ТипиНоменклатури_FindByName(string name)
        {
            return name switch
            {
                "Товар" => ТипиНоменклатури.Товар,
                  "Послуга" => ТипиНоменклатури.Послуга,
                  "Робота" => ТипиНоменклатури.Робота,
                  "Тара" => ТипиНоменклатури.Тара,
                  "Набір" => ТипиНоменклатури.Набір,
                  _ => 0
            };
        }

        public static List<NameValue<ТипиНоменклатури>> ТипиНоменклатури_List()
        {
            return [
            new NameValue<ТипиНоменклатури>("Товар", ТипиНоменклатури.Товар),
            new NameValue<ТипиНоменклатури>("Послуга", ТипиНоменклатури.Послуга),
            new NameValue<ТипиНоменклатури>("Робота", ТипиНоменклатури.Робота),
            new NameValue<ТипиНоменклатури>("Тара", ТипиНоменклатури.Тара),
            new NameValue<ТипиНоменклатури>("Набір", ТипиНоменклатури.Набір),
            ];
        }
        #endregion
    
        #region ENUM "ТипиСкладів"
        public static string ТипиСкладів_Alias(ТипиСкладів value)
        {
            return value switch
            {
                ТипиСкладів.Гуртовий => "Гуртовий",
                ТипиСкладів.Роздрібний => "Роздрібний",
                _ => ""
            };
        }

        public static ТипиСкладів ТипиСкладів_FindByName(string name)
        {
            return name switch
            {
                "Гуртовий" => ТипиСкладів.Гуртовий,
                  "Роздрібний" => ТипиСкладів.Роздрібний,
                  _ => 0
            };
        }

        public static List<NameValue<ТипиСкладів>> ТипиСкладів_List()
        {
            return [
            new NameValue<ТипиСкладів>("Гуртовий", ТипиСкладів.Гуртовий),
            new NameValue<ТипиСкладів>("Роздрібний", ТипиСкладів.Роздрібний),
            ];
        }
        #endregion
    
        #region ENUM "СтатьФізичноїОсоби"
        public static string СтатьФізичноїОсоби_Alias(СтатьФізичноїОсоби value)
        {
            return value switch
            {
                СтатьФізичноїОсоби.Чоловік => "Чоловік",
                СтатьФізичноїОсоби.Жінка => "Жінка",
                _ => ""
            };
        }

        public static СтатьФізичноїОсоби СтатьФізичноїОсоби_FindByName(string name)
        {
            return name switch
            {
                "Чоловік" => СтатьФізичноїОсоби.Чоловік,
                  "Жінка" => СтатьФізичноїОсоби.Жінка,
                  _ => 0
            };
        }

        public static List<NameValue<СтатьФізичноїОсоби>> СтатьФізичноїОсоби_List()
        {
            return [
            new NameValue<СтатьФізичноїОсоби>("Чоловік", СтатьФізичноїОсоби.Чоловік),
            new NameValue<СтатьФізичноїОсоби>("Жінка", СтатьФізичноїОсоби.Жінка),
            ];
        }
        #endregion
    
        #region ENUM "СтатусиДоговорівКонтрагентів"
        public static string СтатусиДоговорівКонтрагентів_Alias(СтатусиДоговорівКонтрагентів value)
        {
            return value switch
            {
                СтатусиДоговорівКонтрагентів.НеУзгоджений => "Не узгоджений",
                СтатусиДоговорівКонтрагентів.Діє => "Діє",
                СтатусиДоговорівКонтрагентів.Закритий => "Закритий",
                _ => ""
            };
        }

        public static СтатусиДоговорівКонтрагентів СтатусиДоговорівКонтрагентів_FindByName(string name)
        {
            return name switch
            {
                "НеУзгоджений" => СтатусиДоговорівКонтрагентів.НеУзгоджений,
                  "Не узгоджений" => СтатусиДоговорівКонтрагентів.НеУзгоджений,
                  "Діє" => СтатусиДоговорівКонтрагентів.Діє,
                  "Закритий" => СтатусиДоговорівКонтрагентів.Закритий,
                  _ => 0
            };
        }

        public static List<NameValue<СтатусиДоговорівКонтрагентів>> СтатусиДоговорівКонтрагентів_List()
        {
            return [
            new NameValue<СтатусиДоговорівКонтрагентів>("Не узгоджений", СтатусиДоговорівКонтрагентів.НеУзгоджений),
            new NameValue<СтатусиДоговорівКонтрагентів>("Діє", СтатусиДоговорівКонтрагентів.Діє),
            new NameValue<СтатусиДоговорівКонтрагентів>("Закритий", СтатусиДоговорівКонтрагентів.Закритий),
            ];
        }
        #endregion
    
        #region ENUM "ГосподарськіОперації"
        public static string ГосподарськіОперації_Alias(ГосподарськіОперації value)
        {
            return value switch
            {
                ГосподарськіОперації.ЗамовленняВПостачальника => "Замовлення в постачальника",
                ГосподарськіОперації.ОплатаПостачальнику => "Оплата постачальнику",
                ГосподарськіОперації.ОприбуткуванняТоварів => "Оприбуткування товарів",
                ГосподарськіОперації.ПереміщенняТоварів => "Переміщення товарів",
                ГосподарськіОперації.НадходженняПослуг => "Надходження послуг",
                ГосподарськіОперації.ІншеНадходженняТоварів => "Інше надходження товарів",
                ГосподарськіОперації.ІншіДоходи => "Інші доходи",
                ГосподарськіОперації.ІншіВитрати => "Інші витрати",
                ГосподарськіОперації.РеалізаціяКлієнту => "Реалізація клієнту",
                ГосподарськіОперації.СписанняТоварів => "Списання товарів",
                ГосподарськіОперації.ПоступленняОплатиВідКлієнта => "Поступлення оплати від клієнта",
                ГосподарськіОперації.ПоступленняКоштівЗІншоїКаси => "Поступлення коштів з іншої каси",
                ГосподарськіОперації.ПоступленняКоштівЗБанку => "Поступлення коштів з банку",
                ГосподарськіОперації.ПоверненняКоштівВідПостачальника => "Повернення коштів від постачальника",
                ГосподарськіОперації.ПоверненняКоштівПостачальнику => "Повернення коштів постачальнику",
                ГосподарськіОперації.ЗдачаКоштівВБанк => "Здача коштів в банк",
                ГосподарськіОперації.ПоверненняОплатиКлієнту => "Повернення оплати клієнту",
                ГосподарськіОперації.ВидачаКоштівВІншуКасу => "Видача коштів в іншу касу",
                ГосподарськіОперації.ЗакупівляВПостачальника => "Закупівля в постачальника",
                ГосподарськіОперації.ПлануванняПоЗамовленнямПостачальнику => "Планування по замовленням постачальнику",
                ГосподарськіОперації.ПлануванняПоЗамовленнямКлієнта => "Планування по замовленням клієнта",
                ГосподарськіОперації.ПоверненняТоварівВідКлієнта => "Повернення товарів від клієнта",
                ГосподарськіОперації.ПоверненняТоварівПостачальнику => "Повернення товарів постачальнику",
                ГосподарськіОперації.ВведенняЗалишків => "Введення залишків",
                ГосподарськіОперації.ВнутрішнєСпоживанняТоварів => "Внутрішнє споживання товарів",
                _ => ""
            };
        }

        public static ГосподарськіОперації ГосподарськіОперації_FindByName(string name)
        {
            return name switch
            {
                "ЗамовленняВПостачальника" => ГосподарськіОперації.ЗамовленняВПостачальника,
                  "Замовлення в постачальника" => ГосподарськіОперації.ЗамовленняВПостачальника,
                  "ОплатаПостачальнику" => ГосподарськіОперації.ОплатаПостачальнику,
                  "Оплата постачальнику" => ГосподарськіОперації.ОплатаПостачальнику,
                  "ОприбуткуванняТоварів" => ГосподарськіОперації.ОприбуткуванняТоварів,
                  "Оприбуткування товарів" => ГосподарськіОперації.ОприбуткуванняТоварів,
                  "ПереміщенняТоварів" => ГосподарськіОперації.ПереміщенняТоварів,
                  "Переміщення товарів" => ГосподарськіОперації.ПереміщенняТоварів,
                  "НадходженняПослуг" => ГосподарськіОперації.НадходженняПослуг,
                  "Надходження послуг" => ГосподарськіОперації.НадходженняПослуг,
                  "ІншеНадходженняТоварів" => ГосподарськіОперації.ІншеНадходженняТоварів,
                  "Інше надходження товарів" => ГосподарськіОперації.ІншеНадходженняТоварів,
                  "ІншіДоходи" => ГосподарськіОперації.ІншіДоходи,
                  "Інші доходи" => ГосподарськіОперації.ІншіДоходи,
                  "ІншіВитрати" => ГосподарськіОперації.ІншіВитрати,
                  "Інші витрати" => ГосподарськіОперації.ІншіВитрати,
                  "РеалізаціяКлієнту" => ГосподарськіОперації.РеалізаціяКлієнту,
                  "Реалізація клієнту" => ГосподарськіОперації.РеалізаціяКлієнту,
                  "СписанняТоварів" => ГосподарськіОперації.СписанняТоварів,
                  "Списання товарів" => ГосподарськіОперації.СписанняТоварів,
                  "ПоступленняОплатиВідКлієнта" => ГосподарськіОперації.ПоступленняОплатиВідКлієнта,
                  "Поступлення оплати від клієнта" => ГосподарськіОперації.ПоступленняОплатиВідКлієнта,
                  "ПоступленняКоштівЗІншоїКаси" => ГосподарськіОперації.ПоступленняКоштівЗІншоїКаси,
                  "Поступлення коштів з іншої каси" => ГосподарськіОперації.ПоступленняКоштівЗІншоїКаси,
                  "ПоступленняКоштівЗБанку" => ГосподарськіОперації.ПоступленняКоштівЗБанку,
                  "Поступлення коштів з банку" => ГосподарськіОперації.ПоступленняКоштівЗБанку,
                  "ПоверненняКоштівВідПостачальника" => ГосподарськіОперації.ПоверненняКоштівВідПостачальника,
                  "Повернення коштів від постачальника" => ГосподарськіОперації.ПоверненняКоштівВідПостачальника,
                  "ПоверненняКоштівПостачальнику" => ГосподарськіОперації.ПоверненняКоштівПостачальнику,
                  "Повернення коштів постачальнику" => ГосподарськіОперації.ПоверненняКоштівПостачальнику,
                  "ЗдачаКоштівВБанк" => ГосподарськіОперації.ЗдачаКоштівВБанк,
                  "Здача коштів в банк" => ГосподарськіОперації.ЗдачаКоштівВБанк,
                  "ПоверненняОплатиКлієнту" => ГосподарськіОперації.ПоверненняОплатиКлієнту,
                  "Повернення оплати клієнту" => ГосподарськіОперації.ПоверненняОплатиКлієнту,
                  "ВидачаКоштівВІншуКасу" => ГосподарськіОперації.ВидачаКоштівВІншуКасу,
                  "Видача коштів в іншу касу" => ГосподарськіОперації.ВидачаКоштівВІншуКасу,
                  "ЗакупівляВПостачальника" => ГосподарськіОперації.ЗакупівляВПостачальника,
                  "Закупівля в постачальника" => ГосподарськіОперації.ЗакупівляВПостачальника,
                  "ПлануванняПоЗамовленнямПостачальнику" => ГосподарськіОперації.ПлануванняПоЗамовленнямПостачальнику,
                  "Планування по замовленням постачальнику" => ГосподарськіОперації.ПлануванняПоЗамовленнямПостачальнику,
                  "ПлануванняПоЗамовленнямКлієнта" => ГосподарськіОперації.ПлануванняПоЗамовленнямКлієнта,
                  "Планування по замовленням клієнта" => ГосподарськіОперації.ПлануванняПоЗамовленнямКлієнта,
                  "ПоверненняТоварівВідКлієнта" => ГосподарськіОперації.ПоверненняТоварівВідКлієнта,
                  "Повернення товарів від клієнта" => ГосподарськіОперації.ПоверненняТоварівВідКлієнта,
                  "ПоверненняТоварівПостачальнику" => ГосподарськіОперації.ПоверненняТоварівПостачальнику,
                  "Повернення товарів постачальнику" => ГосподарськіОперації.ПоверненняТоварівПостачальнику,
                  "ВведенняЗалишків" => ГосподарськіОперації.ВведенняЗалишків,
                  "Введення залишків" => ГосподарськіОперації.ВведенняЗалишків,
                  "ВнутрішнєСпоживанняТоварів" => ГосподарськіОперації.ВнутрішнєСпоживанняТоварів,
                  "Внутрішнє споживання товарів" => ГосподарськіОперації.ВнутрішнєСпоживанняТоварів,
                  _ => 0
            };
        }

        public static List<NameValue<ГосподарськіОперації>> ГосподарськіОперації_List()
        {
            return [
            new NameValue<ГосподарськіОперації>("Замовлення в постачальника", ГосподарськіОперації.ЗамовленняВПостачальника),
            new NameValue<ГосподарськіОперації>("Оплата постачальнику", ГосподарськіОперації.ОплатаПостачальнику),
            new NameValue<ГосподарськіОперації>("Оприбуткування товарів", ГосподарськіОперації.ОприбуткуванняТоварів),
            new NameValue<ГосподарськіОперації>("Переміщення товарів", ГосподарськіОперації.ПереміщенняТоварів),
            new NameValue<ГосподарськіОперації>("Надходження послуг", ГосподарськіОперації.НадходженняПослуг),
            new NameValue<ГосподарськіОперації>("Інше надходження товарів", ГосподарськіОперації.ІншеНадходженняТоварів),
            new NameValue<ГосподарськіОперації>("Інші доходи", ГосподарськіОперації.ІншіДоходи),
            new NameValue<ГосподарськіОперації>("Інші витрати", ГосподарськіОперації.ІншіВитрати),
            new NameValue<ГосподарськіОперації>("Реалізація клієнту", ГосподарськіОперації.РеалізаціяКлієнту),
            new NameValue<ГосподарськіОперації>("Списання товарів", ГосподарськіОперації.СписанняТоварів),
            new NameValue<ГосподарськіОперації>("Поступлення оплати від клієнта", ГосподарськіОперації.ПоступленняОплатиВідКлієнта),
            new NameValue<ГосподарськіОперації>("Поступлення коштів з іншої каси", ГосподарськіОперації.ПоступленняКоштівЗІншоїКаси),
            new NameValue<ГосподарськіОперації>("Поступлення коштів з банку", ГосподарськіОперації.ПоступленняКоштівЗБанку),
            new NameValue<ГосподарськіОперації>("Повернення коштів від постачальника", ГосподарськіОперації.ПоверненняКоштівВідПостачальника),
            new NameValue<ГосподарськіОперації>("Повернення коштів постачальнику", ГосподарськіОперації.ПоверненняКоштівПостачальнику),
            new NameValue<ГосподарськіОперації>("Здача коштів в банк", ГосподарськіОперації.ЗдачаКоштівВБанк),
            new NameValue<ГосподарськіОперації>("Повернення оплати клієнту", ГосподарськіОперації.ПоверненняОплатиКлієнту),
            new NameValue<ГосподарськіОперації>("Видача коштів в іншу касу", ГосподарськіОперації.ВидачаКоштівВІншуКасу),
            new NameValue<ГосподарськіОперації>("Закупівля в постачальника", ГосподарськіОперації.ЗакупівляВПостачальника),
            new NameValue<ГосподарськіОперації>("Планування по замовленням постачальнику", ГосподарськіОперації.ПлануванняПоЗамовленнямПостачальнику),
            new NameValue<ГосподарськіОперації>("Планування по замовленням клієнта", ГосподарськіОперації.ПлануванняПоЗамовленнямКлієнта),
            new NameValue<ГосподарськіОперації>("Повернення товарів від клієнта", ГосподарськіОперації.ПоверненняТоварівВідКлієнта),
            new NameValue<ГосподарськіОперації>("Повернення товарів постачальнику", ГосподарськіОперації.ПоверненняТоварівПостачальнику),
            new NameValue<ГосподарськіОперації>("Введення залишків", ГосподарськіОперації.ВведенняЗалишків),
            new NameValue<ГосподарськіОперації>("Внутрішнє споживання товарів", ГосподарськіОперації.ВнутрішнєСпоживанняТоварів),
            ];
        }
        #endregion
    
        #region ENUM "ТипДоговорів"
        public static string ТипДоговорів_Alias(ТипДоговорів value)
        {
            return value switch
            {
                ТипДоговорів.ЗПокупцями => "З покупцями",
                ТипДоговорів.ЗПостачальниками => "З постачальниками",
                _ => ""
            };
        }

        public static ТипДоговорів ТипДоговорів_FindByName(string name)
        {
            return name switch
            {
                "ЗПокупцями" => ТипДоговорів.ЗПокупцями,
                  "З покупцями" => ТипДоговорів.ЗПокупцями,
                  "ЗПостачальниками" => ТипДоговорів.ЗПостачальниками,
                  "З постачальниками" => ТипДоговорів.ЗПостачальниками,
                  _ => 0
            };
        }

        public static List<NameValue<ТипДоговорів>> ТипДоговорів_List()
        {
            return [
            new NameValue<ТипДоговорів>("З покупцями", ТипДоговорів.ЗПокупцями),
            new NameValue<ТипДоговорів>("З постачальниками", ТипДоговорів.ЗПостачальниками),
            ];
        }
        #endregion
    
        #region ENUM "СпособиДоставки"
        public static string СпособиДоставки_Alias(СпособиДоставки value)
        {
            return value switch
            {
                СпособиДоставки.Самовивіз => "Самовивіз",
                СпособиДоставки.ДоКлієнта => "До клієнта",
                СпособиДоставки.СиламиПеревізника => "Силами перевізника",
                СпособиДоставки.НашимиСиламиЗАдресиВідправника => "Нашими силами",
                СпособиДоставки.ПорученняЕкспедитору => "Поручення експедитору",
                _ => ""
            };
        }

        public static СпособиДоставки СпособиДоставки_FindByName(string name)
        {
            return name switch
            {
                "Самовивіз" => СпособиДоставки.Самовивіз,
                  "ДоКлієнта" => СпособиДоставки.ДоКлієнта,
                  "До клієнта" => СпособиДоставки.ДоКлієнта,
                  "СиламиПеревізника" => СпособиДоставки.СиламиПеревізника,
                  "Силами перевізника" => СпособиДоставки.СиламиПеревізника,
                  "НашимиСиламиЗАдресиВідправника" => СпособиДоставки.НашимиСиламиЗАдресиВідправника,
                  "Нашими силами" => СпособиДоставки.НашимиСиламиЗАдресиВідправника,
                  "ПорученняЕкспедитору" => СпособиДоставки.ПорученняЕкспедитору,
                  "Поручення експедитору" => СпособиДоставки.ПорученняЕкспедитору,
                  _ => 0
            };
        }

        public static List<NameValue<СпособиДоставки>> СпособиДоставки_List()
        {
            return [
            new NameValue<СпособиДоставки>("Самовивіз", СпособиДоставки.Самовивіз),
            new NameValue<СпособиДоставки>("До клієнта", СпособиДоставки.ДоКлієнта),
            new NameValue<СпособиДоставки>("Силами перевізника", СпособиДоставки.СиламиПеревізника),
            new NameValue<СпособиДоставки>("Нашими силами", СпособиДоставки.НашимиСиламиЗАдресиВідправника),
            new NameValue<СпособиДоставки>("Поручення експедитору", СпособиДоставки.ПорученняЕкспедитору),
            ];
        }
        #endregion
    
        #region ENUM "ФормаОплати"
        public static string ФормаОплати_Alias(ФормаОплати value)
        {
            return value switch
            {
                ФормаОплати.Готівка => "Готівка",
                ФормаОплати.Безготівка => "Безготівка",
                ФормаОплати.Взаєморозрахунок => "Взаєморозрахунок",
                _ => ""
            };
        }

        public static ФормаОплати ФормаОплати_FindByName(string name)
        {
            return name switch
            {
                "Готівка" => ФормаОплати.Готівка,
                  "Безготівка" => ФормаОплати.Безготівка,
                  "Взаєморозрахунок" => ФормаОплати.Взаєморозрахунок,
                  _ => 0
            };
        }

        public static List<NameValue<ФормаОплати>> ФормаОплати_List()
        {
            return [
            new NameValue<ФормаОплати>("Готівка", ФормаОплати.Готівка),
            new NameValue<ФормаОплати>("Безготівка", ФормаОплати.Безготівка),
            new NameValue<ФормаОплати>("Взаєморозрахунок", ФормаОплати.Взаєморозрахунок),
            ];
        }
        #endregion
    
        #region ENUM "СтатусиЗамовленьКлієнтів"
        public static string СтатусиЗамовленьКлієнтів_Alias(СтатусиЗамовленьКлієнтів value)
        {
            return value switch
            {
                СтатусиЗамовленьКлієнтів.НеУзгоджений => "НеУзгоджений",
                СтатусиЗамовленьКлієнтів.ДоЗабезпечення => "ДоЗабезпечення",
                СтатусиЗамовленьКлієнтів.ДоВідгрузки => "ДоВідгрузки",
                СтатусиЗамовленьКлієнтів.Закритий => "Закритий",
                _ => ""
            };
        }

        public static СтатусиЗамовленьКлієнтів СтатусиЗамовленьКлієнтів_FindByName(string name)
        {
            return name switch
            {
                "НеУзгоджений" => СтатусиЗамовленьКлієнтів.НеУзгоджений,
                  "ДоЗабезпечення" => СтатусиЗамовленьКлієнтів.ДоЗабезпечення,
                  "ДоВідгрузки" => СтатусиЗамовленьКлієнтів.ДоВідгрузки,
                  "Закритий" => СтатусиЗамовленьКлієнтів.Закритий,
                  _ => 0
            };
        }

        public static List<NameValue<СтатусиЗамовленьКлієнтів>> СтатусиЗамовленьКлієнтів_List()
        {
            return [
            new NameValue<СтатусиЗамовленьКлієнтів>("НеУзгоджений", СтатусиЗамовленьКлієнтів.НеУзгоджений),
            new NameValue<СтатусиЗамовленьКлієнтів>("ДоЗабезпечення", СтатусиЗамовленьКлієнтів.ДоЗабезпечення),
            new NameValue<СтатусиЗамовленьКлієнтів>("ДоВідгрузки", СтатусиЗамовленьКлієнтів.ДоВідгрузки),
            new NameValue<СтатусиЗамовленьКлієнтів>("Закритий", СтатусиЗамовленьКлієнтів.Закритий),
            ];
        }
        #endregion
    
        #region ENUM "СтатусиРеалізаціїТоварівТаПослуг"
        public static string СтатусиРеалізаціїТоварівТаПослуг_Alias(СтатусиРеалізаціїТоварівТаПослуг value)
        {
            return value switch
            {
                СтатусиРеалізаціїТоварівТаПослуг.ДоОплати => "ДоОплати",
                СтатусиРеалізаціїТоварівТаПослуг.ВДорозі => "ВДорозі",
                СтатусиРеалізаціїТоварівТаПослуг.Відгружено => "Відгружено",
                _ => ""
            };
        }

        public static СтатусиРеалізаціїТоварівТаПослуг СтатусиРеалізаціїТоварівТаПослуг_FindByName(string name)
        {
            return name switch
            {
                "ДоОплати" => СтатусиРеалізаціїТоварівТаПослуг.ДоОплати,
                  "ВДорозі" => СтатусиРеалізаціїТоварівТаПослуг.ВДорозі,
                  "Відгружено" => СтатусиРеалізаціїТоварівТаПослуг.Відгружено,
                  _ => 0
            };
        }

        public static List<NameValue<СтатусиРеалізаціїТоварівТаПослуг>> СтатусиРеалізаціїТоварівТаПослуг_List()
        {
            return [
            new NameValue<СтатусиРеалізаціїТоварівТаПослуг>("ДоОплати", СтатусиРеалізаціїТоварівТаПослуг.ДоОплати),
            new NameValue<СтатусиРеалізаціїТоварівТаПослуг>("ВДорозі", СтатусиРеалізаціїТоварівТаПослуг.ВДорозі),
            new NameValue<СтатусиРеалізаціїТоварівТаПослуг>("Відгружено", СтатусиРеалізаціїТоварівТаПослуг.Відгружено),
            ];
        }
        #endregion
    
        #region ENUM "ВидиРухуКоштів"
        public static string ВидиРухуКоштів_Alias(ВидиРухуКоштів value)
        {
            return value switch
            {
                ВидиРухуКоштів.ОплатаПраці => "Оплата праці",
                ВидиРухуКоштів.ПодатокНаПрибуток => "Податок на прибуток",
                ВидиРухуКоштів.ОплатаОборотнихАктивів => "Оплата оборотних активів",
                _ => ""
            };
        }

        public static ВидиРухуКоштів ВидиРухуКоштів_FindByName(string name)
        {
            return name switch
            {
                "ОплатаПраці" => ВидиРухуКоштів.ОплатаПраці,
                  "Оплата праці" => ВидиРухуКоштів.ОплатаПраці,
                  "ПодатокНаПрибуток" => ВидиРухуКоштів.ПодатокНаПрибуток,
                  "Податок на прибуток" => ВидиРухуКоштів.ПодатокНаПрибуток,
                  "ОплатаОборотнихАктивів" => ВидиРухуКоштів.ОплатаОборотнихАктивів,
                  "Оплата оборотних активів" => ВидиРухуКоштів.ОплатаОборотнихАктивів,
                  _ => 0
            };
        }

        public static List<NameValue<ВидиРухуКоштів>> ВидиРухуКоштів_List()
        {
            return [
            new NameValue<ВидиРухуКоштів>("Оплата праці", ВидиРухуКоштів.ОплатаПраці),
            new NameValue<ВидиРухуКоштів>("Податок на прибуток", ВидиРухуКоштів.ПодатокНаПрибуток),
            new NameValue<ВидиРухуКоштів>("Оплата оборотних активів", ВидиРухуКоштів.ОплатаОборотнихАктивів),
            ];
        }
        #endregion
    
        #region ENUM "СтатусиПереміщенняТоварів"
        public static string СтатусиПереміщенняТоварів_Alias(СтатусиПереміщенняТоварів value)
        {
            return value switch
            {
                СтатусиПереміщенняТоварів.Відгружено => "Відгружено",
                СтатусиПереміщенняТоварів.Принято => "Принято",
                _ => ""
            };
        }

        public static СтатусиПереміщенняТоварів СтатусиПереміщенняТоварів_FindByName(string name)
        {
            return name switch
            {
                "Відгружено" => СтатусиПереміщенняТоварів.Відгружено,
                  "Принято" => СтатусиПереміщенняТоварів.Принято,
                  _ => 0
            };
        }

        public static List<NameValue<СтатусиПереміщенняТоварів>> СтатусиПереміщенняТоварів_List()
        {
            return [
            new NameValue<СтатусиПереміщенняТоварів>("Відгружено", СтатусиПереміщенняТоварів.Відгружено),
            new NameValue<СтатусиПереміщенняТоварів>("Принято", СтатусиПереміщенняТоварів.Принято),
            ];
        }
        #endregion
    
        #region ENUM "СтатусиЗамовленьПостачальникам"
        public static string СтатусиЗамовленьПостачальникам_Alias(СтатусиЗамовленьПостачальникам value)
        {
            return value switch
            {
                СтатусиЗамовленьПостачальникам.НеУзгоджений => "НеУзгоджений",
                СтатусиЗамовленьПостачальникам.Узгоджений => "Узгоджений",
                СтатусиЗамовленьПостачальникам.Підтверджений => "Підтверджений",
                СтатусиЗамовленьПостачальникам.Закритий => "Закритий",
                _ => ""
            };
        }

        public static СтатусиЗамовленьПостачальникам СтатусиЗамовленьПостачальникам_FindByName(string name)
        {
            return name switch
            {
                "НеУзгоджений" => СтатусиЗамовленьПостачальникам.НеУзгоджений,
                  "Узгоджений" => СтатусиЗамовленьПостачальникам.Узгоджений,
                  "Підтверджений" => СтатусиЗамовленьПостачальникам.Підтверджений,
                  "Закритий" => СтатусиЗамовленьПостачальникам.Закритий,
                  _ => 0
            };
        }

        public static List<NameValue<СтатусиЗамовленьПостачальникам>> СтатусиЗамовленьПостачальникам_List()
        {
            return [
            new NameValue<СтатусиЗамовленьПостачальникам>("НеУзгоджений", СтатусиЗамовленьПостачальникам.НеУзгоджений),
            new NameValue<СтатусиЗамовленьПостачальникам>("Узгоджений", СтатусиЗамовленьПостачальникам.Узгоджений),
            new NameValue<СтатусиЗамовленьПостачальникам>("Підтверджений", СтатусиЗамовленьПостачальникам.Підтверджений),
            new NameValue<СтатусиЗамовленьПостачальникам>("Закритий", СтатусиЗамовленьПостачальникам.Закритий),
            ];
        }
        #endregion
    
        #region ENUM "ТипДокументуПартіяТоварівКомпозит"
        public static string ТипДокументуПартіяТоварівКомпозит_Alias(ТипДокументуПартіяТоварівКомпозит value)
        {
            return value switch
            {
                ТипДокументуПартіяТоварівКомпозит.ПоступленняТоварівТаПослуг => "Поступлення товарів та послуг",
                ТипДокументуПартіяТоварівКомпозит.ВведенняЗалишків => "Введення залишків",
                _ => ""
            };
        }

        public static ТипДокументуПартіяТоварівКомпозит ТипДокументуПартіяТоварівКомпозит_FindByName(string name)
        {
            return name switch
            {
                "ПоступленняТоварівТаПослуг" => ТипДокументуПартіяТоварівКомпозит.ПоступленняТоварівТаПослуг,
                  "Поступлення товарів та послуг" => ТипДокументуПартіяТоварівКомпозит.ПоступленняТоварівТаПослуг,
                  "ВведенняЗалишків" => ТипДокументуПартіяТоварівКомпозит.ВведенняЗалишків,
                  "Введення залишків" => ТипДокументуПартіяТоварівКомпозит.ВведенняЗалишків,
                  _ => 0
            };
        }

        public static List<NameValue<ТипДокументуПартіяТоварівКомпозит>> ТипДокументуПартіяТоварівКомпозит_List()
        {
            return [
            new NameValue<ТипДокументуПартіяТоварівКомпозит>("Поступлення товарів та послуг", ТипДокументуПартіяТоварівКомпозит.ПоступленняТоварівТаПослуг),
            new NameValue<ТипДокументуПартіяТоварівКомпозит>("Введення залишків", ТипДокументуПартіяТоварівКомпозит.ВведенняЗалишків),
            ];
        }
        #endregion
    
        #region ENUM "ТипЗапасів"
        public static string ТипЗапасів_Alias(ТипЗапасів value)
        {
            return value switch
            {
                ТипЗапасів.Товар => "Товар",
                ТипЗапасів.Послуга => "Послуга",
                _ => ""
            };
        }

        public static ТипЗапасів ТипЗапасів_FindByName(string name)
        {
            return name switch
            {
                "Товар" => ТипЗапасів.Товар,
                  "Послуга" => ТипЗапасів.Послуга,
                  _ => 0
            };
        }

        public static List<NameValue<ТипЗапасів>> ТипЗапасів_List()
        {
            return [
            new NameValue<ТипЗапасів>("Товар", ТипЗапасів.Товар),
            new NameValue<ТипЗапасів>("Послуга", ТипЗапасів.Послуга),
            ];
        }
        #endregion
    
        #region ENUM "ТипДокументуПродажіДокументКомпозит"
        public static string ТипДокументуПродажіДокументКомпозит_Alias(ТипДокументуПродажіДокументКомпозит value)
        {
            return value switch
            {
                ТипДокументуПродажіДокументКомпозит.ЗамовленняКлієнта => "ЗамовленняКлієнта",
                ТипДокументуПродажіДокументКомпозит.АктВиконанихРобіт => "АктВиконанихРобіт",
                ТипДокументуПродажіДокументКомпозит.РеалізаціяТоварівТаПослуг => "РеалізаціяТоварівТаПослуг",
                _ => ""
            };
        }

        public static ТипДокументуПродажіДокументКомпозит ТипДокументуПродажіДокументКомпозит_FindByName(string name)
        {
            return name switch
            {
                "ЗамовленняКлієнта" => ТипДокументуПродажіДокументКомпозит.ЗамовленняКлієнта,
                  "АктВиконанихРобіт" => ТипДокументуПродажіДокументКомпозит.АктВиконанихРобіт,
                  "РеалізаціяТоварівТаПослуг" => ТипДокументуПродажіДокументКомпозит.РеалізаціяТоварівТаПослуг,
                  _ => 0
            };
        }

        public static List<NameValue<ТипДокументуПродажіДокументКомпозит>> ТипДокументуПродажіДокументКомпозит_List()
        {
            return [
            new NameValue<ТипДокументуПродажіДокументКомпозит>("ЗамовленняКлієнта", ТипДокументуПродажіДокументКомпозит.ЗамовленняКлієнта),
            new NameValue<ТипДокументуПродажіДокументКомпозит>("АктВиконанихРобіт", ТипДокументуПродажіДокументКомпозит.АктВиконанихРобіт),
            new NameValue<ТипДокументуПродажіДокументКомпозит>("РеалізаціяТоварівТаПослуг", ТипДокументуПродажіДокументКомпозит.РеалізаціяТоварівТаПослуг),
            ];
        }
        #endregion
    
        #region ENUM "МетодиСписанняПартій"
        public static string МетодиСписанняПартій_Alias(МетодиСписанняПартій value)
        {
            return value switch
            {
                МетодиСписанняПартій.FIFO => "FIFO (спочатку списуються партії які прийшли першими)",
                МетодиСписанняПартій.LIFO => "LIFO (спочатку списуються партії які прийшли останніми)",
                _ => ""
            };
        }

        public static МетодиСписанняПартій МетодиСписанняПартій_FindByName(string name)
        {
            return name switch
            {
                "FIFO" => МетодиСписанняПартій.FIFO,
                  "FIFO (спочатку списуються партії які прийшли першими)" => МетодиСписанняПартій.FIFO,
                  "LIFO" => МетодиСписанняПартій.LIFO,
                  "LIFO (спочатку списуються партії які прийшли останніми)" => МетодиСписанняПартій.LIFO,
                  _ => 0
            };
        }

        public static List<NameValue<МетодиСписанняПартій>> МетодиСписанняПартій_List()
        {
            return [
            new NameValue<МетодиСписанняПартій>("FIFO (спочатку списуються партії які прийшли першими)", МетодиСписанняПартій.FIFO),
            new NameValue<МетодиСписанняПартій>("LIFO (спочатку списуються партії які прийшли останніми)", МетодиСписанняПартій.LIFO),
            ];
        }
        #endregion
    
        #region ENUM "ТипиКонтрагентів"
        public static string ТипиКонтрагентів_Alias(ТипиКонтрагентів value)
        {
            return value switch
            {
                ТипиКонтрагентів.Постачальник => "Постачальник",
                ТипиКонтрагентів.Клієнт => "Клієнт",
                _ => ""
            };
        }

        public static ТипиКонтрагентів ТипиКонтрагентів_FindByName(string name)
        {
            return name switch
            {
                "Постачальник" => ТипиКонтрагентів.Постачальник,
                  "Клієнт" => ТипиКонтрагентів.Клієнт,
                  _ => 0
            };
        }

        public static List<NameValue<ТипиКонтрагентів>> ТипиКонтрагентів_List()
        {
            return [
            new NameValue<ТипиКонтрагентів>("Постачальник", ТипиКонтрагентів.Постачальник),
            new NameValue<ТипиКонтрагентів>("Клієнт", ТипиКонтрагентів.Клієнт),
            ];
        }
        #endregion
    
        #region ENUM "НалаштуванняАдресногоЗберігання"
        public static string НалаштуванняАдресногоЗберігання_Alias(НалаштуванняАдресногоЗберігання value)
        {
            return value switch
            {
                НалаштуванняАдресногоЗберігання.НеВикористовувати => "Не використовувати",
                НалаштуванняАдресногоЗберігання.Комірка => "Комірка",
                _ => ""
            };
        }

        public static НалаштуванняАдресногоЗберігання НалаштуванняАдресногоЗберігання_FindByName(string name)
        {
            return name switch
            {
                "НеВикористовувати" => НалаштуванняАдресногоЗберігання.НеВикористовувати,
                  "Не використовувати" => НалаштуванняАдресногоЗберігання.НеВикористовувати,
                  "Комірка" => НалаштуванняАдресногоЗберігання.Комірка,
                  _ => 0
            };
        }

        public static List<NameValue<НалаштуванняАдресногоЗберігання>> НалаштуванняАдресногоЗберігання_List()
        {
            return [
            new NameValue<НалаштуванняАдресногоЗберігання>("Не використовувати", НалаштуванняАдресногоЗберігання.НеВикористовувати),
            new NameValue<НалаштуванняАдресногоЗберігання>("Комірка", НалаштуванняАдресногоЗберігання.Комірка),
            ];
        }
        #endregion
    
        #region ENUM "ТипиСкладськихКомірок"
        public static string ТипиСкладськихКомірок_Alias(ТипиСкладськихКомірок value)
        {
            return value switch
            {
                ТипиСкладськихКомірок.Приймання => "Приймання",
                ТипиСкладськихКомірок.Відвантаження => "Відвантаження",
                ТипиСкладськихКомірок.Зберігання => "Зберігання",
                _ => ""
            };
        }

        public static ТипиСкладськихКомірок ТипиСкладськихКомірок_FindByName(string name)
        {
            return name switch
            {
                "Приймання" => ТипиСкладськихКомірок.Приймання,
                  "Відвантаження" => ТипиСкладськихКомірок.Відвантаження,
                  "Зберігання" => ТипиСкладськихКомірок.Зберігання,
                  _ => 0
            };
        }

        public static List<NameValue<ТипиСкладськихКомірок>> ТипиСкладськихКомірок_List()
        {
            return [
            new NameValue<ТипиСкладськихКомірок>("Приймання", ТипиСкладськихКомірок.Приймання),
            new NameValue<ТипиСкладськихКомірок>("Відвантаження", ТипиСкладськихКомірок.Відвантаження),
            new NameValue<ТипиСкладськихКомірок>("Зберігання", ТипиСкладськихКомірок.Зберігання),
            ];
        }
        #endregion
    
        #region ENUM "ПричиниЗакриттяЗамовленняКлієнта"
        public static string ПричиниЗакриттяЗамовленняКлієнта_Alias(ПричиниЗакриттяЗамовленняКлієнта value)
        {
            return value switch
            {
                ПричиниЗакриттяЗамовленняКлієнта.Відмова => "Відмова",
                ПричиниЗакриттяЗамовленняКлієнта.Інше => "Інше",
                _ => ""
            };
        }

        public static ПричиниЗакриттяЗамовленняКлієнта ПричиниЗакриттяЗамовленняКлієнта_FindByName(string name)
        {
            return name switch
            {
                "Відмова" => ПричиниЗакриттяЗамовленняКлієнта.Відмова,
                  "Інше" => ПричиниЗакриттяЗамовленняКлієнта.Інше,
                  _ => 0
            };
        }

        public static List<NameValue<ПричиниЗакриттяЗамовленняКлієнта>> ПричиниЗакриттяЗамовленняКлієнта_List()
        {
            return [
            new NameValue<ПричиниЗакриттяЗамовленняКлієнта>("Відмова", ПричиниЗакриттяЗамовленняКлієнта.Відмова),
            new NameValue<ПричиниЗакриттяЗамовленняКлієнта>("Інше", ПричиниЗакриттяЗамовленняКлієнта.Інше),
            ];
        }
        #endregion
    
        #region ENUM "ПричиниЗакриттяРахункуФактури"
        public static string ПричиниЗакриттяРахункуФактури_Alias(ПричиниЗакриттяРахункуФактури value)
        {
            return value switch
            {
                ПричиниЗакриттяРахункуФактури.Відмова => "Відмова",
                ПричиниЗакриттяРахункуФактури.Інше => "Інше",
                _ => ""
            };
        }

        public static ПричиниЗакриттяРахункуФактури ПричиниЗакриттяРахункуФактури_FindByName(string name)
        {
            return name switch
            {
                "Відмова" => ПричиниЗакриттяРахункуФактури.Відмова,
                  "Інше" => ПричиниЗакриттяРахункуФактури.Інше,
                  _ => 0
            };
        }

        public static List<NameValue<ПричиниЗакриттяРахункуФактури>> ПричиниЗакриттяРахункуФактури_List()
        {
            return [
            new NameValue<ПричиниЗакриттяРахункуФактури>("Відмова", ПричиниЗакриттяРахункуФактури.Відмова),
            new NameValue<ПричиниЗакриттяРахункуФактури>("Інше", ПричиниЗакриттяРахункуФактури.Інше),
            ];
        }
        #endregion
    
        #region ENUM "ПричиниЗакриттяЗамовленняПостачальнику"
        public static string ПричиниЗакриттяЗамовленняПостачальнику_Alias(ПричиниЗакриттяЗамовленняПостачальнику value)
        {
            return value switch
            {
                ПричиниЗакриттяЗамовленняПостачальнику.Відмова => "Відмова",
                ПричиниЗакриттяЗамовленняПостачальнику.Інше => "Інше",
                _ => ""
            };
        }

        public static ПричиниЗакриттяЗамовленняПостачальнику ПричиниЗакриттяЗамовленняПостачальнику_FindByName(string name)
        {
            return name switch
            {
                "Відмова" => ПричиниЗакриттяЗамовленняПостачальнику.Відмова,
                  "Інше" => ПричиниЗакриттяЗамовленняПостачальнику.Інше,
                  _ => 0
            };
        }

        public static List<NameValue<ПричиниЗакриттяЗамовленняПостачальнику>> ПричиниЗакриттяЗамовленняПостачальнику_List()
        {
            return [
            new NameValue<ПричиниЗакриттяЗамовленняПостачальнику>("Відмова", ПричиниЗакриттяЗамовленняПостачальнику.Відмова),
            new NameValue<ПричиниЗакриттяЗамовленняПостачальнику>("Інше", ПричиниЗакриттяЗамовленняПостачальнику.Інше),
            ];
        }
        #endregion
    
        #region ENUM "ТипККМ"
        public static string ТипККМ_Alias(ТипККМ value)
        {
            return value switch
            {
                ТипККМ.Фіскальний => "Фіскальний",
                _ => ""
            };
        }

        public static ТипККМ ТипККМ_FindByName(string name)
        {
            return name switch
            {
                "Фіскальний" => ТипККМ.Фіскальний,
                  _ => 0
            };
        }

        public static List<NameValue<ТипККМ>> ТипККМ_List()
        {
            return [
            new NameValue<ТипККМ>("Фіскальний", ТипККМ.Фіскальний),
            ];
        }
        #endregion
    
    }
}

namespace GeneratedCode.Документи
{
    
    #region DOCUMENT "ЗамовленняПостачальнику"
    public static class ЗамовленняПостачальнику_Const
    {
        public const string TABLE = "tab_a25";
        public const string TYPE = "ЗамовленняПостачальнику"; /* Назва вказівника */
        public const string POINTER = "Документи.ЗамовленняПостачальнику"; /* Повна назва вказівника */
        public const string FULLNAME = "Замовлення постачальнику"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Контрагент = "col_k2";
        public const string Організація = "col_k3";
        public const string Склад = "col_k4";
        public const string Валюта = "col_k5";
        public const string СумаДокументу = "col_k6";
        public const string Каса = "col_k7";
        public const string БанківськийРахунок = "col_a1";
        public const string Підрозділ = "col_a3";
        public const string Договір = "col_a4";
        public const string Автор = "col_a5";
        public const string ДатаПоступлення = "col_a7";
        public const string АдресаДоставкиДляПостачальника = "col_a8";
        public const string ПовернутиТару = "col_a9";
        public const string СпосібДоставки = "col_b1";
        public const string ЧасДоставкиЗ = "col_b2";
        public const string ЧасДоставкиДо = "col_b3";
        public const string АдресаДоставки = "col_b4";
        public const string ГосподарськаОперація = "col_a6";
        public const string Статус = "col_b5";
        public const string ФормаОплати = "col_b6";
        public const string Менеджер = "col_b7";
        public const string Основа = "col_b8";
        public const string Коментар = "col_a2";
        public const string КлючовіСловаДляПошуку = "col_b9";
    }

    public class ЗамовленняПостачальнику_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЗамовленняПостачальнику_Objest() : base(Config.Kernel, "tab_a25", ЗамовленняПостачальнику_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_k2", "col_k3", "col_k4", "col_k5", "col_k6", "col_k7", "col_a1", "col_a3", "col_a4", "col_a5", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", "col_b3", "col_b4", "col_a6", "col_b5", "col_b6", "col_b7", "col_b8", "col_a2", "col_b9", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ЗамовленняПостачальнику_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЗамовленняПостачальнику_Const.FULLNAME + " *");
            
                await ЗамовленняПостачальнику_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_k2"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_k3"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_k4"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_k5"]);
                СумаДокументу = (base.FieldValue["col_k6"] != DBNull.Value) ? (decimal)base.FieldValue["col_k6"] : 0;
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_k7"]);
                БанківськийРахунок = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_a1"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a3"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_a4"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a5"]);
                ДатаПоступлення = (base.FieldValue["col_a7"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a7"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                АдресаДоставкиДляПостачальника = base.FieldValue["col_a8"].ToString() ?? "";
                ПовернутиТару = (base.FieldValue["col_a9"] != DBNull.Value) ? (bool)base.FieldValue["col_a9"] : false;
                СпосібДоставки = (base.FieldValue["col_b1"] != DBNull.Value) ? (Перелічення.СпособиДоставки)base.FieldValue["col_b1"] : 0;
                ЧасДоставкиЗ = (base.FieldValue["col_b2"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_b2"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ЧасДоставкиДо = (base.FieldValue["col_b3"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_b3"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                АдресаДоставки = base.FieldValue["col_b4"].ToString() ?? "";
                ГосподарськаОперація = (base.FieldValue["col_a6"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_a6"] : 0;
                Статус = (base.FieldValue["col_b5"] != DBNull.Value) ? (Перелічення.СтатусиЗамовленьПостачальникам)base.FieldValue["col_b5"] : 0;
                ФормаОплати = (base.FieldValue["col_b6"] != DBNull.Value) ? (Перелічення.ФормаОплати)base.FieldValue["col_b6"] : 0;
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_b7"]);
                Основа = (base.FieldValue["col_b8"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_b8"] : new UuidAndText();
                Коментар = base.FieldValue["col_a2"].ToString() ?? "";
                КлючовіСловаДляПошуку = base.FieldValue["col_b9"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ЗамовленняПостачальнику_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_k2"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_k3"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_k4"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_k5"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_k6"] = СумаДокументу;
            base.FieldValue["col_k7"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_a1"] = БанківськийРахунок.UnigueID.UGuid;
            base.FieldValue["col_a3"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a7"] = ДатаПоступлення;
            base.FieldValue["col_a8"] = АдресаДоставкиДляПостачальника;
            base.FieldValue["col_a9"] = ПовернутиТару;
            base.FieldValue["col_b1"] = (int)СпосібДоставки;
            base.FieldValue["col_b2"] = ЧасДоставкиЗ;
            base.FieldValue["col_b3"] = ЧасДоставкиДо;
            base.FieldValue["col_b4"] = АдресаДоставки;
            base.FieldValue["col_a6"] = (int)ГосподарськаОперація;
            base.FieldValue["col_b5"] = (int)Статус;
            base.FieldValue["col_b6"] = (int)ФормаОплати;
            base.FieldValue["col_b7"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_b8"] = Основа;
            base.FieldValue["col_a2"] = Коментар;
            base.FieldValue["col_b9"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ЗамовленняПостачальнику_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняПостачальникам_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ЗамовленняПостачальнику_Objest> Copy(bool copyTableParts = false)
        {
            ЗамовленняПостачальнику_Objest copy = new ЗамовленняПостачальнику_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Контрагент = Контрагент,
                Організація = Організація,
                Склад = Склад,
                Валюта = Валюта,
                СумаДокументу = СумаДокументу,
                Каса = Каса,
                БанківськийРахунок = БанківськийРахунок,
                Підрозділ = Підрозділ,
                Договір = Договір,
                Автор = Автор,
                ДатаПоступлення = ДатаПоступлення,
                АдресаДоставкиДляПостачальника = АдресаДоставкиДляПостачальника,
                ПовернутиТару = ПовернутиТару,
                СпосібДоставки = СпосібДоставки,
                ЧасДоставкиЗ = ЧасДоставкиЗ,
                ЧасДоставкиДо = ЧасДоставкиДо,
                АдресаДоставки = АдресаДоставки,
                ГосподарськаОперація = ГосподарськаОперація,
                Статус = Статус,
                ФормаОплати = ФормаОплати,
                Менеджер = Менеджер,
                Основа = Основа,
                Коментар = Коментар,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ЗамовленняПостачальнику_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a30", ]);
        }
        
        public ЗамовленняПостачальнику_Pointer GetDocumentPointer()
        {
            return new ЗамовленняПостачальнику_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЗамовленняПостачальнику_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунок { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public DateTime ДатаПоступлення { get; set; } = DateTime.MinValue;
        public string АдресаДоставкиДляПостачальника { get; set; } = "";
        public bool ПовернутиТару { get; set; } = false;
        public Перелічення.СпособиДоставки СпосібДоставки { get; set; } = 0;
        public TimeSpan ЧасДоставкиЗ { get; set; } = DateTime.MinValue.TimeOfDay;
        public TimeSpan ЧасДоставкиДо { get; set; } = DateTime.MinValue.TimeOfDay;
        public string АдресаДоставки { get; set; } = "";
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Перелічення.СтатусиЗамовленьПостачальникам Статус { get; set; } = 0;
        public Перелічення.ФормаОплати ФормаОплати { get; set; } = 0;
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public string Коментар { get; set; } = "";
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ЗамовленняПостачальнику_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ЗамовленняПостачальнику_Pointer : DocumentPointer
    {
        public ЗамовленняПостачальнику_Pointer(object? uid = null) : base(Config.Kernel, "tab_a25", ЗамовленняПостачальнику_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЗамовленняПостачальнику_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a25", "ЗамовленняПостачальнику")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЗамовленняПостачальнику_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЗамовленняПостачальнику_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЗамовленняПостачальнику_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЗамовленняПостачальнику_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ЗамовленняПостачальнику_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняПостачальникам_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ЗамовленняПостачальнику_Pointer Copy()
        {
            return new ЗамовленняПостачальнику_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ЗамовленняПостачальнику_Pointer GetEmptyPointer()
        {
            return new ЗамовленняПостачальнику_Pointer();
        }

        public async ValueTask<ЗамовленняПостачальнику_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЗамовленняПостачальнику_Objest obj = new ЗамовленняПостачальнику_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ЗамовленняПостачальнику_Select : DocumentSelect
    {		
        public ЗамовленняПостачальнику_Select() : base(Config.Kernel, "tab_a25") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЗамовленняПостачальнику_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЗамовленняПостачальнику_Pointer? Current { get; private set; }

        public async ValueTask<ЗамовленняПостачальнику_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЗамовленняПостачальнику_Pointer(pointer) : new ЗамовленняПостачальнику_Pointer();
        }
        
        public async ValueTask<List<ЗамовленняПостачальнику_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЗамовленняПостачальнику_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ЗамовленняПостачальнику_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ЗамовленняПостачальнику_Товари_TablePart : DocumentTablePart
    {
        public ЗамовленняПостачальнику_Товари_TablePart(ЗамовленняПостачальнику_Objest owner) : base(Config.Kernel, "tab_a30",
             ["col_b2", "col_o4", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a30";
        
        public const string НомерРядка = "col_b2";
        public const string Номенклатура = "col_o4";
        public const string ХарактеристикаНоменклатури = "col_a1";
        public const string Пакування = "col_a2";
        public const string КількістьУпаковок = "col_a3";
        public const string Кількість = "col_a4";
        public const string ДатаПоступлення = "col_a5";
        public const string Ціна = "col_a6";
        public const string Сума = "col_a7";
        public const string Скидка = "col_a8";
        public const string Склад = "col_a9";
        public const string Підрозділ = "col_b1";

        public ЗамовленняПостачальнику_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a30", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a30", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a30", "join_tab_4", "Пакування");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_a30", "join_tab_11", "Склад");
                Довідники.СтруктураПідприємства_Pointer.GetJoin(QuerySelect, Підрозділ, "tab_a30", "join_tab_12", "Підрозділ");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_b2"] != DBNull.Value) ? (int)fieldValue["col_b2"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_o4"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a2"]),
                    КількістьУпаковок = (fieldValue["col_a3"] != DBNull.Value) ? (int)fieldValue["col_a3"] : 0,
                    Кількість = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    ДатаПоступлення = (fieldValue["col_a5"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a5"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Ціна = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    Сума = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    Скидка = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a9"]),
                    Підрозділ = new Довідники.СтруктураПідприємства_Pointer(fieldValue["col_b1"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Склад.Name = ItemValue["Склад"];
                      record.Підрозділ.Name = ItemValue["Підрозділ"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a25"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_b2", record.НомерРядка},
                    {"col_o4", record.Номенклатура.UnigueID.UGuid},
                    {"col_a1", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a2", record.Пакування.UnigueID.UGuid},
                    {"col_a3", record.КількістьУпаковок},
                    {"col_a4", record.Кількість},
                    {"col_a5", record.ДатаПоступлення},
                    {"col_a6", record.Ціна},
                    {"col_a7", record.Сума},
                    {"col_a8", record.Скидка},
                    {"col_a9", record.Склад.UnigueID.UGuid},
                    {"col_b1", record.Підрозділ.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public DateTime ДатаПоступлення { get; set; } = DateTime.MinValue;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Скидка { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
            
        }
    }
      
    
    public static class ЗамовленняПостачальнику_Export
    {
        public static async ValueTask ToXmlFile(ЗамовленняПостачальнику_Pointer ЗамовленняПостачальнику, string pathToSave)
        {
        ЗамовленняПостачальнику_Objest? obj = await ЗамовленняПостачальнику.GetDocumentObject(true);
            if (obj == null) return;

            XmlWriter xmlWriter = XmlWriter.Create(pathToSave, new XmlWriterSettings() { Indent = true, Encoding = System.Text.Encoding.UTF8 });
            xmlWriter.WriteStartDocument();
            xmlWriter.WriteStartElement("Document");
            xmlWriter.WriteAttributeString("uid", obj.UnigueID.ToString());
            
            xmlWriter.WriteStartElement("Назва");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.Назва);
              
            xmlWriter.WriteEndElement(); //Назва
            xmlWriter.WriteStartElement("НомерДок");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.НомерДок);
              
            xmlWriter.WriteEndElement(); //НомерДок
            xmlWriter.WriteStartElement("ДатаДок");
            xmlWriter.WriteAttributeString("type", "datetime");
            
                xmlWriter.WriteValue(obj.ДатаДок.ToString("dd.MM.yyyy HH:mm:ss"));
              
            xmlWriter.WriteEndElement(); //ДатаДок
            xmlWriter.WriteStartElement("Контрагент");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Контрагенти");
                    xmlWriter.WriteAttributeString("uid", obj.Контрагент.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Контрагент.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Контрагент
            xmlWriter.WriteStartElement("Організація");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Організації");
                    xmlWriter.WriteAttributeString("uid", obj.Організація.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Організація.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Організація
            xmlWriter.WriteStartElement("Склад");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Склади");
                    xmlWriter.WriteAttributeString("uid", obj.Склад.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Склад.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Склад
            xmlWriter.WriteStartElement("Валюта");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Валюти");
                    xmlWriter.WriteAttributeString("uid", obj.Валюта.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Валюта.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Валюта
            xmlWriter.WriteStartElement("СумаДокументу");
            xmlWriter.WriteAttributeString("type", "numeric");
            
                xmlWriter.WriteValue(obj.СумаДокументу);
              
            xmlWriter.WriteEndElement(); //СумаДокументу
            xmlWriter.WriteStartElement("Каса");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Каси");
                    xmlWriter.WriteAttributeString("uid", obj.Каса.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Каса.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Каса
                /*  Табличні частини */
                xmlWriter.WriteStartElement("TabularParts");
                
                    xmlWriter.WriteStartElement("TablePart");
                    xmlWriter.WriteAttributeString("name", "Товари");

                    foreach(ЗамовленняПостачальнику_Товари_TablePart.Record record in obj.Товари_TablePart.Records)
                    {
                        xmlWriter.WriteStartElement("row");
                        xmlWriter.WriteAttributeString("uid", record.UID.ToString());
                        
                        xmlWriter.WriteStartElement("НомерРядка");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.НомерРядка);
                          
                        xmlWriter.WriteEndElement(); //НомерРядка
                        xmlWriter.WriteStartElement("Номенклатура");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.Номенклатура");
                                xmlWriter.WriteAttributeString("uid", record.Номенклатура.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Номенклатура.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Номенклатура
                        xmlWriter.WriteStartElement("ХарактеристикаНоменклатури");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ХарактеристикиНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.ХарактеристикаНоменклатури.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.ХарактеристикаНоменклатури.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //ХарактеристикаНоменклатури
                        xmlWriter.WriteStartElement("Пакування");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ПакуванняОдиниціВиміру");
                                xmlWriter.WriteAttributeString("uid", record.Пакування.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Пакування.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Пакування
                        xmlWriter.WriteStartElement("КількістьУпаковок");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.КількістьУпаковок);
                          
                        xmlWriter.WriteEndElement(); //КількістьУпаковок
                        xmlWriter.WriteStartElement("Кількість");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Кількість);
                          
                        xmlWriter.WriteEndElement(); //Кількість
                        xmlWriter.WriteStartElement("Ціна");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Ціна);
                          
                        xmlWriter.WriteEndElement(); //Ціна
                        xmlWriter.WriteStartElement("Сума");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Сума);
                          
                        xmlWriter.WriteEndElement(); //Сума
                        xmlWriter.WriteEndElement(); //row
                    }

                    xmlWriter.WriteEndElement(); //TablePart
                
                xmlWriter.WriteEndElement(); //TabularParts
            

            xmlWriter.WriteEndElement(); //root
            xmlWriter.WriteEndDocument();
            xmlWriter.Close();
          
        }
    }

    #endregion
    
    #region DOCUMENT "ПоступленняТоварівТаПослуг"
    public static class ПоступленняТоварівТаПослуг_Const
    {
        public const string TABLE = "tab_a32";
        public const string TYPE = "ПоступленняТоварівТаПослуг"; /* Назва вказівника */
        public const string POINTER = "Документи.ПоступленняТоварівТаПослуг"; /* Повна назва вказівника */
        public const string FULLNAME = "Поступлення товарів та послуг"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Валюта = "col_a3";
        public const string ГосподарськаОперація = "col_a4";
        public const string Підрозділ = "col_a5";
        public const string Склад = "col_a6";
        public const string Контрагент = "col_a7";
        public const string СумаДокументу = "col_a8";
        public const string ЗамовленняПостачальнику = "col_a9";
        public const string ДатаОплати = "col_b2";
        public const string ФормаОплати = "col_b3";
        public const string Узгоджений = "col_b4";
        public const string БанківськийРахунокОрганізації = "col_b5";
        public const string НомерВхідногоДокументу = "col_b6";
        public const string ДатаВхідногоДокументу = "col_b7";
        public const string БанківськийРахунокКонтрагента = "col_b8";
        public const string Договір = "col_b9";
        public const string Автор = "col_c1";
        public const string ПовернутиТару = "col_c2";
        public const string ДатаПоверненняТари = "col_c3";
        public const string СпосібДоставки = "col_c4";
        public const string Організація = "col_c5";
        public const string Курс = "col_c6";
        public const string Кратність = "col_c7";
        public const string ЧасДоставкиЗ = "col_c8";
        public const string ЧасДоставкиДо = "col_c9";
        public const string Менеджер = "col_d1";
        public const string СтаттяРухуКоштів = "col_d2";
        public const string Каса = "col_d3";
        public const string Основа = "col_a1";
        public const string Коментар = "col_b1";
        public const string КлючовіСловаДляПошуку = "col_a2";
    }

    public class ПоступленняТоварівТаПослуг_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПоступленняТоварівТаПослуг_Objest() : base(Config.Kernel, "tab_a32", ПоступленняТоварівТаПослуг_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b2", "col_b3", "col_b4", "col_b5", "col_b6", "col_b7", "col_b8", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c8", "col_c9", "col_d1", "col_d2", "col_d3", "col_a1", "col_b1", "col_a2", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПоступленняТоварівТаПослуг_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПоступленняТоварівТаПослуг_Const.FULLNAME + " *");
            
                await ПоступленняТоварівТаПослуг_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a3"]);
                ГосподарськаОперація = (base.FieldValue["col_a4"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_a4"] : 0;
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a5"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a6"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_a7"]);
                СумаДокументу = (base.FieldValue["col_a8"] != DBNull.Value) ? (decimal)base.FieldValue["col_a8"] : 0;
                ЗамовленняПостачальнику = new Документи.ЗамовленняПостачальнику_Pointer(base.FieldValue["col_a9"]);
                ДатаОплати = (base.FieldValue["col_b2"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_b2"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                ФормаОплати = (base.FieldValue["col_b3"] != DBNull.Value) ? (Перелічення.ФормаОплати)base.FieldValue["col_b3"] : 0;
                Узгоджений = (base.FieldValue["col_b4"] != DBNull.Value) ? (bool)base.FieldValue["col_b4"] : false;
                БанківськийРахунокОрганізації = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_b5"]);
                НомерВхідногоДокументу = base.FieldValue["col_b6"].ToString() ?? "";
                ДатаВхідногоДокументу = (base.FieldValue["col_b7"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_b7"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                БанківськийРахунокКонтрагента = new Довідники.БанківськіРахункиКонтрагентів_Pointer(base.FieldValue["col_b8"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_b9"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_c1"]);
                ПовернутиТару = (base.FieldValue["col_c2"] != DBNull.Value) ? (bool)base.FieldValue["col_c2"] : false;
                ДатаПоверненняТари = (base.FieldValue["col_c3"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_c3"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                СпосібДоставки = (base.FieldValue["col_c4"] != DBNull.Value) ? (Перелічення.СпособиДоставки)base.FieldValue["col_c4"] : 0;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_c5"]);
                Курс = (base.FieldValue["col_c6"] != DBNull.Value) ? (decimal)base.FieldValue["col_c6"] : 0;
                Кратність = (base.FieldValue["col_c7"] != DBNull.Value) ? (int)base.FieldValue["col_c7"] : 0;
                ЧасДоставкиЗ = (base.FieldValue["col_c8"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_c8"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ЧасДоставкиДо = (base.FieldValue["col_c9"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_c9"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_d1"]);
                СтаттяРухуКоштів = new Довідники.СтаттяРухуКоштів_Pointer(base.FieldValue["col_d2"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_d3"]);
                Основа = (base.FieldValue["col_a1"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a1"] : new UuidAndText();
                Коментар = base.FieldValue["col_b1"].ToString() ?? "";
                КлючовіСловаДляПошуку = base.FieldValue["col_a2"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПоступленняТоварівТаПослуг_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a3"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a4"] = (int)ГосподарськаОперація;
            base.FieldValue["col_a5"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a7"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_a8"] = СумаДокументу;
            base.FieldValue["col_a9"] = ЗамовленняПостачальнику.UnigueID.UGuid;
            base.FieldValue["col_b2"] = ДатаОплати;
            base.FieldValue["col_b3"] = (int)ФормаОплати;
            base.FieldValue["col_b4"] = Узгоджений;
            base.FieldValue["col_b5"] = БанківськийРахунокОрганізації.UnigueID.UGuid;
            base.FieldValue["col_b6"] = НомерВхідногоДокументу;
            base.FieldValue["col_b7"] = ДатаВхідногоДокументу;
            base.FieldValue["col_b8"] = БанківськийРахунокКонтрагента.UnigueID.UGuid;
            base.FieldValue["col_b9"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_c1"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_c2"] = ПовернутиТару;
            base.FieldValue["col_c3"] = ДатаПоверненняТари;
            base.FieldValue["col_c4"] = (int)СпосібДоставки;
            base.FieldValue["col_c5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_c6"] = Курс;
            base.FieldValue["col_c7"] = Кратність;
            base.FieldValue["col_c8"] = ЧасДоставкиЗ;
            base.FieldValue["col_c9"] = ЧасДоставкиДо;
            base.FieldValue["col_d1"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_d2"] = СтаттяРухуКоштів.UnigueID.UGuid;
            base.FieldValue["col_d3"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_a1"] = Основа;
            base.FieldValue["col_b1"] = Коментар;
            base.FieldValue["col_a2"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПоступленняТоварівТаПослуг_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Закупівлі_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ЗамовленняПостачальникам_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПоступленняТоварівТаПослуг_Objest> Copy(bool copyTableParts = false)
        {
            ПоступленняТоварівТаПослуг_Objest copy = new ПоступленняТоварівТаПослуг_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Валюта = Валюта,
                ГосподарськаОперація = ГосподарськаОперація,
                Підрозділ = Підрозділ,
                Склад = Склад,
                Контрагент = Контрагент,
                СумаДокументу = СумаДокументу,
                ЗамовленняПостачальнику = ЗамовленняПостачальнику,
                ДатаОплати = ДатаОплати,
                ФормаОплати = ФормаОплати,
                Узгоджений = Узгоджений,
                БанківськийРахунокОрганізації = БанківськийРахунокОрганізації,
                НомерВхідногоДокументу = НомерВхідногоДокументу,
                ДатаВхідногоДокументу = ДатаВхідногоДокументу,
                БанківськийРахунокКонтрагента = БанківськийРахунокКонтрагента,
                Договір = Договір,
                Автор = Автор,
                ПовернутиТару = ПовернутиТару,
                ДатаПоверненняТари = ДатаПоверненняТари,
                СпосібДоставки = СпосібДоставки,
                Організація = Організація,
                Курс = Курс,
                Кратність = Кратність,
                ЧасДоставкиЗ = ЧасДоставкиЗ,
                ЧасДоставкиДо = ЧасДоставкиДо,
                Менеджер = Менеджер,
                СтаттяРухуКоштів = СтаттяРухуКоштів,
                Каса = Каса,
                Основа = Основа,
                Коментар = Коментар,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПоступленняТоварівТаПослуг_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await ПоступленняТоварівТаПослуг_Triggers.SetDeletionLabel(this, label);      
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a33", ]);
        }
        
        public ПоступленняТоварівТаПослуг_Pointer GetDocumentPointer()
        {
            return new ПоступленняТоварівТаПослуг_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПоступленняТоварівТаПослуг_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Документи.ЗамовленняПостачальнику_Pointer ЗамовленняПостачальнику { get; set; } = new Документи.ЗамовленняПостачальнику_Pointer();
        public DateTime ДатаОплати { get; set; } = DateTime.MinValue;
        public Перелічення.ФормаОплати ФормаОплати { get; set; } = 0;
        public bool Узгоджений { get; set; } = false;
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунокОрганізації { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public string НомерВхідногоДокументу { get; set; } = "";
        public DateTime ДатаВхідногоДокументу { get; set; } = DateTime.MinValue;
        public Довідники.БанківськіРахункиКонтрагентів_Pointer БанківськийРахунокКонтрагента { get; set; } = new Довідники.БанківськіРахункиКонтрагентів_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public bool ПовернутиТару { get; set; } = false;
        public DateTime ДатаПоверненняТари { get; set; } = DateTime.MinValue;
        public Перелічення.СпособиДоставки СпосібДоставки { get; set; } = 0;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public decimal Курс { get; set; } = 0;
        public int Кратність { get; set; } = 0;
        public TimeSpan ЧасДоставкиЗ { get; set; } = DateTime.MinValue.TimeOfDay;
        public TimeSpan ЧасДоставкиДо { get; set; } = DateTime.MinValue.TimeOfDay;
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.СтаттяРухуКоштів_Pointer СтаттяРухуКоштів { get; set; } = new Довідники.СтаттяРухуКоштів_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public string Коментар { get; set; } = "";
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ПоступленняТоварівТаПослуг_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПоступленняТоварівТаПослуг_Pointer : DocumentPointer
    {
        public ПоступленняТоварівТаПослуг_Pointer(object? uid = null) : base(Config.Kernel, "tab_a32", ПоступленняТоварівТаПослуг_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПоступленняТоварівТаПослуг_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a32", "ПоступленняТоварівТаПослуг")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПоступленняТоварівТаПослуг_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПоступленняТоварівТаПослуг_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПоступленняТоварівТаПослуг_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПоступленняТоварівТаПослуг_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПоступленняТоварівТаПослуг_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Закупівлі_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ЗамовленняПостачальникам_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          ПоступленняТоварівТаПослуг_Objest? obj = await GetDocumentObject();
            if (obj == null) return;
            
                await ПоступленняТоварівТаПослуг_Triggers.SetDeletionLabel(obj, label);
            
            if (label) await obj.ClearSpendTheDocument();
            
          await base.BaseDeletionLabel(label);
        }

        public ПоступленняТоварівТаПослуг_Pointer Copy()
        {
            return new ПоступленняТоварівТаПослуг_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПоступленняТоварівТаПослуг_Pointer GetEmptyPointer()
        {
            return new ПоступленняТоварівТаПослуг_Pointer();
        }

        public async ValueTask<ПоступленняТоварівТаПослуг_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПоступленняТоварівТаПослуг_Objest obj = new ПоступленняТоварівТаПослуг_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПоступленняТоварівТаПослуг_Select : DocumentSelect
    {		
        public ПоступленняТоварівТаПослуг_Select() : base(Config.Kernel, "tab_a32") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПоступленняТоварівТаПослуг_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПоступленняТоварівТаПослуг_Pointer? Current { get; private set; }

        public async ValueTask<ПоступленняТоварівТаПослуг_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПоступленняТоварівТаПослуг_Pointer(pointer) : new ПоступленняТоварівТаПослуг_Pointer();
        }
        
        public async ValueTask<List<ПоступленняТоварівТаПослуг_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПоступленняТоварівТаПослуг_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПоступленняТоварівТаПослуг_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПоступленняТоварівТаПослуг_Товари_TablePart : DocumentTablePart
    {
        public ПоступленняТоварівТаПослуг_Товари_TablePart(ПоступленняТоварівТаПослуг_Objest owner) : base(Config.Kernel, "tab_a33",
             ["col_b3", "col_a9", "col_b1", "col_b4", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_b2", "col_b5", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a33";
        
        public const string НомерРядка = "col_b3";
        public const string Номенклатура = "col_a9";
        public const string ХарактеристикаНоменклатури = "col_b1";
        public const string Серія = "col_b4";
        public const string Пакування = "col_a1";
        public const string КількістьУпаковок = "col_a2";
        public const string Кількість = "col_a3";
        public const string Ціна = "col_a4";
        public const string Сума = "col_a5";
        public const string Склад = "col_a6";
        public const string ЗамовленняПостачальнику = "col_a7";
        public const string Скидка = "col_a8";
        public const string Підрозділ = "col_b2";
        public const string ВидЦіни = "col_b5";

        public ПоступленняТоварівТаПослуг_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a33", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a33", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a33", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a33", "join_tab_5", "Пакування");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_a33", "join_tab_10", "Склад");
                Документи.ЗамовленняПостачальнику_Pointer.GetJoin(QuerySelect, ЗамовленняПостачальнику, "tab_a33", "join_tab_11", "ЗамовленняПостачальнику");
                Довідники.СтруктураПідприємства_Pointer.GetJoin(QuerySelect, Підрозділ, "tab_a33", "join_tab_13", "Підрозділ");
                Довідники.ВидиЦін_Pointer.GetJoin(QuerySelect, ВидЦіни, "tab_a33", "join_tab_14", "ВидЦіни");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_b3"] != DBNull.Value) ? (int)fieldValue["col_b3"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a9"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_b1"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_b4"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a1"]),
                    КількістьУпаковок = (fieldValue["col_a2"] != DBNull.Value) ? (int)fieldValue["col_a2"] : 0,
                    Кількість = (fieldValue["col_a3"] != DBNull.Value) ? (decimal)fieldValue["col_a3"] : 0,
                    Ціна = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    Сума = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a6"]),
                    ЗамовленняПостачальнику = new Документи.ЗамовленняПостачальнику_Pointer(fieldValue["col_a7"]),
                    Скидка = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Підрозділ = new Довідники.СтруктураПідприємства_Pointer(fieldValue["col_b2"]),
                    ВидЦіни = new Довідники.ВидиЦін_Pointer(fieldValue["col_b5"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Склад.Name = ItemValue["Склад"];
                      record.ЗамовленняПостачальнику.Name = ItemValue["ЗамовленняПостачальнику"];
                      record.Підрозділ.Name = ItemValue["Підрозділ"];
                      record.ВидЦіни.Name = ItemValue["ВидЦіни"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a32"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_b3", record.НомерРядка},
                    {"col_a9", record.Номенклатура.UnigueID.UGuid},
                    {"col_b1", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_b4", record.Серія.UnigueID.UGuid},
                    {"col_a1", record.Пакування.UnigueID.UGuid},
                    {"col_a2", record.КількістьУпаковок},
                    {"col_a3", record.Кількість},
                    {"col_a4", record.Ціна},
                    {"col_a5", record.Сума},
                    {"col_a6", record.Склад.UnigueID.UGuid},
                    {"col_a7", record.ЗамовленняПостачальнику.UnigueID.UGuid},
                    {"col_a8", record.Скидка},
                    {"col_b2", record.Підрозділ.UnigueID.UGuid},
                    {"col_b5", record.ВидЦіни.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Документи.ЗамовленняПостачальнику_Pointer ЗамовленняПостачальнику { get; set; } = new Документи.ЗамовленняПостачальнику_Pointer();
            public decimal Скидка { get; set; } = 0;
            public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
            public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
            
        }
    }
      
    
    public static class ПоступленняТоварівТаПослуг_Export
    {
        public static async ValueTask ToXmlFile(ПоступленняТоварівТаПослуг_Pointer ПоступленняТоварівТаПослуг, string pathToSave)
        {
        ПоступленняТоварівТаПослуг_Objest? obj = await ПоступленняТоварівТаПослуг.GetDocumentObject(true);
            if (obj == null) return;

            XmlWriter xmlWriter = XmlWriter.Create(pathToSave, new XmlWriterSettings() { Indent = true, Encoding = System.Text.Encoding.UTF8 });
            xmlWriter.WriteStartDocument();
            xmlWriter.WriteStartElement("Document");
            xmlWriter.WriteAttributeString("uid", obj.UnigueID.ToString());
            
            xmlWriter.WriteStartElement("Назва");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.Назва);
              
            xmlWriter.WriteEndElement(); //Назва
            xmlWriter.WriteStartElement("НомерДок");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.НомерДок);
              
            xmlWriter.WriteEndElement(); //НомерДок
            xmlWriter.WriteStartElement("ДатаДок");
            xmlWriter.WriteAttributeString("type", "datetime");
            
                xmlWriter.WriteValue(obj.ДатаДок.ToString("dd.MM.yyyy HH:mm:ss"));
              
            xmlWriter.WriteEndElement(); //ДатаДок
            xmlWriter.WriteStartElement("Валюта");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Валюти");
                    xmlWriter.WriteAttributeString("uid", obj.Валюта.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Валюта.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Валюта
            xmlWriter.WriteStartElement("Склад");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Склади");
                    xmlWriter.WriteAttributeString("uid", obj.Склад.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Склад.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Склад
            xmlWriter.WriteStartElement("Контрагент");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Контрагенти");
                    xmlWriter.WriteAttributeString("uid", obj.Контрагент.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Контрагент.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Контрагент
            xmlWriter.WriteStartElement("СумаДокументу");
            xmlWriter.WriteAttributeString("type", "numeric");
            
                xmlWriter.WriteValue(obj.СумаДокументу);
              
            xmlWriter.WriteEndElement(); //СумаДокументу
            xmlWriter.WriteStartElement("Організація");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Організації");
                    xmlWriter.WriteAttributeString("uid", obj.Організація.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Організація.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Організація
            xmlWriter.WriteStartElement("Каса");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Каси");
                    xmlWriter.WriteAttributeString("uid", obj.Каса.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Каса.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Каса
                /*  Табличні частини */
                xmlWriter.WriteStartElement("TabularParts");
                
                    xmlWriter.WriteStartElement("TablePart");
                    xmlWriter.WriteAttributeString("name", "Товари");

                    foreach(ПоступленняТоварівТаПослуг_Товари_TablePart.Record record in obj.Товари_TablePart.Records)
                    {
                        xmlWriter.WriteStartElement("row");
                        xmlWriter.WriteAttributeString("uid", record.UID.ToString());
                        
                        xmlWriter.WriteStartElement("НомерРядка");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.НомерРядка);
                          
                        xmlWriter.WriteEndElement(); //НомерРядка
                        xmlWriter.WriteStartElement("Номенклатура");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.Номенклатура");
                                xmlWriter.WriteAttributeString("uid", record.Номенклатура.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Номенклатура.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Номенклатура
                        xmlWriter.WriteStartElement("ХарактеристикаНоменклатури");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ХарактеристикиНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.ХарактеристикаНоменклатури.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.ХарактеристикаНоменклатури.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //ХарактеристикаНоменклатури
                        xmlWriter.WriteStartElement("Серія");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.СеріїНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.Серія.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Серія.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Серія
                        xmlWriter.WriteStartElement("Пакування");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ПакуванняОдиниціВиміру");
                                xmlWriter.WriteAttributeString("uid", record.Пакування.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Пакування.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Пакування
                        xmlWriter.WriteStartElement("КількістьУпаковок");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.КількістьУпаковок);
                          
                        xmlWriter.WriteEndElement(); //КількістьУпаковок
                        xmlWriter.WriteStartElement("Кількість");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Кількість);
                          
                        xmlWriter.WriteEndElement(); //Кількість
                        xmlWriter.WriteStartElement("Ціна");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Ціна);
                          
                        xmlWriter.WriteEndElement(); //Ціна
                        xmlWriter.WriteStartElement("Сума");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Сума);
                          
                        xmlWriter.WriteEndElement(); //Сума
                        xmlWriter.WriteEndElement(); //row
                    }

                    xmlWriter.WriteEndElement(); //TablePart
                
                xmlWriter.WriteEndElement(); //TabularParts
            

            xmlWriter.WriteEndElement(); //root
            xmlWriter.WriteEndDocument();
            xmlWriter.Close();
          
        }
    }

    #endregion
    
    #region DOCUMENT "ЗамовленняКлієнта"
    public static class ЗамовленняКлієнта_Const
    {
        public const string TABLE = "tab_a34";
        public const string TYPE = "ЗамовленняКлієнта"; /* Назва вказівника */
        public const string POINTER = "Документи.ЗамовленняКлієнта"; /* Повна назва вказівника */
        public const string FULLNAME = "Замовлення клієнта"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Контрагент = "col_b4";
        public const string Організація = "col_b5";
        public const string Валюта = "col_b6";
        public const string СумаДокументу = "col_b7";
        public const string Склад = "col_b8";
        public const string Статус = "col_a1";
        public const string Узгоджений = "col_a2";
        public const string ФормаОплати = "col_a3";
        public const string БанківськийРахунок = "col_a4";
        public const string БанківськийРахунокКонтрагента = "col_a5";
        public const string Каса = "col_a6";
        public const string СумаАвансуДоЗабезпечення = "col_a7";
        public const string СумаПередоплатиДоВідгрузки = "col_a8";
        public const string ДатаВідгрузки = "col_b1";
        public const string АдресаДоставки = "col_a9";
        public const string ГосподарськаОперація = "col_b9";
        public const string Договір = "col_c2";
        public const string Підрозділ = "col_c3";
        public const string Автор = "col_c4";
        public const string СпосібДоставки = "col_c5";
        public const string ЧасДоставкиЗ = "col_c6";
        public const string ЧасДоставкиДо = "col_c7";
        public const string ПовернутиТару = "col_c8";
        public const string ДатаПоверненняТари = "col_c9";
        public const string Коментар = "col_c1";
        public const string Менеджер = "col_b2";
        public const string КлючовіСловаДляПошуку = "col_b3";
        public const string Основа = "col_d1";
    }

    public class ЗамовленняКлієнта_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЗамовленняКлієнта_Objest() : base(Config.Kernel, "tab_a34", ЗамовленняКлієнта_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_b4", "col_b5", "col_b6", "col_b7", "col_b8", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_b1", "col_a9", "col_b9", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c8", "col_c9", "col_c1", "col_b2", "col_b3", "col_d1", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ЗамовленняКлієнта_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЗамовленняКлієнта_Const.FULLNAME + " *");
            
                await ЗамовленняКлієнта_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_b4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_b5"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_b6"]);
                СумаДокументу = (base.FieldValue["col_b7"] != DBNull.Value) ? (decimal)base.FieldValue["col_b7"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_b8"]);
                Статус = (base.FieldValue["col_a1"] != DBNull.Value) ? (Перелічення.СтатусиЗамовленьКлієнтів)base.FieldValue["col_a1"] : 0;
                Узгоджений = (base.FieldValue["col_a2"] != DBNull.Value) ? (bool)base.FieldValue["col_a2"] : false;
                ФормаОплати = (base.FieldValue["col_a3"] != DBNull.Value) ? (Перелічення.ФормаОплати)base.FieldValue["col_a3"] : 0;
                БанківськийРахунок = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_a4"]);
                БанківськийРахунокКонтрагента = new Довідники.БанківськіРахункиКонтрагентів_Pointer(base.FieldValue["col_a5"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_a6"]);
                СумаАвансуДоЗабезпечення = (base.FieldValue["col_a7"] != DBNull.Value) ? (decimal)base.FieldValue["col_a7"] : 0;
                СумаПередоплатиДоВідгрузки = (base.FieldValue["col_a8"] != DBNull.Value) ? (decimal)base.FieldValue["col_a8"] : 0;
                ДатаВідгрузки = (base.FieldValue["col_b1"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_b1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                АдресаДоставки = base.FieldValue["col_a9"].ToString() ?? "";
                ГосподарськаОперація = (base.FieldValue["col_b9"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_b9"] : 0;
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_c2"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_c3"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_c4"]);
                СпосібДоставки = (base.FieldValue["col_c5"] != DBNull.Value) ? (Перелічення.СпособиДоставки)base.FieldValue["col_c5"] : 0;
                ЧасДоставкиЗ = (base.FieldValue["col_c6"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_c6"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ЧасДоставкиДо = (base.FieldValue["col_c7"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_c7"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ПовернутиТару = (base.FieldValue["col_c8"] != DBNull.Value) ? (bool)base.FieldValue["col_c8"] : false;
                ДатаПоверненняТари = (base.FieldValue["col_c9"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_c9"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Коментар = base.FieldValue["col_c1"].ToString() ?? "";
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_b2"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_b3"].ToString() ?? "";
                Основа = (base.FieldValue["col_d1"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_d1"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ЗамовленняКлієнта_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_b4"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_b5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_b6"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_b7"] = СумаДокументу;
            base.FieldValue["col_b8"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a1"] = (int)Статус;
            base.FieldValue["col_a2"] = Узгоджений;
            base.FieldValue["col_a3"] = (int)ФормаОплати;
            base.FieldValue["col_a4"] = БанківськийРахунок.UnigueID.UGuid;
            base.FieldValue["col_a5"] = БанківськийРахунокКонтрагента.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_a7"] = СумаАвансуДоЗабезпечення;
            base.FieldValue["col_a8"] = СумаПередоплатиДоВідгрузки;
            base.FieldValue["col_b1"] = ДатаВідгрузки;
            base.FieldValue["col_a9"] = АдресаДоставки;
            base.FieldValue["col_b9"] = (int)ГосподарськаОперація;
            base.FieldValue["col_c2"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_c3"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_c4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_c5"] = (int)СпосібДоставки;
            base.FieldValue["col_c6"] = ЧасДоставкиЗ;
            base.FieldValue["col_c7"] = ЧасДоставкиДо;
            base.FieldValue["col_c8"] = ПовернутиТару;
            base.FieldValue["col_c9"] = ДатаПоверненняТари;
            base.FieldValue["col_c1"] = Коментар;
            base.FieldValue["col_b2"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_b3"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_d1"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ЗамовленняКлієнта_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняКлієнтів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ЗамовленняКлієнта_Objest> Copy(bool copyTableParts = false)
        {
            ЗамовленняКлієнта_Objest copy = new ЗамовленняКлієнта_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Контрагент = Контрагент,
                Організація = Організація,
                Валюта = Валюта,
                СумаДокументу = СумаДокументу,
                Склад = Склад,
                Статус = Статус,
                Узгоджений = Узгоджений,
                ФормаОплати = ФормаОплати,
                БанківськийРахунок = БанківськийРахунок,
                БанківськийРахунокКонтрагента = БанківськийРахунокКонтрагента,
                Каса = Каса,
                СумаАвансуДоЗабезпечення = СумаАвансуДоЗабезпечення,
                СумаПередоплатиДоВідгрузки = СумаПередоплатиДоВідгрузки,
                ДатаВідгрузки = ДатаВідгрузки,
                АдресаДоставки = АдресаДоставки,
                ГосподарськаОперація = ГосподарськаОперація,
                Договір = Договір,
                Підрозділ = Підрозділ,
                Автор = Автор,
                СпосібДоставки = СпосібДоставки,
                ЧасДоставкиЗ = ЧасДоставкиЗ,
                ЧасДоставкиДо = ЧасДоставкиДо,
                ПовернутиТару = ПовернутиТару,
                ДатаПоверненняТари = ДатаПоверненняТари,
                Коментар = Коментар,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ЗамовленняКлієнта_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a35", ]);
        }
        
        public ЗамовленняКлієнта_Pointer GetDocumentPointer()
        {
            return new ЗамовленняКлієнта_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЗамовленняКлієнта_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Перелічення.СтатусиЗамовленьКлієнтів Статус { get; set; } = 0;
        public bool Узгоджений { get; set; } = false;
        public Перелічення.ФормаОплати ФормаОплати { get; set; } = 0;
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунок { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.БанківськіРахункиКонтрагентів_Pointer БанківськийРахунокКонтрагента { get; set; } = new Довідники.БанківськіРахункиКонтрагентів_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public decimal СумаАвансуДоЗабезпечення { get; set; } = 0;
        public decimal СумаПередоплатиДоВідгрузки { get; set; } = 0;
        public DateTime ДатаВідгрузки { get; set; } = DateTime.MinValue;
        public string АдресаДоставки { get; set; } = "";
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Перелічення.СпособиДоставки СпосібДоставки { get; set; } = 0;
        public TimeSpan ЧасДоставкиЗ { get; set; } = DateTime.MinValue.TimeOfDay;
        public TimeSpan ЧасДоставкиДо { get; set; } = DateTime.MinValue.TimeOfDay;
        public bool ПовернутиТару { get; set; } = false;
        public DateTime ДатаПоверненняТари { get; set; } = DateTime.MinValue;
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ЗамовленняКлієнта_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ЗамовленняКлієнта_Pointer : DocumentPointer
    {
        public ЗамовленняКлієнта_Pointer(object? uid = null) : base(Config.Kernel, "tab_a34", ЗамовленняКлієнта_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЗамовленняКлієнта_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a34", "ЗамовленняКлієнта")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЗамовленняКлієнта_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЗамовленняКлієнта_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЗамовленняКлієнта_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЗамовленняКлієнта_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ЗамовленняКлієнта_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняКлієнтів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ЗамовленняКлієнта_Pointer Copy()
        {
            return new ЗамовленняКлієнта_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ЗамовленняКлієнта_Pointer GetEmptyPointer()
        {
            return new ЗамовленняКлієнта_Pointer();
        }

        public async ValueTask<ЗамовленняКлієнта_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЗамовленняКлієнта_Objest obj = new ЗамовленняКлієнта_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ЗамовленняКлієнта_Select : DocumentSelect
    {		
        public ЗамовленняКлієнта_Select() : base(Config.Kernel, "tab_a34") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЗамовленняКлієнта_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЗамовленняКлієнта_Pointer? Current { get; private set; }

        public async ValueTask<ЗамовленняКлієнта_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЗамовленняКлієнта_Pointer(pointer) : new ЗамовленняКлієнта_Pointer();
        }
        
        public async ValueTask<List<ЗамовленняКлієнта_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЗамовленняКлієнта_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ЗамовленняКлієнта_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ЗамовленняКлієнта_Товари_TablePart : DocumentTablePart
    {
        public ЗамовленняКлієнта_Товари_TablePart(ЗамовленняКлієнта_Objest owner) : base(Config.Kernel, "tab_a35",
             ["col_a2", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c8", "col_a1", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a35";
        
        public const string НомерРядка = "col_a2";
        public const string Номенклатура = "col_b9";
        public const string ХарактеристикаНоменклатури = "col_c1";
        public const string Пакування = "col_c2";
        public const string КількістьУпаковок = "col_c3";
        public const string Кількість = "col_c4";
        public const string ВидЦіни = "col_c5";
        public const string Ціна = "col_c6";
        public const string Сума = "col_c7";
        public const string Скидка = "col_c8";
        public const string Склад = "col_a1";

        public ЗамовленняКлієнта_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a35", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a35", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a35", "join_tab_4", "Пакування");
                Довідники.ВидиЦін_Pointer.GetJoin(QuerySelect, ВидЦіни, "tab_a35", "join_tab_7", "ВидЦіни");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_a35", "join_tab_11", "Склад");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a2"] != DBNull.Value) ? (int)fieldValue["col_a2"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b9"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_c1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_c2"]),
                    КількістьУпаковок = (fieldValue["col_c3"] != DBNull.Value) ? (int)fieldValue["col_c3"] : 0,
                    Кількість = (fieldValue["col_c4"] != DBNull.Value) ? (decimal)fieldValue["col_c4"] : 0,
                    ВидЦіни = new Довідники.ВидиЦін_Pointer(fieldValue["col_c5"]),
                    Ціна = (fieldValue["col_c6"] != DBNull.Value) ? (decimal)fieldValue["col_c6"] : 0,
                    Сума = (fieldValue["col_c7"] != DBNull.Value) ? (decimal)fieldValue["col_c7"] : 0,
                    Скидка = (fieldValue["col_c8"] != DBNull.Value) ? (decimal)fieldValue["col_c8"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a1"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ВидЦіни.Name = ItemValue["ВидЦіни"];
                      record.Склад.Name = ItemValue["Склад"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a34"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a2", record.НомерРядка},
                    {"col_b9", record.Номенклатура.UnigueID.UGuid},
                    {"col_c1", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_c2", record.Пакування.UnigueID.UGuid},
                    {"col_c3", record.КількістьУпаковок},
                    {"col_c4", record.Кількість},
                    {"col_c5", record.ВидЦіни.UnigueID.UGuid},
                    {"col_c6", record.Ціна},
                    {"col_c7", record.Сума},
                    {"col_c8", record.Скидка},
                    {"col_a1", record.Склад.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Скидка { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            
        }
    }
      
    
    public static class ЗамовленняКлієнта_Export
    {
        public static async ValueTask ToXmlFile(ЗамовленняКлієнта_Pointer ЗамовленняКлієнта, string pathToSave)
        {
        ЗамовленняКлієнта_Objest? obj = await ЗамовленняКлієнта.GetDocumentObject(true);
            if (obj == null) return;

            XmlWriter xmlWriter = XmlWriter.Create(pathToSave, new XmlWriterSettings() { Indent = true, Encoding = System.Text.Encoding.UTF8 });
            xmlWriter.WriteStartDocument();
            xmlWriter.WriteStartElement("Document");
            xmlWriter.WriteAttributeString("uid", obj.UnigueID.ToString());
            
            xmlWriter.WriteStartElement("Назва");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.Назва);
              
            xmlWriter.WriteEndElement(); //Назва
            xmlWriter.WriteStartElement("НомерДок");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.НомерДок);
              
            xmlWriter.WriteEndElement(); //НомерДок
            xmlWriter.WriteStartElement("ДатаДок");
            xmlWriter.WriteAttributeString("type", "datetime");
            
                xmlWriter.WriteValue(obj.ДатаДок.ToString("dd.MM.yyyy HH:mm:ss"));
              
            xmlWriter.WriteEndElement(); //ДатаДок
            xmlWriter.WriteStartElement("Контрагент");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Контрагенти");
                    xmlWriter.WriteAttributeString("uid", obj.Контрагент.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Контрагент.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Контрагент
            xmlWriter.WriteStartElement("Організація");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Організації");
                    xmlWriter.WriteAttributeString("uid", obj.Організація.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Організація.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Організація
            xmlWriter.WriteStartElement("Валюта");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Валюти");
                    xmlWriter.WriteAttributeString("uid", obj.Валюта.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Валюта.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Валюта
            xmlWriter.WriteStartElement("СумаДокументу");
            xmlWriter.WriteAttributeString("type", "numeric");
            
                xmlWriter.WriteValue(obj.СумаДокументу);
              
            xmlWriter.WriteEndElement(); //СумаДокументу
            xmlWriter.WriteStartElement("Склад");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Склади");
                    xmlWriter.WriteAttributeString("uid", obj.Склад.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Склад.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Склад
            xmlWriter.WriteStartElement("Каса");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Каси");
                    xmlWriter.WriteAttributeString("uid", obj.Каса.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Каса.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Каса
                /*  Табличні частини */
                xmlWriter.WriteStartElement("TabularParts");
                
                    xmlWriter.WriteStartElement("TablePart");
                    xmlWriter.WriteAttributeString("name", "Товари");

                    foreach(ЗамовленняКлієнта_Товари_TablePart.Record record in obj.Товари_TablePart.Records)
                    {
                        xmlWriter.WriteStartElement("row");
                        xmlWriter.WriteAttributeString("uid", record.UID.ToString());
                        
                        xmlWriter.WriteStartElement("НомерРядка");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.НомерРядка);
                          
                        xmlWriter.WriteEndElement(); //НомерРядка
                        xmlWriter.WriteStartElement("Номенклатура");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.Номенклатура");
                                xmlWriter.WriteAttributeString("uid", record.Номенклатура.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Номенклатура.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Номенклатура
                        xmlWriter.WriteStartElement("ХарактеристикаНоменклатури");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ХарактеристикиНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.ХарактеристикаНоменклатури.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.ХарактеристикаНоменклатури.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //ХарактеристикаНоменклатури
                        xmlWriter.WriteStartElement("Пакування");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ПакуванняОдиниціВиміру");
                                xmlWriter.WriteAttributeString("uid", record.Пакування.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Пакування.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Пакування
                        xmlWriter.WriteStartElement("КількістьУпаковок");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.КількістьУпаковок);
                          
                        xmlWriter.WriteEndElement(); //КількістьУпаковок
                        xmlWriter.WriteStartElement("Кількість");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Кількість);
                          
                        xmlWriter.WriteEndElement(); //Кількість
                        xmlWriter.WriteStartElement("Ціна");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Ціна);
                          
                        xmlWriter.WriteEndElement(); //Ціна
                        xmlWriter.WriteStartElement("Сума");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Сума);
                          
                        xmlWriter.WriteEndElement(); //Сума
                        xmlWriter.WriteEndElement(); //row
                    }

                    xmlWriter.WriteEndElement(); //TablePart
                
                xmlWriter.WriteEndElement(); //TabularParts
            

            xmlWriter.WriteEndElement(); //root
            xmlWriter.WriteEndDocument();
            xmlWriter.Close();
          
        }
    }

    #endregion
    
    #region DOCUMENT "РеалізаціяТоварівТаПослуг"
    public static class РеалізаціяТоварівТаПослуг_Const
    {
        public const string TABLE = "tab_a36";
        public const string TYPE = "РеалізаціяТоварівТаПослуг"; /* Назва вказівника */
        public const string POINTER = "Документи.РеалізаціяТоварівТаПослуг"; /* Повна назва вказівника */
        public const string FULLNAME = "Реалізація товарів та послуг"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_a1";
        public const string Валюта = "col_a2";
        public const string БанківськийРахунокОрганізації = "col_a3";
        public const string БанківськийРахунокКонтрагента = "col_a4";
        public const string ДатаОплати = "col_a5";
        public const string ЗамовленняКлієнта = "col_a6";
        public const string Контрагент = "col_a7";
        public const string СумаДокументу = "col_a8";
        public const string Підрозділ = "col_a9";
        public const string Склад = "col_b1";
        public const string ФормаОплати = "col_b3";
        public const string ГосподарськаОперація = "col_b4";
        public const string Каса = "col_b5";
        public const string Договір = "col_b6";
        public const string Основа = "col_b7";
        public const string Статус = "col_b8";
        public const string Автор = "col_b9";
        public const string СумаПередоплати = "col_c1";
        public const string СумаПередоплатиЗаТару = "col_c2";
        public const string СпосібДоставки = "col_c3";
        public const string ЧасДоставкиЗ = "col_c4";
        public const string ЧасДоставкиДо = "col_c5";
        public const string ПовернутиТару = "col_c6";
        public const string ДатаПоверненняТари = "col_c7";
        public const string Курс = "col_c8";
        public const string Кратність = "col_d2";
        public const string Коментар = "col_b2";
        public const string Менеджер = "col_c9";
        public const string КлючовіСловаДляПошуку = "col_d1";
    }

    public class РеалізаціяТоварівТаПослуг_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public РеалізаціяТоварівТаПослуг_Objest() : base(Config.Kernel, "tab_a36", РеалізаціяТоварівТаПослуг_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", "col_b3", "col_b4", "col_b5", "col_b6", "col_b7", "col_b8", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c8", "col_d2", "col_b2", "col_c9", "col_d1", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new РеалізаціяТоварівТаПослуг_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, РеалізаціяТоварівТаПослуг_Const.FULLNAME + " *");
            
                await РеалізаціяТоварівТаПослуг_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a1"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a2"]);
                БанківськийРахунокОрганізації = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_a3"]);
                БанківськийРахунокКонтрагента = new Довідники.БанківськіРахункиКонтрагентів_Pointer(base.FieldValue["col_a4"]);
                ДатаОплати = (base.FieldValue["col_a5"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_a5"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                ЗамовленняКлієнта = new Документи.ЗамовленняКлієнта_Pointer(base.FieldValue["col_a6"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_a7"]);
                СумаДокументу = (base.FieldValue["col_a8"] != DBNull.Value) ? (decimal)base.FieldValue["col_a8"] : 0;
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a9"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_b1"]);
                ФормаОплати = (base.FieldValue["col_b3"] != DBNull.Value) ? (Перелічення.ФормаОплати)base.FieldValue["col_b3"] : 0;
                ГосподарськаОперація = (base.FieldValue["col_b4"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_b4"] : 0;
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_b5"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_b6"]);
                Основа = (base.FieldValue["col_b7"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_b7"] : new UuidAndText();
                Статус = (base.FieldValue["col_b8"] != DBNull.Value) ? (Перелічення.СтатусиРеалізаціїТоварівТаПослуг)base.FieldValue["col_b8"] : 0;
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_b9"]);
                СумаПередоплати = (base.FieldValue["col_c1"] != DBNull.Value) ? (decimal)base.FieldValue["col_c1"] : 0;
                СумаПередоплатиЗаТару = (base.FieldValue["col_c2"] != DBNull.Value) ? (decimal)base.FieldValue["col_c2"] : 0;
                СпосібДоставки = (base.FieldValue["col_c3"] != DBNull.Value) ? (Перелічення.СпособиДоставки)base.FieldValue["col_c3"] : 0;
                ЧасДоставкиЗ = (base.FieldValue["col_c4"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_c4"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ЧасДоставкиДо = (base.FieldValue["col_c5"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_c5"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ПовернутиТару = (base.FieldValue["col_c6"] != DBNull.Value) ? (bool)base.FieldValue["col_c6"] : false;
                ДатаПоверненняТари = (base.FieldValue["col_c7"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["col_c7"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Курс = (base.FieldValue["col_c8"] != DBNull.Value) ? (decimal)base.FieldValue["col_c8"] : 0;
                Кратність = (base.FieldValue["col_d2"] != DBNull.Value) ? (int)base.FieldValue["col_d2"] : 0;
                Коментар = base.FieldValue["col_b2"].ToString() ?? "";
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_c9"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_d1"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await РеалізаціяТоварівТаПослуг_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a1"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a3"] = БанківськийРахунокОрганізації.UnigueID.UGuid;
            base.FieldValue["col_a4"] = БанківськийРахунокКонтрагента.UnigueID.UGuid;
            base.FieldValue["col_a5"] = ДатаОплати;
            base.FieldValue["col_a6"] = ЗамовленняКлієнта.UnigueID.UGuid;
            base.FieldValue["col_a7"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_a8"] = СумаДокументу;
            base.FieldValue["col_a9"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_b1"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_b3"] = (int)ФормаОплати;
            base.FieldValue["col_b4"] = (int)ГосподарськаОперація;
            base.FieldValue["col_b5"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_b6"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_b7"] = Основа;
            base.FieldValue["col_b8"] = (int)Статус;
            base.FieldValue["col_b9"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_c1"] = СумаПередоплати;
            base.FieldValue["col_c2"] = СумаПередоплатиЗаТару;
            base.FieldValue["col_c3"] = (int)СпосібДоставки;
            base.FieldValue["col_c4"] = ЧасДоставкиЗ;
            base.FieldValue["col_c5"] = ЧасДоставкиДо;
            base.FieldValue["col_c6"] = ПовернутиТару;
            base.FieldValue["col_c7"] = ДатаПоверненняТари;
            base.FieldValue["col_c8"] = Курс;
            base.FieldValue["col_d2"] = Кратність;
            base.FieldValue["col_b2"] = Коментар;
            base.FieldValue["col_c9"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_d1"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await РеалізаціяТоварівТаПослуг_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ЗамовленняКлієнтів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Продажі_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<РеалізаціяТоварівТаПослуг_Objest> Copy(bool copyTableParts = false)
        {
            РеалізаціяТоварівТаПослуг_Objest copy = new РеалізаціяТоварівТаПослуг_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Валюта = Валюта,
                БанківськийРахунокОрганізації = БанківськийРахунокОрганізації,
                БанківськийРахунокКонтрагента = БанківськийРахунокКонтрагента,
                ДатаОплати = ДатаОплати,
                ЗамовленняКлієнта = ЗамовленняКлієнта,
                Контрагент = Контрагент,
                СумаДокументу = СумаДокументу,
                Підрозділ = Підрозділ,
                Склад = Склад,
                ФормаОплати = ФормаОплати,
                ГосподарськаОперація = ГосподарськаОперація,
                Каса = Каса,
                Договір = Договір,
                Основа = Основа,
                Статус = Статус,
                Автор = Автор,
                СумаПередоплати = СумаПередоплати,
                СумаПередоплатиЗаТару = СумаПередоплатиЗаТару,
                СпосібДоставки = СпосібДоставки,
                ЧасДоставкиЗ = ЧасДоставкиЗ,
                ЧасДоставкиДо = ЧасДоставкиДо,
                ПовернутиТару = ПовернутиТару,
                ДатаПоверненняТари = ДатаПоверненняТари,
                Курс = Курс,
                Кратність = Кратність,
                Коментар = Коментар,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await РеалізаціяТоварівТаПослуг_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a37", ]);
        }
        
        public РеалізаціяТоварівТаПослуг_Pointer GetDocumentPointer()
        {
            return new РеалізаціяТоварівТаПослуг_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(РеалізаціяТоварівТаПослуг_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунокОрганізації { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.БанківськіРахункиКонтрагентів_Pointer БанківськийРахунокКонтрагента { get; set; } = new Довідники.БанківськіРахункиКонтрагентів_Pointer();
        public DateTime ДатаОплати { get; set; } = DateTime.MinValue;
        public Документи.ЗамовленняКлієнта_Pointer ЗамовленняКлієнта { get; set; } = new Документи.ЗамовленняКлієнта_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Перелічення.ФормаОплати ФормаОплати { get; set; } = 0;
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public Перелічення.СтатусиРеалізаціїТоварівТаПослуг Статус { get; set; } = 0;
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public decimal СумаПередоплати { get; set; } = 0;
        public decimal СумаПередоплатиЗаТару { get; set; } = 0;
        public Перелічення.СпособиДоставки СпосібДоставки { get; set; } = 0;
        public TimeSpan ЧасДоставкиЗ { get; set; } = DateTime.MinValue.TimeOfDay;
        public TimeSpan ЧасДоставкиДо { get; set; } = DateTime.MinValue.TimeOfDay;
        public bool ПовернутиТару { get; set; } = false;
        public DateTime ДатаПоверненняТари { get; set; } = DateTime.MinValue;
        public decimal Курс { get; set; } = 0;
        public int Кратність { get; set; } = 0;
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public РеалізаціяТоварівТаПослуг_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class РеалізаціяТоварівТаПослуг_Pointer : DocumentPointer
    {
        public РеалізаціяТоварівТаПослуг_Pointer(object? uid = null) : base(Config.Kernel, "tab_a36", РеалізаціяТоварівТаПослуг_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public РеалізаціяТоварівТаПослуг_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a36", "РеалізаціяТоварівТаПослуг")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(РеалізаціяТоварівТаПослуг_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [РеалізаціяТоварівТаПослуг_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{РеалізаціяТоварівТаПослуг_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(РеалізаціяТоварівТаПослуг_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            РеалізаціяТоварівТаПослуг_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ЗамовленняКлієнтів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Продажі_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public РеалізаціяТоварівТаПослуг_Pointer Copy()
        {
            return new РеалізаціяТоварівТаПослуг_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public РеалізаціяТоварівТаПослуг_Pointer GetEmptyPointer()
        {
            return new РеалізаціяТоварівТаПослуг_Pointer();
        }

        public async ValueTask<РеалізаціяТоварівТаПослуг_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            РеалізаціяТоварівТаПослуг_Objest obj = new РеалізаціяТоварівТаПослуг_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class РеалізаціяТоварівТаПослуг_Select : DocumentSelect
    {		
        public РеалізаціяТоварівТаПослуг_Select() : base(Config.Kernel, "tab_a36") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new РеалізаціяТоварівТаПослуг_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public РеалізаціяТоварівТаПослуг_Pointer? Current { get; private set; }

        public async ValueTask<РеалізаціяТоварівТаПослуг_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new РеалізаціяТоварівТаПослуг_Pointer(pointer) : new РеалізаціяТоварівТаПослуг_Pointer();
        }
        
        public async ValueTask<List<РеалізаціяТоварівТаПослуг_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<РеалізаціяТоварівТаПослуг_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new РеалізаціяТоварівТаПослуг_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class РеалізаціяТоварівТаПослуг_Товари_TablePart : DocumentTablePart
    {
        public РеалізаціяТоварівТаПослуг_Товари_TablePart(РеалізаціяТоварівТаПослуг_Objest owner) : base(Config.Kernel, "tab_a37",
             ["col_a1", "col_d2", "col_d3", "col_a2", "col_d4", "col_d5", "col_d6", "col_d7", "col_d8", "col_d9", "col_e1", "col_e2", "col_a3", "col_e3", "col_a4", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a37";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_d2";
        public const string ХарактеристикаНоменклатури = "col_d3";
        public const string Серія = "col_a2";
        public const string Пакування = "col_d4";
        public const string КількістьУпаковок = "col_d5";
        public const string Кількість = "col_d6";
        public const string ВидЦіни = "col_d7";
        public const string Ціна = "col_d8";
        public const string Сума = "col_d9";
        public const string Склад = "col_e1";
        public const string ЗамовленняКлієнта = "col_e2";
        public const string РахунокФактура = "col_a3";
        public const string Скидка = "col_e3";
        public const string Партія = "col_a4";

        public РеалізаціяТоварівТаПослуг_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a37", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a37", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a37", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a37", "join_tab_5", "Пакування");
                Довідники.ВидиЦін_Pointer.GetJoin(QuerySelect, ВидЦіни, "tab_a37", "join_tab_8", "ВидЦіни");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_a37", "join_tab_11", "Склад");
                Документи.ЗамовленняКлієнта_Pointer.GetJoin(QuerySelect, ЗамовленняКлієнта, "tab_a37", "join_tab_12", "ЗамовленняКлієнта");
                Документи.РахунокФактура_Pointer.GetJoin(QuerySelect, РахунокФактура, "tab_a37", "join_tab_13", "РахунокФактура");
                Довідники.ПартіяТоварівКомпозит_Pointer.GetJoin(QuerySelect, Партія, "tab_a37", "join_tab_15", "Партія");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_d2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_d3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a2"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_d4"]),
                    КількістьУпаковок = (fieldValue["col_d5"] != DBNull.Value) ? (int)fieldValue["col_d5"] : 0,
                    Кількість = (fieldValue["col_d6"] != DBNull.Value) ? (decimal)fieldValue["col_d6"] : 0,
                    ВидЦіни = new Довідники.ВидиЦін_Pointer(fieldValue["col_d7"]),
                    Ціна = (fieldValue["col_d8"] != DBNull.Value) ? (decimal)fieldValue["col_d8"] : 0,
                    Сума = (fieldValue["col_d9"] != DBNull.Value) ? (decimal)fieldValue["col_d9"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_e1"]),
                    ЗамовленняКлієнта = new Документи.ЗамовленняКлієнта_Pointer(fieldValue["col_e2"]),
                    РахунокФактура = new Документи.РахунокФактура_Pointer(fieldValue["col_a3"]),
                    Скидка = (fieldValue["col_e3"] != DBNull.Value) ? (decimal)fieldValue["col_e3"] : 0,
                    Партія = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a4"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ВидЦіни.Name = ItemValue["ВидЦіни"];
                      record.Склад.Name = ItemValue["Склад"];
                      record.ЗамовленняКлієнта.Name = ItemValue["ЗамовленняКлієнта"];
                      record.РахунокФактура.Name = ItemValue["РахунокФактура"];
                      record.Партія.Name = ItemValue["Партія"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a36"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_d2", record.Номенклатура.UnigueID.UGuid},
                    {"col_d3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a2", record.Серія.UnigueID.UGuid},
                    {"col_d4", record.Пакування.UnigueID.UGuid},
                    {"col_d5", record.КількістьУпаковок},
                    {"col_d6", record.Кількість},
                    {"col_d7", record.ВидЦіни.UnigueID.UGuid},
                    {"col_d8", record.Ціна},
                    {"col_d9", record.Сума},
                    {"col_e1", record.Склад.UnigueID.UGuid},
                    {"col_e2", record.ЗамовленняКлієнта.UnigueID.UGuid},
                    {"col_a3", record.РахунокФактура.UnigueID.UGuid},
                    {"col_e3", record.Скидка},
                    {"col_a4", record.Партія.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Документи.ЗамовленняКлієнта_Pointer ЗамовленняКлієнта { get; set; } = new Документи.ЗамовленняКлієнта_Pointer();
            public Документи.РахунокФактура_Pointer РахунокФактура { get; set; } = new Документи.РахунокФактура_Pointer();
            public decimal Скидка { get; set; } = 0;
            public Довідники.ПартіяТоварівКомпозит_Pointer Партія { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            
        }
    }
      
    
    public static class РеалізаціяТоварівТаПослуг_Export
    {
        public static async ValueTask ToXmlFile(РеалізаціяТоварівТаПослуг_Pointer РеалізаціяТоварівТаПослуг, string pathToSave)
        {
        РеалізаціяТоварівТаПослуг_Objest? obj = await РеалізаціяТоварівТаПослуг.GetDocumentObject(true);
            if (obj == null) return;

            XmlWriter xmlWriter = XmlWriter.Create(pathToSave, new XmlWriterSettings() { Indent = true, Encoding = System.Text.Encoding.UTF8 });
            xmlWriter.WriteStartDocument();
            xmlWriter.WriteStartElement("Document");
            xmlWriter.WriteAttributeString("uid", obj.UnigueID.ToString());
            
            xmlWriter.WriteStartElement("Назва");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.Назва);
              
            xmlWriter.WriteEndElement(); //Назва
            xmlWriter.WriteStartElement("НомерДок");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.НомерДок);
              
            xmlWriter.WriteEndElement(); //НомерДок
            xmlWriter.WriteStartElement("ДатаДок");
            xmlWriter.WriteAttributeString("type", "datetime");
            
                xmlWriter.WriteValue(obj.ДатаДок.ToString("dd.MM.yyyy HH:mm:ss"));
              
            xmlWriter.WriteEndElement(); //ДатаДок
            xmlWriter.WriteStartElement("Організація");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Організації");
                    xmlWriter.WriteAttributeString("uid", obj.Організація.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Організація.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Організація
            xmlWriter.WriteStartElement("Валюта");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Валюти");
                    xmlWriter.WriteAttributeString("uid", obj.Валюта.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Валюта.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Валюта
            xmlWriter.WriteStartElement("Контрагент");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Контрагенти");
                    xmlWriter.WriteAttributeString("uid", obj.Контрагент.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Контрагент.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Контрагент
            xmlWriter.WriteStartElement("СумаДокументу");
            xmlWriter.WriteAttributeString("type", "numeric");
            
                xmlWriter.WriteValue(obj.СумаДокументу);
              
            xmlWriter.WriteEndElement(); //СумаДокументу
            xmlWriter.WriteStartElement("Склад");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Склади");
                    xmlWriter.WriteAttributeString("uid", obj.Склад.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Склад.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Склад
            xmlWriter.WriteStartElement("Каса");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Каси");
                    xmlWriter.WriteAttributeString("uid", obj.Каса.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Каса.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Каса
                /*  Табличні частини */
                xmlWriter.WriteStartElement("TabularParts");
                
                    xmlWriter.WriteStartElement("TablePart");
                    xmlWriter.WriteAttributeString("name", "Товари");

                    foreach(РеалізаціяТоварівТаПослуг_Товари_TablePart.Record record in obj.Товари_TablePart.Records)
                    {
                        xmlWriter.WriteStartElement("row");
                        xmlWriter.WriteAttributeString("uid", record.UID.ToString());
                        
                        xmlWriter.WriteStartElement("НомерРядка");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.НомерРядка);
                          
                        xmlWriter.WriteEndElement(); //НомерРядка
                        xmlWriter.WriteStartElement("Номенклатура");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.Номенклатура");
                                xmlWriter.WriteAttributeString("uid", record.Номенклатура.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Номенклатура.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Номенклатура
                        xmlWriter.WriteStartElement("ХарактеристикаНоменклатури");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ХарактеристикиНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.ХарактеристикаНоменклатури.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.ХарактеристикаНоменклатури.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //ХарактеристикаНоменклатури
                        xmlWriter.WriteStartElement("Серія");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.СеріїНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.Серія.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Серія.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Серія
                        xmlWriter.WriteStartElement("Пакування");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ПакуванняОдиниціВиміру");
                                xmlWriter.WriteAttributeString("uid", record.Пакування.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Пакування.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Пакування
                        xmlWriter.WriteStartElement("КількістьУпаковок");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.КількістьУпаковок);
                          
                        xmlWriter.WriteEndElement(); //КількістьУпаковок
                        xmlWriter.WriteStartElement("Кількість");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Кількість);
                          
                        xmlWriter.WriteEndElement(); //Кількість
                        xmlWriter.WriteStartElement("Ціна");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Ціна);
                          
                        xmlWriter.WriteEndElement(); //Ціна
                        xmlWriter.WriteStartElement("Сума");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Сума);
                          
                        xmlWriter.WriteEndElement(); //Сума
                        xmlWriter.WriteEndElement(); //row
                    }

                    xmlWriter.WriteEndElement(); //TablePart
                
                xmlWriter.WriteEndElement(); //TabularParts
            

            xmlWriter.WriteEndElement(); //root
            xmlWriter.WriteEndDocument();
            xmlWriter.Close();
          
        }
    }

    #endregion
    
    #region DOCUMENT "ВстановленняЦінНоменклатури"
    public static class ВстановленняЦінНоменклатури_Const
    {
        public const string TABLE = "tab_a42";
        public const string TYPE = "ВстановленняЦінНоменклатури"; /* Назва вказівника */
        public const string POINTER = "Документи.ВстановленняЦінНоменклатури"; /* Повна назва вказівника */
        public const string FULLNAME = "Встановлення цін номенклатури"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_a2";
        public const string Валюта = "col_a1";
        public const string ВидЦіни = "col_a3";
        public const string Коментар = "col_g9";
        public const string Автор = "col_a4";
        public const string КлючовіСловаДляПошуку = "col_a5";
        public const string Основа = "col_a6";
    }

    public class ВстановленняЦінНоменклатури_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ВстановленняЦінНоменклатури_Objest() : base(Config.Kernel, "tab_a42", ВстановленняЦінНоменклатури_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a2", "col_a1", "col_a3", "col_g9", "col_a4", "col_a5", "col_a6", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ВстановленняЦінНоменклатури_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ВстановленняЦінНоменклатури_Const.FULLNAME + " *");
            
                await ВстановленняЦінНоменклатури_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a2"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a1"]);
                ВидЦіни = new Довідники.ВидиЦін_Pointer(base.FieldValue["col_a3"]);
                Коментар = base.FieldValue["col_g9"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a4"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a5"].ToString() ?? "";
                Основа = (base.FieldValue["col_a6"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a6"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ВстановленняЦінНоменклатури_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a2"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a1"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a3"] = ВидЦіни.UnigueID.UGuid;
            base.FieldValue["col_g9"] = Коментар;
            base.FieldValue["col_a4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a5"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a6"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ВстановленняЦінНоменклатури_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await ВстановленняЦінНоменклатури_SpendTheDocument.ClearSpend(this);
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ВстановленняЦінНоменклатури_Objest> Copy(bool copyTableParts = false)
        {
            ВстановленняЦінНоменклатури_Objest copy = new ВстановленняЦінНоменклатури_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Валюта = Валюта,
                ВидЦіни = ВидЦіни,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ВстановленняЦінНоменклатури_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a43", ]);
        }
        
        public ВстановленняЦінНоменклатури_Pointer GetDocumentPointer()
        {
            return new ВстановленняЦінНоменклатури_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ВстановленняЦінНоменклатури_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ВстановленняЦінНоменклатури_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ВстановленняЦінНоменклатури_Pointer : DocumentPointer
    {
        public ВстановленняЦінНоменклатури_Pointer(object? uid = null) : base(Config.Kernel, "tab_a42", ВстановленняЦінНоменклатури_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ВстановленняЦінНоменклатури_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a42", "ВстановленняЦінНоменклатури")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ВстановленняЦінНоменклатури_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ВстановленняЦінНоменклатури_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ВстановленняЦінНоменклатури_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ВстановленняЦінНоменклатури_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ВстановленняЦінНоменклатури_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            ВстановленняЦінНоменклатури_Objest? obj = await GetDocumentObject();
            if (obj != null) await obj.ClearSpendTheDocument();
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          ВстановленняЦінНоменклатури_Objest? obj = await GetDocumentObject();
            if (obj == null) return;
            
            if (label) await obj.ClearSpendTheDocument();
            
          await base.BaseDeletionLabel(label);
        }

        public ВстановленняЦінНоменклатури_Pointer Copy()
        {
            return new ВстановленняЦінНоменклатури_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ВстановленняЦінНоменклатури_Pointer GetEmptyPointer()
        {
            return new ВстановленняЦінНоменклатури_Pointer();
        }

        public async ValueTask<ВстановленняЦінНоменклатури_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ВстановленняЦінНоменклатури_Objest obj = new ВстановленняЦінНоменклатури_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ВстановленняЦінНоменклатури_Select : DocumentSelect
    {		
        public ВстановленняЦінНоменклатури_Select() : base(Config.Kernel, "tab_a42") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ВстановленняЦінНоменклатури_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ВстановленняЦінНоменклатури_Pointer? Current { get; private set; }

        public async ValueTask<ВстановленняЦінНоменклатури_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ВстановленняЦінНоменклатури_Pointer(pointer) : new ВстановленняЦінНоменклатури_Pointer();
        }
        
        public async ValueTask<List<ВстановленняЦінНоменклатури_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ВстановленняЦінНоменклатури_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ВстановленняЦінНоменклатури_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ВстановленняЦінНоменклатури_Товари_TablePart : DocumentTablePart
    {
        public ВстановленняЦінНоменклатури_Товари_TablePart(ВстановленняЦінНоменклатури_Objest owner) : base(Config.Kernel, "tab_a43",
             ["col_a1", "col_h1", "col_h2", "col_h3", "col_h4", "col_h5", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a43";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_h1";
        public const string ХарактеристикаНоменклатури = "col_h2";
        public const string Пакування = "col_h3";
        public const string ВидЦіни = "col_h4";
        public const string Ціна = "col_h5";

        public ВстановленняЦінНоменклатури_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a43", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a43", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a43", "join_tab_4", "Пакування");
                Довідники.ВидиЦін_Pointer.GetJoin(QuerySelect, ВидЦіни, "tab_a43", "join_tab_5", "ВидЦіни");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_h1"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_h2"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_h3"]),
                    ВидЦіни = new Довідники.ВидиЦін_Pointer(fieldValue["col_h4"]),
                    Ціна = (fieldValue["col_h5"] != DBNull.Value) ? (decimal)fieldValue["col_h5"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ВидЦіни.Name = ItemValue["ВидЦіни"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a42"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_h1", record.Номенклатура.UnigueID.UGuid},
                    {"col_h2", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_h3", record.Пакування.UnigueID.UGuid},
                    {"col_h4", record.ВидЦіни.UnigueID.UGuid},
                    {"col_h5", record.Ціна},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
            public decimal Ціна { get; set; } = 0;
            
        }
    }
      
    
    public static class ВстановленняЦінНоменклатури_Export
    {
        public static async ValueTask ToXmlFile(ВстановленняЦінНоменклатури_Pointer ВстановленняЦінНоменклатури, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПрихіднийКасовийОрдер"
    public static class ПрихіднийКасовийОрдер_Const
    {
        public const string TABLE = "tab_a44";
        public const string TYPE = "ПрихіднийКасовийОрдер"; /* Назва вказівника */
        public const string POINTER = "Документи.ПрихіднийКасовийОрдер"; /* Повна назва вказівника */
        public const string FULLNAME = "Прихідний касовий ордер"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_h8";
        public const string Каса = "col_h9";
        public const string СумаДокументу = "col_i1";
        public const string ГосподарськаОперація = "col_i2";
        public const string Основа = "col_i3";
        public const string Контрагент = "col_i4";
        public const string Договір = "col_a6";
        public const string БанківськийРахунок = "col_i5";
        public const string Валюта = "col_i6";
        public const string СтаттяРухуКоштів = "col_a1";
        public const string КасаВідправник = "col_a2";
        public const string Курс = "col_a4";
        public const string Коментар = "col_a3";
        public const string Автор = "col_a5";
        public const string КлючовіСловаДляПошуку = "col_a7";
    }

    public class ПрихіднийКасовийОрдер_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПрихіднийКасовийОрдер_Objest() : base(Config.Kernel, "tab_a44", ПрихіднийКасовийОрдер_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_h8", "col_h9", "col_i1", "col_i2", "col_i3", "col_i4", "col_a6", "col_i5", "col_i6", "col_a1", "col_a2", "col_a4", "col_a3", "col_a5", "col_a7", ], true)
        {
            
                //Табличні частини
                РозшифруванняПлатежу_TablePart = new ПрихіднийКасовийОрдер_РозшифруванняПлатежу_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПрихіднийКасовийОрдер_Const.FULLNAME + " *");
            
                await ПрихіднийКасовийОрдер_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_h8"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_h9"]);
                СумаДокументу = (base.FieldValue["col_i1"] != DBNull.Value) ? (decimal)base.FieldValue["col_i1"] : 0;
                ГосподарськаОперація = (base.FieldValue["col_i2"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_i2"] : 0;
                Основа = (base.FieldValue["col_i3"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_i3"] : new UuidAndText();
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_i4"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_a6"]);
                БанківськийРахунок = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_i5"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_i6"]);
                СтаттяРухуКоштів = new Довідники.СтаттяРухуКоштів_Pointer(base.FieldValue["col_a1"]);
                КасаВідправник = new Довідники.Каси_Pointer(base.FieldValue["col_a2"]);
                Курс = (base.FieldValue["col_a4"] != DBNull.Value) ? (decimal)base.FieldValue["col_a4"] : 0;
                Коментар = base.FieldValue["col_a3"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a5"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a7"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await РозшифруванняПлатежу_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПрихіднийКасовийОрдер_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_h8"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_h9"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_i1"] = СумаДокументу;
            base.FieldValue["col_i2"] = (int)ГосподарськаОперація;
            base.FieldValue["col_i3"] = Основа;
            base.FieldValue["col_i4"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_i5"] = БанківськийРахунок.UnigueID.UGuid;
            base.FieldValue["col_i6"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a1"] = СтаттяРухуКоштів.UnigueID.UGuid;
            base.FieldValue["col_a2"] = КасаВідправник.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Курс;
            base.FieldValue["col_a3"] = Коментар;
            base.FieldValue["col_a5"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a7"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПрихіднийКасовийОрдер_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПрихіднийКасовийОрдер_Objest> Copy(bool copyTableParts = false)
        {
            ПрихіднийКасовийОрдер_Objest copy = new ПрихіднийКасовийОрдер_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Каса = Каса,
                СумаДокументу = СумаДокументу,
                ГосподарськаОперація = ГосподарськаОперація,
                Основа = Основа,
                Контрагент = Контрагент,
                Договір = Договір,
                БанківськийРахунок = БанківськийРахунок,
                Валюта = Валюта,
                СтаттяРухуКоштів = СтаттяРухуКоштів,
                КасаВідправник = КасаВідправник,
                Курс = Курс,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //РозшифруванняПлатежу - Таблична частина
                await РозшифруванняПлатежу_TablePart.Read();
                copy.РозшифруванняПлатежу_TablePart.Records = РозшифруванняПлатежу_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПрихіднийКасовийОрдер_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a47", ]);
        }
        
        public ПрихіднийКасовийОрдер_Pointer GetDocumentPointer()
        {
            return new ПрихіднийКасовийОрдер_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПрихіднийКасовийОрдер_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунок { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.СтаттяРухуКоштів_Pointer СтаттяРухуКоштів { get; set; } = new Довідники.СтаттяРухуКоштів_Pointer();
        public Довідники.Каси_Pointer КасаВідправник { get; set; } = new Довідники.Каси_Pointer();
        public decimal Курс { get; set; } = 0;
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ПрихіднийКасовийОрдер_РозшифруванняПлатежу_TablePart РозшифруванняПлатежу_TablePart { get; set; }
        
    }
    
    public class ПрихіднийКасовийОрдер_Pointer : DocumentPointer
    {
        public ПрихіднийКасовийОрдер_Pointer(object? uid = null) : base(Config.Kernel, "tab_a44", ПрихіднийКасовийОрдер_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПрихіднийКасовийОрдер_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a44", "ПрихіднийКасовийОрдер")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПрихіднийКасовийОрдер_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПрихіднийКасовийОрдер_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПрихіднийКасовийОрдер_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПрихіднийКасовийОрдер_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПрихіднийКасовийОрдер_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПрихіднийКасовийОрдер_Pointer Copy()
        {
            return new ПрихіднийКасовийОрдер_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПрихіднийКасовийОрдер_Pointer GetEmptyPointer()
        {
            return new ПрихіднийКасовийОрдер_Pointer();
        }

        public async ValueTask<ПрихіднийКасовийОрдер_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПрихіднийКасовийОрдер_Objest obj = new ПрихіднийКасовийОрдер_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПрихіднийКасовийОрдер_Select : DocumentSelect
    {		
        public ПрихіднийКасовийОрдер_Select() : base(Config.Kernel, "tab_a44") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПрихіднийКасовийОрдер_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПрихіднийКасовийОрдер_Pointer? Current { get; private set; }

        public async ValueTask<ПрихіднийКасовийОрдер_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПрихіднийКасовийОрдер_Pointer(pointer) : new ПрихіднийКасовийОрдер_Pointer();
        }
        
        public async ValueTask<List<ПрихіднийКасовийОрдер_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПрихіднийКасовийОрдер_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПрихіднийКасовийОрдер_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПрихіднийКасовийОрдер_РозшифруванняПлатежу_TablePart : DocumentTablePart
    {
        public ПрихіднийКасовийОрдер_РозшифруванняПлатежу_TablePart(ПрихіднийКасовийОрдер_Objest owner) : base(Config.Kernel, "tab_a47",
             ["col_a1", "col_j4", "col_j5", "col_j6", "col_j7", "col_j8", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a47";
        
        public const string НомерРядка = "col_a1";
        public const string Замовлення = "col_j4";
        public const string Сума = "col_j5";
        public const string Підрозділ = "col_j6";
        public const string ВалютаВзаєморозрахунків = "col_j7";
        public const string Організація = "col_j8";

        public ПрихіднийКасовийОрдер_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.СтруктураПідприємства_Pointer.GetJoin(QuerySelect, Підрозділ, "tab_a47", "join_tab_4", "Підрозділ");
                Довідники.Валюти_Pointer.GetJoin(QuerySelect, ВалютаВзаєморозрахунків, "tab_a47", "join_tab_5", "ВалютаВзаєморозрахунків");
                Довідники.Організації_Pointer.GetJoin(QuerySelect, Організація, "tab_a47", "join_tab_6", "Організація");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Замовлення = fieldValue["col_j4"].ToString() ?? "",
                    Сума = (fieldValue["col_j5"] != DBNull.Value) ? (decimal)fieldValue["col_j5"] : 0,
                    Підрозділ = new Довідники.СтруктураПідприємства_Pointer(fieldValue["col_j6"]),
                    ВалютаВзаєморозрахунків = new Довідники.Валюти_Pointer(fieldValue["col_j7"]),
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_j8"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Підрозділ.Name = ItemValue["Підрозділ"];
                      record.ВалютаВзаєморозрахунків.Name = ItemValue["ВалютаВзаєморозрахунків"];
                      record.Організація.Name = ItemValue["Організація"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a44"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_j4", record.Замовлення},
                    {"col_j5", record.Сума},
                    {"col_j6", record.Підрозділ.UnigueID.UGuid},
                    {"col_j7", record.ВалютаВзаєморозрахунків.UnigueID.UGuid},
                    {"col_j8", record.Організація.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public string Замовлення { get; set; } = "";
            public decimal Сума { get; set; } = 0;
            public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
            public Довідники.Валюти_Pointer ВалютаВзаєморозрахунків { get; set; } = new Довідники.Валюти_Pointer();
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            
        }
    }
      
    
    public static class ПрихіднийКасовийОрдер_Export
    {
        public static async ValueTask ToXmlFile(ПрихіднийКасовийОрдер_Pointer ПрихіднийКасовийОрдер, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "РозхіднийКасовийОрдер"
    public static class РозхіднийКасовийОрдер_Const
    {
        public const string TABLE = "tab_a48";
        public const string TYPE = "РозхіднийКасовийОрдер"; /* Назва вказівника */
        public const string POINTER = "Документи.РозхіднийКасовийОрдер"; /* Повна назва вказівника */
        public const string FULLNAME = "Розхідний касовий ордер"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_k2";
        public const string Каса = "col_k3";
        public const string СумаДокументу = "col_a3";
        public const string СумаДокументуПоКурсу = "col_a5";
        public const string ГосподарськаОперація = "col_k5";
        public const string ОрганізаціяОтримувач = "col_k4";
        public const string Контрагент = "col_k7";
        public const string Договір = "col_a4";
        public const string БанківськийРахунок = "col_k8";
        public const string Валюта = "col_k9";
        public const string СтаттяРухуКоштів = "col_l2";
        public const string КасаОтримувач = "col_k6";
        public const string Курс = "col_a2";
        public const string Основа = "col_a1";
        public const string Коментар = "col_l1";
        public const string Автор = "col_a6";
        public const string КлючовіСловаДляПошуку = "col_a7";
    }

    public class РозхіднийКасовийОрдер_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public РозхіднийКасовийОрдер_Objest() : base(Config.Kernel, "tab_a48", РозхіднийКасовийОрдер_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_k2", "col_k3", "col_a3", "col_a5", "col_k5", "col_k4", "col_k7", "col_a4", "col_k8", "col_k9", "col_l2", "col_k6", "col_a2", "col_a1", "col_l1", "col_a6", "col_a7", ], true)
        {
            
                //Табличні частини
                РозшифруванняПлатежу_TablePart = new РозхіднийКасовийОрдер_РозшифруванняПлатежу_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, РозхіднийКасовийОрдер_Const.FULLNAME + " *");
            
                await РозхіднийКасовийОрдер_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_k2"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_k3"]);
                СумаДокументу = (base.FieldValue["col_a3"] != DBNull.Value) ? (decimal)base.FieldValue["col_a3"] : 0;
                СумаДокументуПоКурсу = (base.FieldValue["col_a5"] != DBNull.Value) ? (decimal)base.FieldValue["col_a5"] : 0;
                ГосподарськаОперація = (base.FieldValue["col_k5"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_k5"] : 0;
                ОрганізаціяОтримувач = new Довідники.Організації_Pointer(base.FieldValue["col_k4"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_k7"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_a4"]);
                БанківськийРахунок = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_k8"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_k9"]);
                СтаттяРухуКоштів = new Довідники.СтаттяРухуКоштів_Pointer(base.FieldValue["col_l2"]);
                КасаОтримувач = new Довідники.Каси_Pointer(base.FieldValue["col_k6"]);
                Курс = (base.FieldValue["col_a2"] != DBNull.Value) ? (decimal)base.FieldValue["col_a2"] : 0;
                Основа = (base.FieldValue["col_a1"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a1"] : new UuidAndText();
                Коментар = base.FieldValue["col_l1"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a6"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a7"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await РозшифруванняПлатежу_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await РозхіднийКасовийОрдер_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_k2"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_k3"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_a3"] = СумаДокументу;
            base.FieldValue["col_a5"] = СумаДокументуПоКурсу;
            base.FieldValue["col_k5"] = (int)ГосподарськаОперація;
            base.FieldValue["col_k4"] = ОрганізаціяОтримувач.UnigueID.UGuid;
            base.FieldValue["col_k7"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_k8"] = БанківськийРахунок.UnigueID.UGuid;
            base.FieldValue["col_k9"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_l2"] = СтаттяРухуКоштів.UnigueID.UGuid;
            base.FieldValue["col_k6"] = КасаОтримувач.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Курс;
            base.FieldValue["col_a1"] = Основа;
            base.FieldValue["col_l1"] = Коментар;
            base.FieldValue["col_a6"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a7"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await РозхіднийКасовийОрдер_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<РозхіднийКасовийОрдер_Objest> Copy(bool copyTableParts = false)
        {
            РозхіднийКасовийОрдер_Objest copy = new РозхіднийКасовийОрдер_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Каса = Каса,
                СумаДокументу = СумаДокументу,
                СумаДокументуПоКурсу = СумаДокументуПоКурсу,
                ГосподарськаОперація = ГосподарськаОперація,
                ОрганізаціяОтримувач = ОрганізаціяОтримувач,
                Контрагент = Контрагент,
                Договір = Договір,
                БанківськийРахунок = БанківськийРахунок,
                Валюта = Валюта,
                СтаттяРухуКоштів = СтаттяРухуКоштів,
                КасаОтримувач = КасаОтримувач,
                Курс = Курс,
                Основа = Основа,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //РозшифруванняПлатежу - Таблична частина
                await РозшифруванняПлатежу_TablePart.Read();
                copy.РозшифруванняПлатежу_TablePart.Records = РозшифруванняПлатежу_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await РозхіднийКасовийОрдер_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a49", ]);
        }
        
        public РозхіднийКасовийОрдер_Pointer GetDocumentPointer()
        {
            return new РозхіднийКасовийОрдер_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(РозхіднийКасовийОрдер_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public decimal СумаДокументуПоКурсу { get; set; } = 0;
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Довідники.Організації_Pointer ОрганізаціяОтримувач { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунок { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.СтаттяРухуКоштів_Pointer СтаттяРухуКоштів { get; set; } = new Довідники.СтаттяРухуКоштів_Pointer();
        public Довідники.Каси_Pointer КасаОтримувач { get; set; } = new Довідники.Каси_Pointer();
        public decimal Курс { get; set; } = 0;
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public РозхіднийКасовийОрдер_РозшифруванняПлатежу_TablePart РозшифруванняПлатежу_TablePart { get; set; }
        
    }
    
    public class РозхіднийКасовийОрдер_Pointer : DocumentPointer
    {
        public РозхіднийКасовийОрдер_Pointer(object? uid = null) : base(Config.Kernel, "tab_a48", РозхіднийКасовийОрдер_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public РозхіднийКасовийОрдер_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a48", "РозхіднийКасовийОрдер")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(РозхіднийКасовийОрдер_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [РозхіднийКасовийОрдер_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{РозхіднийКасовийОрдер_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(РозхіднийКасовийОрдер_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            РозхіднийКасовийОрдер_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public РозхіднийКасовийОрдер_Pointer Copy()
        {
            return new РозхіднийКасовийОрдер_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public РозхіднийКасовийОрдер_Pointer GetEmptyPointer()
        {
            return new РозхіднийКасовийОрдер_Pointer();
        }

        public async ValueTask<РозхіднийКасовийОрдер_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            РозхіднийКасовийОрдер_Objest obj = new РозхіднийКасовийОрдер_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class РозхіднийКасовийОрдер_Select : DocumentSelect
    {		
        public РозхіднийКасовийОрдер_Select() : base(Config.Kernel, "tab_a48") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new РозхіднийКасовийОрдер_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public РозхіднийКасовийОрдер_Pointer? Current { get; private set; }

        public async ValueTask<РозхіднийКасовийОрдер_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new РозхіднийКасовийОрдер_Pointer(pointer) : new РозхіднийКасовийОрдер_Pointer();
        }
        
        public async ValueTask<List<РозхіднийКасовийОрдер_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<РозхіднийКасовийОрдер_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new РозхіднийКасовийОрдер_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class РозхіднийКасовийОрдер_РозшифруванняПлатежу_TablePart : DocumentTablePart
    {
        public РозхіднийКасовийОрдер_РозшифруванняПлатежу_TablePart(РозхіднийКасовийОрдер_Objest owner) : base(Config.Kernel, "tab_a49",
             ["col_a1", "col_l4", "col_l5", "col_l6", "col_l7", "col_l8", "col_l9", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a49";
        
        public const string НомерРядка = "col_a1";
        public const string Замовлення = "col_l4";
        public const string Сума = "col_l5";
        public const string ВалютаВзаєморозрахунків = "col_l6";
        public const string Підрозділ = "col_l7";
        public const string Коментар = "col_l8";
        public const string Організація = "col_l9";

        public РозхіднийКасовийОрдер_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Валюти_Pointer.GetJoin(QuerySelect, ВалютаВзаєморозрахунків, "tab_a49", "join_tab_4", "ВалютаВзаєморозрахунків");
                Довідники.СтруктураПідприємства_Pointer.GetJoin(QuerySelect, Підрозділ, "tab_a49", "join_tab_5", "Підрозділ");
                Довідники.Організації_Pointer.GetJoin(QuerySelect, Організація, "tab_a49", "join_tab_7", "Організація");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Замовлення = fieldValue["col_l4"].ToString() ?? "",
                    Сума = (fieldValue["col_l5"] != DBNull.Value) ? (decimal)fieldValue["col_l5"] : 0,
                    ВалютаВзаєморозрахунків = new Довідники.Валюти_Pointer(fieldValue["col_l6"]),
                    Підрозділ = new Довідники.СтруктураПідприємства_Pointer(fieldValue["col_l7"]),
                    Коментар = fieldValue["col_l8"].ToString() ?? "",
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_l9"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.ВалютаВзаєморозрахунків.Name = ItemValue["ВалютаВзаєморозрахунків"];
                      record.Підрозділ.Name = ItemValue["Підрозділ"];
                      record.Організація.Name = ItemValue["Організація"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a48"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_l4", record.Замовлення},
                    {"col_l5", record.Сума},
                    {"col_l6", record.ВалютаВзаєморозрахунків.UnigueID.UGuid},
                    {"col_l7", record.Підрозділ.UnigueID.UGuid},
                    {"col_l8", record.Коментар},
                    {"col_l9", record.Організація.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public string Замовлення { get; set; } = "";
            public decimal Сума { get; set; } = 0;
            public Довідники.Валюти_Pointer ВалютаВзаєморозрахунків { get; set; } = new Довідники.Валюти_Pointer();
            public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
            public string Коментар { get; set; } = "";
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            
        }
    }
      
    
    public static class РозхіднийКасовийОрдер_Export
    {
        public static async ValueTask ToXmlFile(РозхіднийКасовийОрдер_Pointer РозхіднийКасовийОрдер, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПереміщенняТоварів"
    public static class ПереміщенняТоварів_Const
    {
        public const string TABLE = "tab_a31";
        public const string TYPE = "ПереміщенняТоварів"; /* Назва вказівника */
        public const string POINTER = "Документи.ПереміщенняТоварів"; /* Повна назва вказівника */
        public const string FULLNAME = "Переміщення товарів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_a3";
        public const string БанківськийРахунокОрганізації = "col_a4";
        public const string ВидЦіни = "col_a5";
        public const string ОрганізаціяОтримувач = "col_a7";
        public const string Відповідальний = "col_a8";
        public const string Підрозділ = "col_a9";
        public const string СкладВідправник = "col_b1";
        public const string СкладОтримувач = "col_b2";
        public const string Статус = "col_b3";
        public const string ГосподарськаОперація = "col_b4";
        public const string СпосібДоставки = "col_b5";
        public const string АдресДоставки = "col_b6";
        public const string ЧасДоставкиЗ = "col_b7";
        public const string ЧасДоставкиДо = "col_b8";
        public const string Коментар = "col_a6";
        public const string Автор = "col_a1";
        public const string Основа = "col_a2";
        public const string КлючовіСловаДляПошуку = "col_b9";
    }

    public class ПереміщенняТоварів_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПереміщенняТоварів_Objest() : base(Config.Kernel, "tab_a31", ПереміщенняТоварів_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a3", "col_a4", "col_a5", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", "col_b3", "col_b4", "col_b5", "col_b6", "col_b7", "col_b8", "col_a6", "col_a1", "col_a2", "col_b9", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПереміщенняТоварів_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПереміщенняТоварів_Const.FULLNAME + " *");
            
                await ПереміщенняТоварів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a3"]);
                БанківськийРахунокОрганізації = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_a4"]);
                ВидЦіни = new Довідники.ВидиЦін_Pointer(base.FieldValue["col_a5"]);
                ОрганізаціяОтримувач = new Довідники.Організації_Pointer(base.FieldValue["col_a7"]);
                Відповідальний = new Довідники.Користувачі_Pointer(base.FieldValue["col_a8"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a9"]);
                СкладВідправник = new Довідники.Склади_Pointer(base.FieldValue["col_b1"]);
                СкладОтримувач = new Довідники.Склади_Pointer(base.FieldValue["col_b2"]);
                Статус = (base.FieldValue["col_b3"] != DBNull.Value) ? (Перелічення.СтатусиПереміщенняТоварів)base.FieldValue["col_b3"] : 0;
                ГосподарськаОперація = (base.FieldValue["col_b4"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_b4"] : 0;
                СпосібДоставки = (base.FieldValue["col_b5"] != DBNull.Value) ? (Перелічення.СпособиДоставки)base.FieldValue["col_b5"] : 0;
                АдресДоставки = base.FieldValue["col_b6"].ToString() ?? "";
                ЧасДоставкиЗ = (base.FieldValue["col_b7"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_b7"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ЧасДоставкиДо = (base.FieldValue["col_b8"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_b8"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                Коментар = base.FieldValue["col_a6"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a1"]);
                Основа = (base.FieldValue["col_a2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a2"] : new UuidAndText();
                КлючовіСловаДляПошуку = base.FieldValue["col_b9"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПереміщенняТоварів_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a3"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a4"] = БанківськийРахунокОрганізації.UnigueID.UGuid;
            base.FieldValue["col_a5"] = ВидЦіни.UnigueID.UGuid;
            base.FieldValue["col_a7"] = ОрганізаціяОтримувач.UnigueID.UGuid;
            base.FieldValue["col_a8"] = Відповідальний.UnigueID.UGuid;
            base.FieldValue["col_a9"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_b1"] = СкладВідправник.UnigueID.UGuid;
            base.FieldValue["col_b2"] = СкладОтримувач.UnigueID.UGuid;
            base.FieldValue["col_b3"] = (int)Статус;
            base.FieldValue["col_b4"] = (int)ГосподарськаОперація;
            base.FieldValue["col_b5"] = (int)СпосібДоставки;
            base.FieldValue["col_b6"] = АдресДоставки;
            base.FieldValue["col_b7"] = ЧасДоставкиЗ;
            base.FieldValue["col_b8"] = ЧасДоставкиДо;
            base.FieldValue["col_a6"] = Коментар;
            base.FieldValue["col_a1"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Основа;
            base.FieldValue["col_b9"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПереміщенняТоварів_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПереміщенняТоварів_Objest> Copy(bool copyTableParts = false)
        {
            ПереміщенняТоварів_Objest copy = new ПереміщенняТоварів_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                БанківськийРахунокОрганізації = БанківськийРахунокОрганізації,
                ВидЦіни = ВидЦіни,
                ОрганізаціяОтримувач = ОрганізаціяОтримувач,
                Відповідальний = Відповідальний,
                Підрозділ = Підрозділ,
                СкладВідправник = СкладВідправник,
                СкладОтримувач = СкладОтримувач,
                Статус = Статус,
                ГосподарськаОперація = ГосподарськаОперація,
                СпосібДоставки = СпосібДоставки,
                АдресДоставки = АдресДоставки,
                ЧасДоставкиЗ = ЧасДоставкиЗ,
                ЧасДоставкиДо = ЧасДоставкиДо,
                Коментар = Коментар,
                Автор = Автор,
                Основа = Основа,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПереміщенняТоварів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a50", ]);
        }
        
        public ПереміщенняТоварів_Pointer GetDocumentPointer()
        {
            return new ПереміщенняТоварів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПереміщенняТоварів_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунокОрганізації { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
        public Довідники.Організації_Pointer ОрганізаціяОтримувач { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Користувачі_Pointer Відповідальний { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Pointer СкладВідправник { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Склади_Pointer СкладОтримувач { get; set; } = new Довідники.Склади_Pointer();
        public Перелічення.СтатусиПереміщенняТоварів Статус { get; set; } = 0;
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Перелічення.СпособиДоставки СпосібДоставки { get; set; } = 0;
        public string АдресДоставки { get; set; } = "";
        public TimeSpan ЧасДоставкиЗ { get; set; } = DateTime.MinValue.TimeOfDay;
        public TimeSpan ЧасДоставкиДо { get; set; } = DateTime.MinValue.TimeOfDay;
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ПереміщенняТоварів_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПереміщенняТоварів_Pointer : DocumentPointer
    {
        public ПереміщенняТоварів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a31", ПереміщенняТоварів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПереміщенняТоварів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a31", "ПереміщенняТоварів")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПереміщенняТоварів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПереміщенняТоварів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПереміщенняТоварів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПереміщенняТоварів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПереміщенняТоварів_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПереміщенняТоварів_Pointer Copy()
        {
            return new ПереміщенняТоварів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПереміщенняТоварів_Pointer GetEmptyPointer()
        {
            return new ПереміщенняТоварів_Pointer();
        }

        public async ValueTask<ПереміщенняТоварів_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПереміщенняТоварів_Objest obj = new ПереміщенняТоварів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПереміщенняТоварів_Select : DocumentSelect
    {		
        public ПереміщенняТоварів_Select() : base(Config.Kernel, "tab_a31") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПереміщенняТоварів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПереміщенняТоварів_Pointer? Current { get; private set; }

        public async ValueTask<ПереміщенняТоварів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПереміщенняТоварів_Pointer(pointer) : new ПереміщенняТоварів_Pointer();
        }
        
        public async ValueTask<List<ПереміщенняТоварів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПереміщенняТоварів_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПереміщенняТоварів_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПереміщенняТоварів_Товари_TablePart : DocumentTablePart
    {
        public ПереміщенняТоварів_Товари_TablePart(ПереміщенняТоварів_Objest owner) : base(Config.Kernel, "tab_a50",
             ["col_b8", "col_b3", "col_b4", "col_a1", "col_b5", "col_b6", "col_b7", "col_a2", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a50";
        
        public const string НомерРядка = "col_b8";
        public const string Номенклатура = "col_b3";
        public const string ХарактеристикаНоменклатури = "col_b4";
        public const string Серія = "col_a1";
        public const string Пакування = "col_b5";
        public const string КількістьУпаковок = "col_b6";
        public const string Кількість = "col_b7";
        public const string Партія = "col_a2";

        public ПереміщенняТоварів_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a50", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a50", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a50", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a50", "join_tab_5", "Пакування");
                Довідники.ПартіяТоварівКомпозит_Pointer.GetJoin(QuerySelect, Партія, "tab_a50", "join_tab_8", "Партія");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_b8"] != DBNull.Value) ? (int)fieldValue["col_b8"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b3"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_b4"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_b5"]),
                    КількістьУпаковок = (fieldValue["col_b6"] != DBNull.Value) ? (int)fieldValue["col_b6"] : 0,
                    Кількість = (fieldValue["col_b7"] != DBNull.Value) ? (decimal)fieldValue["col_b7"] : 0,
                    Партія = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a2"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Партія.Name = ItemValue["Партія"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a31"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_b8", record.НомерРядка},
                    {"col_b3", record.Номенклатура.UnigueID.UGuid},
                    {"col_b4", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a1", record.Серія.UnigueID.UGuid},
                    {"col_b5", record.Пакування.UnigueID.UGuid},
                    {"col_b6", record.КількістьУпаковок},
                    {"col_b7", record.Кількість},
                    {"col_a2", record.Партія.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.ПартіяТоварівКомпозит_Pointer Партія { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            
        }
    }
      
    
    public static class ПереміщенняТоварів_Export
    {
        public static async ValueTask ToXmlFile(ПереміщенняТоварів_Pointer ПереміщенняТоварів, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПоверненняТоварівПостачальнику"
    public static class ПоверненняТоварівПостачальнику_Const
    {
        public const string TABLE = "tab_a51";
        public const string TYPE = "ПоверненняТоварівПостачальнику"; /* Назва вказівника */
        public const string POINTER = "Документи.ПоверненняТоварівПостачальнику"; /* Повна назва вказівника */
        public const string FULLNAME = "Повернення товарів постачальнику"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_c2";
        public const string Контрагент = "col_c3";
        public const string Підрозділ = "col_c4";
        public const string Валюта = "col_c5";
        public const string Склад = "col_c6";
        public const string СумаДокументу = "col_c7";
        public const string ГосподарськаОперація = "col_c9";
        public const string БанківськийРахунокОрганізації = "col_d1";
        public const string БанківськийРахунокКонтрагента = "col_d2";
        public const string Договір = "col_d3";
        public const string СпосібДоставки = "col_d4";
        public const string АдресДоставки = "col_d5";
        public const string ЧасДоставкиЗ = "col_d6";
        public const string ЧасДоставкиДо = "col_d7";
        public const string Каса = "col_a1";
        public const string Основа = "col_a2";
        public const string Коментар = "col_c8";
        public const string Автор = "col_a3";
        public const string Менеджер = "col_a4";
        public const string КлючовіСловаДляПошуку = "col_a5";
    }

    public class ПоверненняТоварівПостачальнику_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПоверненняТоварівПостачальнику_Objest() : base(Config.Kernel, "tab_a51", ПоверненняТоварівПостачальнику_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c9", "col_d1", "col_d2", "col_d3", "col_d4", "col_d5", "col_d6", "col_d7", "col_a1", "col_a2", "col_c8", "col_a3", "col_a4", "col_a5", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПоверненняТоварівПостачальнику_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПоверненняТоварівПостачальнику_Const.FULLNAME + " *");
            
                await ПоверненняТоварівПостачальнику_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_c2"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_c3"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_c4"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_c5"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_c6"]);
                СумаДокументу = (base.FieldValue["col_c7"] != DBNull.Value) ? (decimal)base.FieldValue["col_c7"] : 0;
                ГосподарськаОперація = (base.FieldValue["col_c9"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_c9"] : 0;
                БанківськийРахунокОрганізації = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_d1"]);
                БанківськийРахунокКонтрагента = new Довідники.БанківськіРахункиКонтрагентів_Pointer(base.FieldValue["col_d2"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_d3"]);
                СпосібДоставки = (base.FieldValue["col_d4"] != DBNull.Value) ? (Перелічення.СпособиДоставки)base.FieldValue["col_d4"] : 0;
                АдресДоставки = base.FieldValue["col_d5"].ToString() ?? "";
                ЧасДоставкиЗ = (base.FieldValue["col_d6"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_d6"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                ЧасДоставкиДо = (base.FieldValue["col_d7"] != DBNull.Value) ? TimeSpan.Parse(base.FieldValue["col_d7"]?.ToString() ?? DateTime.MinValue.TimeOfDay.ToString()) : DateTime.MinValue.TimeOfDay;
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_a1"]);
                Основа = (base.FieldValue["col_a2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a2"] : new UuidAndText();
                Коментар = base.FieldValue["col_c8"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a3"]);
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_a4"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a5"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПоверненняТоварівПостачальнику_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_c2"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_c3"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_c4"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_c5"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_c6"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_c7"] = СумаДокументу;
            base.FieldValue["col_c9"] = (int)ГосподарськаОперація;
            base.FieldValue["col_d1"] = БанківськийРахунокОрганізації.UnigueID.UGuid;
            base.FieldValue["col_d2"] = БанківськийРахунокКонтрагента.UnigueID.UGuid;
            base.FieldValue["col_d3"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_d4"] = (int)СпосібДоставки;
            base.FieldValue["col_d5"] = АдресДоставки;
            base.FieldValue["col_d6"] = ЧасДоставкиЗ;
            base.FieldValue["col_d7"] = ЧасДоставкиДо;
            base.FieldValue["col_a1"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Основа;
            base.FieldValue["col_c8"] = Коментар;
            base.FieldValue["col_a3"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_a5"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПоверненняТоварівПостачальнику_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Закупівлі_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПоверненняТоварівПостачальнику_Objest> Copy(bool copyTableParts = false)
        {
            ПоверненняТоварівПостачальнику_Objest copy = new ПоверненняТоварівПостачальнику_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Контрагент = Контрагент,
                Підрозділ = Підрозділ,
                Валюта = Валюта,
                Склад = Склад,
                СумаДокументу = СумаДокументу,
                ГосподарськаОперація = ГосподарськаОперація,
                БанківськийРахунокОрганізації = БанківськийРахунокОрганізації,
                БанківськийРахунокКонтрагента = БанківськийРахунокКонтрагента,
                Договір = Договір,
                СпосібДоставки = СпосібДоставки,
                АдресДоставки = АдресДоставки,
                ЧасДоставкиЗ = ЧасДоставкиЗ,
                ЧасДоставкиДо = ЧасДоставкиДо,
                Каса = Каса,
                Основа = Основа,
                Коментар = Коментар,
                Автор = Автор,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПоверненняТоварівПостачальнику_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a52", ]);
        }
        
        public ПоверненняТоварівПостачальнику_Pointer GetDocumentPointer()
        {
            return new ПоверненняТоварівПостачальнику_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПоверненняТоварівПостачальнику_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунокОрганізації { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.БанківськіРахункиКонтрагентів_Pointer БанківськийРахунокКонтрагента { get; set; } = new Довідники.БанківськіРахункиКонтрагентів_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Перелічення.СпособиДоставки СпосібДоставки { get; set; } = 0;
        public string АдресДоставки { get; set; } = "";
        public TimeSpan ЧасДоставкиЗ { get; set; } = DateTime.MinValue.TimeOfDay;
        public TimeSpan ЧасДоставкиДо { get; set; } = DateTime.MinValue.TimeOfDay;
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ПоверненняТоварівПостачальнику_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПоверненняТоварівПостачальнику_Pointer : DocumentPointer
    {
        public ПоверненняТоварівПостачальнику_Pointer(object? uid = null) : base(Config.Kernel, "tab_a51", ПоверненняТоварівПостачальнику_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПоверненняТоварівПостачальнику_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a51", "ПоверненняТоварівПостачальнику")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПоверненняТоварівПостачальнику_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПоверненняТоварівПостачальнику_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПоверненняТоварівПостачальнику_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПоверненняТоварівПостачальнику_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПоверненняТоварівПостачальнику_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Закупівлі_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПоверненняТоварівПостачальнику_Pointer Copy()
        {
            return new ПоверненняТоварівПостачальнику_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПоверненняТоварівПостачальнику_Pointer GetEmptyPointer()
        {
            return new ПоверненняТоварівПостачальнику_Pointer();
        }

        public async ValueTask<ПоверненняТоварівПостачальнику_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПоверненняТоварівПостачальнику_Objest obj = new ПоверненняТоварівПостачальнику_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПоверненняТоварівПостачальнику_Select : DocumentSelect
    {		
        public ПоверненняТоварівПостачальнику_Select() : base(Config.Kernel, "tab_a51") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПоверненняТоварівПостачальнику_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПоверненняТоварівПостачальнику_Pointer? Current { get; private set; }

        public async ValueTask<ПоверненняТоварівПостачальнику_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПоверненняТоварівПостачальнику_Pointer(pointer) : new ПоверненняТоварівПостачальнику_Pointer();
        }
        
        public async ValueTask<List<ПоверненняТоварівПостачальнику_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПоверненняТоварівПостачальнику_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПоверненняТоварівПостачальнику_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПоверненняТоварівПостачальнику_Товари_TablePart : DocumentTablePart
    {
        public ПоверненняТоварівПостачальнику_Товари_TablePart(ПоверненняТоварівПостачальнику_Objest owner) : base(Config.Kernel, "tab_a52",
             ["col_a1", "col_d8", "col_d9", "col_a3", "col_e1", "col_e2", "col_e3", "col_e4", "col_e5", "col_a2", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a52";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_d8";
        public const string ХарактеристикаНоменклатури = "col_d9";
        public const string Серія = "col_a3";
        public const string Пакування = "col_e1";
        public const string КількістьУпаковок = "col_e2";
        public const string Кількість = "col_e3";
        public const string Ціна = "col_e4";
        public const string Сума = "col_e5";
        public const string ДокументПоступлення = "col_a2";

        public ПоверненняТоварівПостачальнику_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a52", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a52", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a52", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a52", "join_tab_5", "Пакування");
                Документи.ПоступленняТоварівТаПослуг_Pointer.GetJoin(QuerySelect, ДокументПоступлення, "tab_a52", "join_tab_10", "ДокументПоступлення");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_d8"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_d9"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a3"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_e1"]),
                    КількістьУпаковок = (fieldValue["col_e2"] != DBNull.Value) ? (int)fieldValue["col_e2"] : 0,
                    Кількість = (fieldValue["col_e3"] != DBNull.Value) ? (decimal)fieldValue["col_e3"] : 0,
                    Ціна = (fieldValue["col_e4"] != DBNull.Value) ? (decimal)fieldValue["col_e4"] : 0,
                    Сума = (fieldValue["col_e5"] != DBNull.Value) ? (decimal)fieldValue["col_e5"] : 0,
                    ДокументПоступлення = new Документи.ПоступленняТоварівТаПослуг_Pointer(fieldValue["col_a2"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ДокументПоступлення.Name = ItemValue["ДокументПоступлення"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a51"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_d8", record.Номенклатура.UnigueID.UGuid},
                    {"col_d9", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a3", record.Серія.UnigueID.UGuid},
                    {"col_e1", record.Пакування.UnigueID.UGuid},
                    {"col_e2", record.КількістьУпаковок},
                    {"col_e3", record.Кількість},
                    {"col_e4", record.Ціна},
                    {"col_e5", record.Сума},
                    {"col_a2", record.ДокументПоступлення.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public Документи.ПоступленняТоварівТаПослуг_Pointer ДокументПоступлення { get; set; } = new Документи.ПоступленняТоварівТаПослуг_Pointer();
            
        }
    }
      
    
    public static class ПоверненняТоварівПостачальнику_Export
    {
        public static async ValueTask ToXmlFile(ПоверненняТоварівПостачальнику_Pointer ПоверненняТоварівПостачальнику, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПоверненняТоварівВідКлієнта"
    public static class ПоверненняТоварівВідКлієнта_Const
    {
        public const string TABLE = "tab_a53";
        public const string TYPE = "ПоверненняТоварівВідКлієнта"; /* Назва вказівника */
        public const string POINTER = "Документи.ПоверненняТоварівВідКлієнта"; /* Повна назва вказівника */
        public const string FULLNAME = "Повернення товарів від клієнта"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_e8";
        public const string Валюта = "col_e9";
        public const string СумаДокументу = "col_f1";
        public const string Склад = "col_f2";
        public const string Підрозділ = "col_f3";
        public const string Менеджер = "col_f5";
        public const string ДокументПродажу = "col_f7";
        public const string ГосподарськаОперація = "col_f8";
        public const string Договір = "col_f9";
        public const string ПричинаПовернення = "col_g1";
        public const string Контрагент = "col_g2";
        public const string Каса = "col_a1";
        public const string Основа = "col_a2";
        public const string Коментар = "col_f6";
        public const string Автор = "col_a3";
        public const string КлючовіСловаДляПошуку = "col_a4";
    }

    public class ПоверненняТоварівВідКлієнта_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПоверненняТоварівВідКлієнта_Objest() : base(Config.Kernel, "tab_a53", ПоверненняТоварівВідКлієнта_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_e8", "col_e9", "col_f1", "col_f2", "col_f3", "col_f5", "col_f7", "col_f8", "col_f9", "col_g1", "col_g2", "col_a1", "col_a2", "col_f6", "col_a3", "col_a4", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПоверненняТоварівВідКлієнта_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПоверненняТоварівВідКлієнта_Const.FULLNAME + " *");
            
                await ПоверненняТоварівВідКлієнта_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_e8"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_e9"]);
                СумаДокументу = (base.FieldValue["col_f1"] != DBNull.Value) ? (decimal)base.FieldValue["col_f1"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_f2"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_f3"]);
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_f5"]);
                ДокументПродажу = new Документи.РеалізаціяТоварівТаПослуг_Pointer(base.FieldValue["col_f7"]);
                ГосподарськаОперація = (base.FieldValue["col_f8"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_f8"] : 0;
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_f9"]);
                ПричинаПовернення = base.FieldValue["col_g1"].ToString() ?? "";
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_g2"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_a1"]);
                Основа = (base.FieldValue["col_a2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a2"] : new UuidAndText();
                Коментар = base.FieldValue["col_f6"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a3"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a4"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПоверненняТоварівВідКлієнта_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_e8"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_e9"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_f1"] = СумаДокументу;
            base.FieldValue["col_f2"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_f3"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_f5"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_f7"] = ДокументПродажу.UnigueID.UGuid;
            base.FieldValue["col_f8"] = (int)ГосподарськаОперація;
            base.FieldValue["col_f9"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_g1"] = ПричинаПовернення;
            base.FieldValue["col_g2"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_a1"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Основа;
            base.FieldValue["col_f6"] = Коментар;
            base.FieldValue["col_a3"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a4"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПоверненняТоварівВідКлієнта_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Продажі_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПоверненняТоварівВідКлієнта_Objest> Copy(bool copyTableParts = false)
        {
            ПоверненняТоварівВідКлієнта_Objest copy = new ПоверненняТоварівВідКлієнта_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Валюта = Валюта,
                СумаДокументу = СумаДокументу,
                Склад = Склад,
                Підрозділ = Підрозділ,
                Менеджер = Менеджер,
                ДокументПродажу = ДокументПродажу,
                ГосподарськаОперація = ГосподарськаОперація,
                Договір = Договір,
                ПричинаПовернення = ПричинаПовернення,
                Контрагент = Контрагент,
                Каса = Каса,
                Основа = Основа,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПоверненняТоварівВідКлієнта_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a54", ]);
        }
        
        public ПоверненняТоварівВідКлієнта_Pointer GetDocumentPointer()
        {
            return new ПоверненняТоварівВідКлієнта_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПоверненняТоварівВідКлієнта_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public Документи.РеалізаціяТоварівТаПослуг_Pointer ДокументПродажу { get; set; } = new Документи.РеалізаціяТоварівТаПослуг_Pointer();
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public string ПричинаПовернення { get; set; } = "";
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ПоверненняТоварівВідКлієнта_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПоверненняТоварівВідКлієнта_Pointer : DocumentPointer
    {
        public ПоверненняТоварівВідКлієнта_Pointer(object? uid = null) : base(Config.Kernel, "tab_a53", ПоверненняТоварівВідКлієнта_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПоверненняТоварівВідКлієнта_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a53", "ПоверненняТоварівВідКлієнта")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПоверненняТоварівВідКлієнта_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПоверненняТоварівВідКлієнта_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПоверненняТоварівВідКлієнта_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПоверненняТоварівВідКлієнта_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПоверненняТоварівВідКлієнта_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Продажі_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПоверненняТоварівВідКлієнта_Pointer Copy()
        {
            return new ПоверненняТоварівВідКлієнта_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПоверненняТоварівВідКлієнта_Pointer GetEmptyPointer()
        {
            return new ПоверненняТоварівВідКлієнта_Pointer();
        }

        public async ValueTask<ПоверненняТоварівВідКлієнта_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПоверненняТоварівВідКлієнта_Objest obj = new ПоверненняТоварівВідКлієнта_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПоверненняТоварівВідКлієнта_Select : DocumentSelect
    {		
        public ПоверненняТоварівВідКлієнта_Select() : base(Config.Kernel, "tab_a53") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПоверненняТоварівВідКлієнта_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПоверненняТоварівВідКлієнта_Pointer? Current { get; private set; }

        public async ValueTask<ПоверненняТоварівВідКлієнта_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПоверненняТоварівВідКлієнта_Pointer(pointer) : new ПоверненняТоварівВідКлієнта_Pointer();
        }
        
        public async ValueTask<List<ПоверненняТоварівВідКлієнта_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПоверненняТоварівВідКлієнта_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПоверненняТоварівВідКлієнта_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПоверненняТоварівВідКлієнта_Товари_TablePart : DocumentTablePart
    {
        public ПоверненняТоварівВідКлієнта_Товари_TablePart(ПоверненняТоварівВідКлієнта_Objest owner) : base(Config.Kernel, "tab_a54",
             ["col_h2", "col_g3", "col_g4", "col_a1", "col_g5", "col_g6", "col_g7", "col_g8", "col_g9", "col_h1", "col_a2", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a54";
        
        public const string НомерРядка = "col_h2";
        public const string Номенклатура = "col_g3";
        public const string ХарактеристикаНоменклатури = "col_g4";
        public const string Серія = "col_a1";
        public const string Пакування = "col_g5";
        public const string КількістьУпаковок = "col_g6";
        public const string Кількість = "col_g7";
        public const string Ціна = "col_g8";
        public const string Сума = "col_g9";
        public const string Штрихкод = "col_h1";
        public const string ДокументРеалізації = "col_a2";

        public ПоверненняТоварівВідКлієнта_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a54", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a54", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a54", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a54", "join_tab_5", "Пакування");
                Документи.РеалізаціяТоварівТаПослуг_Pointer.GetJoin(QuerySelect, ДокументРеалізації, "tab_a54", "join_tab_11", "ДокументРеалізації");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_h2"] != DBNull.Value) ? (int)fieldValue["col_h2"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_g3"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_g4"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_g5"]),
                    КількістьУпаковок = (fieldValue["col_g6"] != DBNull.Value) ? (int)fieldValue["col_g6"] : 0,
                    Кількість = (fieldValue["col_g7"] != DBNull.Value) ? (decimal)fieldValue["col_g7"] : 0,
                    Ціна = (fieldValue["col_g8"] != DBNull.Value) ? (decimal)fieldValue["col_g8"] : 0,
                    Сума = (fieldValue["col_g9"] != DBNull.Value) ? (decimal)fieldValue["col_g9"] : 0,
                    Штрихкод = fieldValue["col_h1"].ToString() ?? "",
                    ДокументРеалізації = new Документи.РеалізаціяТоварівТаПослуг_Pointer(fieldValue["col_a2"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ДокументРеалізації.Name = ItemValue["ДокументРеалізації"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a53"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_h2", record.НомерРядка},
                    {"col_g3", record.Номенклатура.UnigueID.UGuid},
                    {"col_g4", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a1", record.Серія.UnigueID.UGuid},
                    {"col_g5", record.Пакування.UnigueID.UGuid},
                    {"col_g6", record.КількістьУпаковок},
                    {"col_g7", record.Кількість},
                    {"col_g8", record.Ціна},
                    {"col_g9", record.Сума},
                    {"col_h1", record.Штрихкод},
                    {"col_a2", record.ДокументРеалізації.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public string Штрихкод { get; set; } = "";
            public Документи.РеалізаціяТоварівТаПослуг_Pointer ДокументРеалізації { get; set; } = new Документи.РеалізаціяТоварівТаПослуг_Pointer();
            
        }
    }
      
    
    public static class ПоверненняТоварівВідКлієнта_Export
    {
        public static async ValueTask ToXmlFile(ПоверненняТоварівВідКлієнта_Pointer ПоверненняТоварівВідКлієнта, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "АктВиконанихРобіт"
    public static class АктВиконанихРобіт_Const
    {
        public const string TABLE = "tab_a81";
        public const string TYPE = "АктВиконанихРобіт"; /* Назва вказівника */
        public const string POINTER = "Документи.АктВиконанихРобіт"; /* Повна назва вказівника */
        public const string FULLNAME = "Акт виконаних робіт"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Валюта = "col_b2";
        public const string ЗамовленняКлієнта = "col_b3";
        public const string Каса = "col_b4";
        public const string Контрагент = "col_b5";
        public const string Організація = "col_b6";
        public const string Підрозділ = "col_a5";
        public const string СумаДокументу = "col_a2";
        public const string ФормаОплати = "col_a3";
        public const string Договір = "col_a4";
        public const string ГосподарськаОперація = "col_a6";
        public const string Коментар = "col_a1";
        public const string Автор = "col_a7";
        public const string Менеджер = "col_a8";
        public const string КлючовіСловаДляПошуку = "col_a9";
        public const string Основа = "col_b1";
    }

    public class АктВиконанихРобіт_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public АктВиконанихРобіт_Objest() : base(Config.Kernel, "tab_a81", АктВиконанихРобіт_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_b2", "col_b3", "col_b4", "col_b5", "col_b6", "col_a5", "col_a2", "col_a3", "col_a4", "col_a6", "col_a1", "col_a7", "col_a8", "col_a9", "col_b1", ], true)
        {
            
                //Табличні частини
                Послуги_TablePart = new АктВиконанихРобіт_Послуги_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, АктВиконанихРобіт_Const.FULLNAME + " *");
            
                await АктВиконанихРобіт_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_b2"]);
                ЗамовленняКлієнта = new Документи.ЗамовленняКлієнта_Pointer(base.FieldValue["col_b3"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_b4"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_b5"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_b6"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a5"]);
                СумаДокументу = (base.FieldValue["col_a2"] != DBNull.Value) ? (decimal)base.FieldValue["col_a2"] : 0;
                ФормаОплати = (base.FieldValue["col_a3"] != DBNull.Value) ? (Перелічення.ФормаОплати)base.FieldValue["col_a3"] : 0;
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_a4"]);
                ГосподарськаОперація = (base.FieldValue["col_a6"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_a6"] : 0;
                Коментар = base.FieldValue["col_a1"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a7"]);
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_a8"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a9"].ToString() ?? "";
                Основа = (base.FieldValue["col_b1"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_b1"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Послуги_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await АктВиконанихРобіт_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_b2"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_b3"] = ЗамовленняКлієнта.UnigueID.UGuid;
            base.FieldValue["col_b4"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_b5"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_b6"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a2"] = СумаДокументу;
            base.FieldValue["col_a3"] = (int)ФормаОплати;
            base.FieldValue["col_a4"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_a6"] = (int)ГосподарськаОперація;
            base.FieldValue["col_a1"] = Коментар;
            base.FieldValue["col_a7"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a8"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_a9"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_b1"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await АктВиконанихРобіт_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Продажі_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<АктВиконанихРобіт_Objest> Copy(bool copyTableParts = false)
        {
            АктВиконанихРобіт_Objest copy = new АктВиконанихРобіт_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Валюта = Валюта,
                ЗамовленняКлієнта = ЗамовленняКлієнта,
                Каса = Каса,
                Контрагент = Контрагент,
                Організація = Організація,
                Підрозділ = Підрозділ,
                СумаДокументу = СумаДокументу,
                ФормаОплати = ФормаОплати,
                Договір = Договір,
                ГосподарськаОперація = ГосподарськаОперація,
                Коментар = Коментар,
                Автор = Автор,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Послуги - Таблична частина
                await Послуги_TablePart.Read();
                copy.Послуги_TablePart.Records = Послуги_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await АктВиконанихРобіт_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a82", ]);
        }
        
        public АктВиконанихРобіт_Pointer GetDocumentPointer()
        {
            return new АктВиконанихРобіт_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(АктВиконанихРобіт_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Документи.ЗамовленняКлієнта_Pointer ЗамовленняКлієнта { get; set; } = new Документи.ЗамовленняКлієнта_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Перелічення.ФормаОплати ФормаОплати { get; set; } = 0;
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public АктВиконанихРобіт_Послуги_TablePart Послуги_TablePart { get; set; }
        
    }
    
    public class АктВиконанихРобіт_Pointer : DocumentPointer
    {
        public АктВиконанихРобіт_Pointer(object? uid = null) : base(Config.Kernel, "tab_a81", АктВиконанихРобіт_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public АктВиконанихРобіт_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a81", "АктВиконанихРобіт")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(АктВиконанихРобіт_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [АктВиконанихРобіт_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{АктВиконанихРобіт_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(АктВиконанихРобіт_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            АктВиконанихРобіт_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.Продажі_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public АктВиконанихРобіт_Pointer Copy()
        {
            return new АктВиконанихРобіт_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public АктВиконанихРобіт_Pointer GetEmptyPointer()
        {
            return new АктВиконанихРобіт_Pointer();
        }

        public async ValueTask<АктВиконанихРобіт_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            АктВиконанихРобіт_Objest obj = new АктВиконанихРобіт_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class АктВиконанихРобіт_Select : DocumentSelect
    {		
        public АктВиконанихРобіт_Select() : base(Config.Kernel, "tab_a81") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new АктВиконанихРобіт_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public АктВиконанихРобіт_Pointer? Current { get; private set; }

        public async ValueTask<АктВиконанихРобіт_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new АктВиконанихРобіт_Pointer(pointer) : new АктВиконанихРобіт_Pointer();
        }
        
        public async ValueTask<List<АктВиконанихРобіт_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<АктВиконанихРобіт_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new АктВиконанихРобіт_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class АктВиконанихРобіт_Послуги_TablePart : DocumentTablePart
    {
        public АктВиконанихРобіт_Послуги_TablePart(АктВиконанихРобіт_Objest owner) : base(Config.Kernel, "tab_a82",
             ["col_c4", "col_b8", "col_b9", "col_c1", "col_c3", "col_c2", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a82";
        
        public const string НомерРядка = "col_c4";
        public const string Номенклатура = "col_b8";
        public const string ХарактеристикаНоменклатури = "col_b9";
        public const string Кількість = "col_c1";
        public const string Ціна = "col_c3";
        public const string Сума = "col_c2";

        public АктВиконанихРобіт_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a82", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a82", "join_tab_3", "ХарактеристикаНоменклатури");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_c4"] != DBNull.Value) ? (int)fieldValue["col_c4"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b8"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_b9"]),
                    Кількість = (fieldValue["col_c1"] != DBNull.Value) ? (decimal)fieldValue["col_c1"] : 0,
                    Ціна = (fieldValue["col_c3"] != DBNull.Value) ? (decimal)fieldValue["col_c3"] : 0,
                    Сума = (fieldValue["col_c2"] != DBNull.Value) ? (decimal)fieldValue["col_c2"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a81"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_c4", record.НомерРядка},
                    {"col_b8", record.Номенклатура.UnigueID.UGuid},
                    {"col_b9", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_c1", record.Кількість},
                    {"col_c3", record.Ціна},
                    {"col_c2", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public static class АктВиконанихРобіт_Export
    {
        public static async ValueTask ToXmlFile(АктВиконанихРобіт_Pointer АктВиконанихРобіт, string pathToSave)
        {
        АктВиконанихРобіт_Objest? obj = await АктВиконанихРобіт.GetDocumentObject(true);
            if (obj == null) return;

            XmlWriter xmlWriter = XmlWriter.Create(pathToSave, new XmlWriterSettings() { Indent = true, Encoding = System.Text.Encoding.UTF8 });
            xmlWriter.WriteStartDocument();
            xmlWriter.WriteStartElement("Document");
            xmlWriter.WriteAttributeString("uid", obj.UnigueID.ToString());
            
            xmlWriter.WriteStartElement("Назва");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.Назва);
              
            xmlWriter.WriteEndElement(); //Назва
            xmlWriter.WriteStartElement("НомерДок");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.НомерДок);
              
            xmlWriter.WriteEndElement(); //НомерДок
            xmlWriter.WriteStartElement("ДатаДок");
            xmlWriter.WriteAttributeString("type", "datetime");
            
                xmlWriter.WriteValue(obj.ДатаДок.ToString("dd.MM.yyyy HH:mm:ss"));
              
            xmlWriter.WriteEndElement(); //ДатаДок
            xmlWriter.WriteStartElement("Валюта");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Валюти");
                    xmlWriter.WriteAttributeString("uid", obj.Валюта.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Валюта.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Валюта
            xmlWriter.WriteStartElement("Каса");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Каси");
                    xmlWriter.WriteAttributeString("uid", obj.Каса.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Каса.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Каса
            xmlWriter.WriteStartElement("Контрагент");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Контрагенти");
                    xmlWriter.WriteAttributeString("uid", obj.Контрагент.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Контрагент.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Контрагент
            xmlWriter.WriteStartElement("Організація");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Організації");
                    xmlWriter.WriteAttributeString("uid", obj.Організація.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Організація.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Організація
            xmlWriter.WriteStartElement("СумаДокументу");
            xmlWriter.WriteAttributeString("type", "numeric");
            
                xmlWriter.WriteValue(obj.СумаДокументу);
              
            xmlWriter.WriteEndElement(); //СумаДокументу
                /*  Табличні частини */
                xmlWriter.WriteStartElement("TabularParts");
                
                    xmlWriter.WriteStartElement("TablePart");
                    xmlWriter.WriteAttributeString("name", "Послуги");

                    foreach(АктВиконанихРобіт_Послуги_TablePart.Record record in obj.Послуги_TablePart.Records)
                    {
                        xmlWriter.WriteStartElement("row");
                        xmlWriter.WriteAttributeString("uid", record.UID.ToString());
                        
                        xmlWriter.WriteStartElement("НомерРядка");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.НомерРядка);
                          
                        xmlWriter.WriteEndElement(); //НомерРядка
                        xmlWriter.WriteStartElement("Номенклатура");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.Номенклатура");
                                xmlWriter.WriteAttributeString("uid", record.Номенклатура.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Номенклатура.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Номенклатура
                        xmlWriter.WriteStartElement("ХарактеристикаНоменклатури");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ХарактеристикиНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.ХарактеристикаНоменклатури.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.ХарактеристикаНоменклатури.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //ХарактеристикаНоменклатури
                        xmlWriter.WriteStartElement("Кількість");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Кількість);
                          
                        xmlWriter.WriteEndElement(); //Кількість
                        xmlWriter.WriteStartElement("Ціна");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Ціна);
                          
                        xmlWriter.WriteEndElement(); //Ціна
                        xmlWriter.WriteStartElement("Сума");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Сума);
                          
                        xmlWriter.WriteEndElement(); //Сума
                        xmlWriter.WriteEndElement(); //row
                    }

                    xmlWriter.WriteEndElement(); //TablePart
                
                xmlWriter.WriteEndElement(); //TabularParts
            

            xmlWriter.WriteEndElement(); //root
            xmlWriter.WriteEndDocument();
            xmlWriter.Close();
          
        }
    }

    #endregion
    
    #region DOCUMENT "ВведенняЗалишків"
    public static class ВведенняЗалишків_Const
    {
        public const string TABLE = "tab_a83";
        public const string TYPE = "ВведенняЗалишків"; /* Назва вказівника */
        public const string POINTER = "Документи.ВведенняЗалишків"; /* Повна назва вказівника */
        public const string FULLNAME = "Введення залишків"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_c8";
        public const string Підрозділ = "col_d5";
        public const string Склад = "col_c9";
        public const string Валюта = "col_d2";
        public const string Контрагент = "col_d3";
        public const string Договір = "col_d4";
        public const string ГосподарськаОперація = "col_a1";
        public const string Коментар = "col_d1";
        public const string Автор = "col_a3";
        public const string КлючовіСловаДляПошуку = "col_a2";
        public const string Основа = "col_a4";
    }

    public class ВведенняЗалишків_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ВведенняЗалишків_Objest() : base(Config.Kernel, "tab_a83", ВведенняЗалишків_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_c8", "col_d5", "col_c9", "col_d2", "col_d3", "col_d4", "col_a1", "col_d1", "col_a3", "col_a2", "col_a4", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ВведенняЗалишків_Товари_TablePart(this);
                Каси_TablePart = new ВведенняЗалишків_Каси_TablePart(this);
                БанківськіРахунки_TablePart = new ВведенняЗалишків_БанківськіРахунки_TablePart(this);
                РозрахункиЗКонтрагентами_TablePart = new ВведенняЗалишків_РозрахункиЗКонтрагентами_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ВведенняЗалишків_Const.FULLNAME + " *");
            
                await ВведенняЗалишків_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_c8"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_d5"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_c9"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_d2"]);
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_d3"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_d4"]);
                ГосподарськаОперація = (base.FieldValue["col_a1"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_a1"] : 0;
                Коментар = base.FieldValue["col_d1"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a3"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a2"].ToString() ?? "";
                Основа = (base.FieldValue["col_a4"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a4"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                    await Каси_TablePart.Read();
                    await БанківськіРахунки_TablePart.Read();
                    await РозрахункиЗКонтрагентами_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ВведенняЗалишків_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_c8"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_d5"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_c9"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_d2"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_d3"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_d4"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_a1"] = (int)ГосподарськаОперація;
            base.FieldValue["col_d1"] = Коментар;
            base.FieldValue["col_a3"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a2"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a4"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ВведенняЗалишків_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ВведенняЗалишків_Objest> Copy(bool copyTableParts = false)
        {
            ВведенняЗалишків_Objest copy = new ВведенняЗалишків_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Підрозділ = Підрозділ,
                Склад = Склад,
                Валюта = Валюта,
                Контрагент = Контрагент,
                Договір = Договір,
                ГосподарськаОперація = ГосподарськаОперація,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
                //Каси - Таблична частина
                await Каси_TablePart.Read();
                copy.Каси_TablePart.Records = Каси_TablePart.Copy();
            
                //БанківськіРахунки - Таблична частина
                await БанківськіРахунки_TablePart.Read();
                copy.БанківськіРахунки_TablePart.Records = БанківськіРахунки_TablePart.Copy();
            
                //РозрахункиЗКонтрагентами - Таблична частина
                await РозрахункиЗКонтрагентами_TablePart.Read();
                copy.РозрахункиЗКонтрагентами_TablePart.Records = РозрахункиЗКонтрагентами_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ВведенняЗалишків_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
                await ВведенняЗалишків_Triggers.SetDeletionLabel(this, label);      
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a84", "tab_a85", "tab_a86", "tab_a87", ]);
        }
        
        public ВведенняЗалишків_Pointer GetDocumentPointer()
        {
            return new ВведенняЗалишків_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ВведенняЗалишків_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ВведенняЗалишків_Товари_TablePart Товари_TablePart { get; set; }
        public ВведенняЗалишків_Каси_TablePart Каси_TablePart { get; set; }
        public ВведенняЗалишків_БанківськіРахунки_TablePart БанківськіРахунки_TablePart { get; set; }
        public ВведенняЗалишків_РозрахункиЗКонтрагентами_TablePart РозрахункиЗКонтрагентами_TablePart { get; set; }
        
    }
    
    public class ВведенняЗалишків_Pointer : DocumentPointer
    {
        public ВведенняЗалишків_Pointer(object? uid = null) : base(Config.Kernel, "tab_a83", ВведенняЗалишків_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ВведенняЗалишків_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a83", "ВведенняЗалишків")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ВведенняЗалишків_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ВведенняЗалишків_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ВведенняЗалишків_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ВведенняЗалишків_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ВведенняЗалишків_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          ВведенняЗалишків_Objest? obj = await GetDocumentObject();
            if (obj == null) return;
            
                await ВведенняЗалишків_Triggers.SetDeletionLabel(obj, label);
            
            if (label) await obj.ClearSpendTheDocument();
            
          await base.BaseDeletionLabel(label);
        }

        public ВведенняЗалишків_Pointer Copy()
        {
            return new ВведенняЗалишків_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ВведенняЗалишків_Pointer GetEmptyPointer()
        {
            return new ВведенняЗалишків_Pointer();
        }

        public async ValueTask<ВведенняЗалишків_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ВведенняЗалишків_Objest obj = new ВведенняЗалишків_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ВведенняЗалишків_Select : DocumentSelect
    {		
        public ВведенняЗалишків_Select() : base(Config.Kernel, "tab_a83") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ВведенняЗалишків_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ВведенняЗалишків_Pointer? Current { get; private set; }

        public async ValueTask<ВведенняЗалишків_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ВведенняЗалишків_Pointer(pointer) : new ВведенняЗалишків_Pointer();
        }
        
        public async ValueTask<List<ВведенняЗалишків_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ВведенняЗалишків_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ВведенняЗалишків_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ВведенняЗалишків_Товари_TablePart : DocumentTablePart
    {
        public ВведенняЗалишків_Товари_TablePart(ВведенняЗалишків_Objest owner) : base(Config.Kernel, "tab_a84",
             ["col_e4", "col_d6", "col_d7", "col_a1", "col_d8", "col_d9", "col_e1", "col_e2", "col_e3", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a84";
        
        public const string НомерРядка = "col_e4";
        public const string Номенклатура = "col_d6";
        public const string ХарактеристикаНоменклатури = "col_d7";
        public const string Серія = "col_a1";
        public const string Пакування = "col_d8";
        public const string КількістьУпаковок = "col_d9";
        public const string Кількість = "col_e1";
        public const string Ціна = "col_e2";
        public const string Сума = "col_e3";

        public ВведенняЗалишків_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a84", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a84", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a84", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a84", "join_tab_5", "Пакування");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_e4"] != DBNull.Value) ? (int)fieldValue["col_e4"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_d6"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_d7"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_d8"]),
                    КількістьУпаковок = (fieldValue["col_d9"] != DBNull.Value) ? (int)fieldValue["col_d9"] : 0,
                    Кількість = (fieldValue["col_e1"] != DBNull.Value) ? (decimal)fieldValue["col_e1"] : 0,
                    Ціна = (fieldValue["col_e2"] != DBNull.Value) ? (decimal)fieldValue["col_e2"] : 0,
                    Сума = (fieldValue["col_e3"] != DBNull.Value) ? (decimal)fieldValue["col_e3"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a83"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_e4", record.НомерРядка},
                    {"col_d6", record.Номенклатура.UnigueID.UGuid},
                    {"col_d7", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a1", record.Серія.UnigueID.UGuid},
                    {"col_d8", record.Пакування.UnigueID.UGuid},
                    {"col_d9", record.КількістьУпаковок},
                    {"col_e1", record.Кількість},
                    {"col_e2", record.Ціна},
                    {"col_e3", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public class ВведенняЗалишків_Каси_TablePart : DocumentTablePart
    {
        public ВведенняЗалишків_Каси_TablePart(ВведенняЗалишків_Objest owner) : base(Config.Kernel, "tab_a85",
             ["col_a1", "col_e5", "col_e6", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a85";
        
        public const string НомерРядка = "col_a1";
        public const string Каса = "col_e5";
        public const string Сума = "col_e6";

        public ВведенняЗалишків_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Каси_Pointer.GetJoin(QuerySelect, Каса, "tab_a85", "join_tab_2", "Каса");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Каса = new Довідники.Каси_Pointer(fieldValue["col_e5"]),
                    Сума = (fieldValue["col_e6"] != DBNull.Value) ? (decimal)fieldValue["col_e6"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Каса.Name = ItemValue["Каса"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a83"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_e5", record.Каса.UnigueID.UGuid},
                    {"col_e6", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public class ВведенняЗалишків_БанківськіРахунки_TablePart : DocumentTablePart
    {
        public ВведенняЗалишків_БанківськіРахунки_TablePart(ВведенняЗалишків_Objest owner) : base(Config.Kernel, "tab_a86",
             ["col_a1", "col_e7", "col_e8", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a86";
        
        public const string НомерРядка = "col_a1";
        public const string БанківськийРахунок = "col_e7";
        public const string Сума = "col_e8";

        public ВведенняЗалишків_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.БанківськіРахункиОрганізацій_Pointer.GetJoin(QuerySelect, БанківськийРахунок, "tab_a86", "join_tab_2", "БанківськийРахунок");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    БанківськийРахунок = new Довідники.БанківськіРахункиОрганізацій_Pointer(fieldValue["col_e7"]),
                    Сума = (fieldValue["col_e8"] != DBNull.Value) ? (decimal)fieldValue["col_e8"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.БанківськийРахунок.Name = ItemValue["БанківськийРахунок"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a83"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_e7", record.БанківськийРахунок.UnigueID.UGuid},
                    {"col_e8", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунок { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public class ВведенняЗалишків_РозрахункиЗКонтрагентами_TablePart : DocumentTablePart
    {
        public ВведенняЗалишків_РозрахункиЗКонтрагентами_TablePart(ВведенняЗалишків_Objest owner) : base(Config.Kernel, "tab_a87",
             ["col_a1", "col_e9", "col_f1", "col_f2", "col_a2", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a87";
        
        public const string НомерРядка = "col_a1";
        public const string Контрагент = "col_e9";
        public const string Валюта = "col_f1";
        public const string Сума = "col_f2";
        public const string ТипКонтрагента = "col_a2";

        public ВведенняЗалишків_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Контрагенти_Pointer.GetJoin(QuerySelect, Контрагент, "tab_a87", "join_tab_2", "Контрагент");
                Довідники.Валюти_Pointer.GetJoin(QuerySelect, Валюта, "tab_a87", "join_tab_3", "Валюта");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_e9"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_f1"]),
                    Сума = (fieldValue["col_f2"] != DBNull.Value) ? (decimal)fieldValue["col_f2"] : 0,
                    ТипКонтрагента = (fieldValue["col_a2"] != DBNull.Value) ? (Перелічення.ТипиКонтрагентів)fieldValue["col_a2"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Контрагент.Name = ItemValue["Контрагент"];
                      record.Валюта.Name = ItemValue["Валюта"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a83"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_e9", record.Контрагент.UnigueID.UGuid},
                    {"col_f1", record.Валюта.UnigueID.UGuid},
                    {"col_f2", record.Сума},
                    {"col_a2", (int)record.ТипКонтрагента},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            public Перелічення.ТипиКонтрагентів ТипКонтрагента { get; set; } = 0;
            
        }
    }
      
    
    public static class ВведенняЗалишків_Export
    {
        public static async ValueTask ToXmlFile(ВведенняЗалишків_Pointer ВведенняЗалишків, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "НадлишкиТоварів"
    public static class НадлишкиТоварів_Const
    {
        public const string TABLE = "tab_a88";
        public const string TYPE = "НадлишкиТоварів"; /* Назва вказівника */
        public const string POINTER = "Документи.НадлишкиТоварів"; /* Повна назва вказівника */
        public const string FULLNAME = "Надлишки товарів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Організація = "col_f6";
        public const string Підрозділ = "col_f7";
        public const string Склад = "col_f8";
        public const string ВидЦіни = "col_f9";
        public const string Коментар = "col_g1";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Назва = "docname";
        public const string Автор = "col_a1";
        public const string КлючовіСловаДляПошуку = "col_a2";
    }

    public class НадлишкиТоварів_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public НадлишкиТоварів_Objest() : base(Config.Kernel, "tab_a88", НадлишкиТоварів_Const.TYPE,
             ["col_f6", "col_f7", "col_f8", "col_f9", "col_g1", "docnomer", "docdate", "docname", "col_a1", "col_a2", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new НадлишкиТоварів_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, НадлишкиТоварів_Const.FULLNAME + " *");
            
                await ValueTask.FromResult(true);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_f6"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_f7"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_f8"]);
                ВидЦіни = new Довідники.ВидиЦін_Pointer(base.FieldValue["col_f9"]);
                Коментар = base.FieldValue["col_g1"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Назва = base.FieldValue["docname"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a1"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a2"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_f6"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_f7"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_f8"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_f9"] = ВидЦіни.UnigueID.UGuid;
            base.FieldValue["col_g1"] = Коментар;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["docname"] = Назва;
            base.FieldValue["col_a1"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a2"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseSpend(false, DateTime.MinValue);
            return false;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<НадлишкиТоварів_Objest> Copy(bool copyTableParts = false)
        {
            НадлишкиТоварів_Objest copy = new НадлишкиТоварів_Objest()
            {
                Організація = Організація,
                Підрозділ = Підрозділ,
                Склад = Склад,
                ВидЦіни = ВидЦіни,
                Коментар = Коментар,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Назва = Назва,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a89", ]);
        }
        
        public НадлишкиТоварів_Pointer GetDocumentPointer()
        {
            return new НадлишкиТоварів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(НадлишкиТоварів_Const.PRESENTATION_FIELDS);
        }
        
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
        public string Коментар { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public string Назва { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public НадлишкиТоварів_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class НадлишкиТоварів_Pointer : DocumentPointer
    {
        public НадлишкиТоварів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a88", НадлишкиТоварів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public НадлишкиТоварів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a88", "НадлишкиТоварів")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(НадлишкиТоварів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [НадлишкиТоварів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{НадлишкиТоварів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(НадлишкиТоварів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            НадлишкиТоварів_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public НадлишкиТоварів_Pointer Copy()
        {
            return new НадлишкиТоварів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public НадлишкиТоварів_Pointer GetEmptyPointer()
        {
            return new НадлишкиТоварів_Pointer();
        }

        public async ValueTask<НадлишкиТоварів_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            НадлишкиТоварів_Objest obj = new НадлишкиТоварів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class НадлишкиТоварів_Select : DocumentSelect
    {		
        public НадлишкиТоварів_Select() : base(Config.Kernel, "tab_a88") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new НадлишкиТоварів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public НадлишкиТоварів_Pointer? Current { get; private set; }

        public async ValueTask<НадлишкиТоварів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new НадлишкиТоварів_Pointer(pointer) : new НадлишкиТоварів_Pointer();
        }
        
        public async ValueTask<List<НадлишкиТоварів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<НадлишкиТоварів_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new НадлишкиТоварів_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class НадлишкиТоварів_Товари_TablePart : DocumentTablePart
    {
        public НадлишкиТоварів_Товари_TablePart(НадлишкиТоварів_Objest owner) : base(Config.Kernel, "tab_a89",
             ["col_g2", "col_g3", "col_g4", "col_g5", "col_g6", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
        }

        public const string TABLE = "tab_a89";
        
        public const string Номенклатура = "col_g2";
        public const string ХарактеристикаНоменклатури = "col_g3";
        public const string Кількість = "col_g4";
        public const string Ціна = "col_g5";
        public const string Сума = "col_g6";

        public НадлишкиТоварів_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a89", "join_tab_1", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a89", "join_tab_2", "ХарактеристикаНоменклатури");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_g2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_g3"]),
                    Кількість = (fieldValue["col_g4"] != DBNull.Value) ? (decimal)fieldValue["col_g4"] : 0,
                    Ціна = (fieldValue["col_g5"] != DBNull.Value) ? (decimal)fieldValue["col_g5"] : 0,
                    Сума = (fieldValue["col_g6"] != DBNull.Value) ? (decimal)fieldValue["col_g6"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a88"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            foreach (Record record in Records)
            {
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_g2", record.Номенклатура.UnigueID.UGuid},
                    {"col_g3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_g4", record.Кількість},
                    {"col_g5", record.Ціна},
                    {"col_g6", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public static class НадлишкиТоварів_Export
    {
        public static async ValueTask ToXmlFile(НадлишкиТоварів_Pointer НадлишкиТоварів, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПересортицяТоварів"
    public static class ПересортицяТоварів_Const
    {
        public const string TABLE = "tab_a90";
        public const string TYPE = "ПересортицяТоварів"; /* Назва вказівника */
        public const string POINTER = "Документи.ПересортицяТоварів"; /* Повна назва вказівника */
        public const string FULLNAME = "Пересортиця товарів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_h2";
        public const string Підрозділ = "col_h3";
        public const string Склад = "col_h4";
        public const string ВидЦіни = "col_h5";
        public const string Коментар = "col_h6";
        public const string Автор = "col_a1";
        public const string КлючовіСловаДляПошуку = "col_a2";
    }

    public class ПересортицяТоварів_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПересортицяТоварів_Objest() : base(Config.Kernel, "tab_a90", ПересортицяТоварів_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_h2", "col_h3", "col_h4", "col_h5", "col_h6", "col_a1", "col_a2", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПересортицяТоварів_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПересортицяТоварів_Const.FULLNAME + " *");
            
                await ValueTask.FromResult(true);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_h2"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_h3"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_h4"]);
                ВидЦіни = new Довідники.ВидиЦін_Pointer(base.FieldValue["col_h5"]);
                Коментар = base.FieldValue["col_h6"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a1"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a2"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_h2"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_h3"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_h4"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_h5"] = ВидЦіни.UnigueID.UGuid;
            base.FieldValue["col_h6"] = Коментар;
            base.FieldValue["col_a1"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a2"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseSpend(false, DateTime.MinValue);
            return false;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПересортицяТоварів_Objest> Copy(bool copyTableParts = false)
        {
            ПересортицяТоварів_Objest copy = new ПересортицяТоварів_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Підрозділ = Підрозділ,
                Склад = Склад,
                ВидЦіни = ВидЦіни,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a91", ]);
        }
        
        public ПересортицяТоварів_Pointer GetDocumentPointer()
        {
            return new ПересортицяТоварів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПересортицяТоварів_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ПересортицяТоварів_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПересортицяТоварів_Pointer : DocumentPointer
    {
        public ПересортицяТоварів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a90", ПересортицяТоварів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПересортицяТоварів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a90", "ПересортицяТоварів")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПересортицяТоварів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПересортицяТоварів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПересортицяТоварів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПересортицяТоварів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПересортицяТоварів_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПересортицяТоварів_Pointer Copy()
        {
            return new ПересортицяТоварів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПересортицяТоварів_Pointer GetEmptyPointer()
        {
            return new ПересортицяТоварів_Pointer();
        }

        public async ValueTask<ПересортицяТоварів_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПересортицяТоварів_Objest obj = new ПересортицяТоварів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПересортицяТоварів_Select : DocumentSelect
    {		
        public ПересортицяТоварів_Select() : base(Config.Kernel, "tab_a90") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПересортицяТоварів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПересортицяТоварів_Pointer? Current { get; private set; }

        public async ValueTask<ПересортицяТоварів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПересортицяТоварів_Pointer(pointer) : new ПересортицяТоварів_Pointer();
        }
        
        public async ValueTask<List<ПересортицяТоварів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПересортицяТоварів_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПересортицяТоварів_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПересортицяТоварів_Товари_TablePart : DocumentTablePart
    {
        public ПересортицяТоварів_Товари_TablePart(ПересортицяТоварів_Objest owner) : base(Config.Kernel, "tab_a91",
             ["col_a1", "col_h7", "col_h8", "col_i1", "col_h9", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a91";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_h7";
        public const string ХарактеристикаНоменклатури = "col_h8";
        public const string Кількість = "col_i1";
        public const string Ціна = "col_h9";

        public ПересортицяТоварів_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a91", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a91", "join_tab_3", "ХарактеристикаНоменклатури");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_h7"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_h8"]),
                    Кількість = (fieldValue["col_i1"] != DBNull.Value) ? (decimal)fieldValue["col_i1"] : 0,
                    Ціна = (fieldValue["col_h9"] != DBNull.Value) ? (decimal)fieldValue["col_h9"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a90"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_h7", record.Номенклатура.UnigueID.UGuid},
                    {"col_h8", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_i1", record.Кількість},
                    {"col_h9", record.Ціна},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            
        }
    }
      
    
    public static class ПересортицяТоварів_Export
    {
        public static async ValueTask ToXmlFile(ПересортицяТоварів_Pointer ПересортицяТоварів, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПерерахунокТоварів"
    public static class ПерерахунокТоварів_Const
    {
        public const string TABLE = "tab_a92";
        public const string TYPE = "ПерерахунокТоварів"; /* Назва вказівника */
        public const string POINTER = "Документи.ПерерахунокТоварів"; /* Повна назва вказівника */
        public const string FULLNAME = "Перерахунок товарів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Склад = "col_i6";
        public const string Відповідальний = "col_i7";
        public const string Коментар = "col_i5";
        public const string Автор = "col_a1";
        public const string КлючовіСловаДляПошуку = "col_a2";
        public const string Організація = "col_a3";
        public const string Підрозділ = "col_a4";
        public const string Основа = "col_a5";
    }

    public class ПерерахунокТоварів_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПерерахунокТоварів_Objest() : base(Config.Kernel, "tab_a92", ПерерахунокТоварів_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_i6", "col_i7", "col_i5", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПерерахунокТоварів_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПерерахунокТоварів_Const.FULLNAME + " *");
            
                await ПерерахунокТоварів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_i6"]);
                Відповідальний = new Довідники.ФізичніОсоби_Pointer(base.FieldValue["col_i7"]);
                Коментар = base.FieldValue["col_i5"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a1"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a2"].ToString() ?? "";
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a3"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a4"]);
                Основа = (base.FieldValue["col_a5"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a5"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПерерахунокТоварів_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_i6"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_i7"] = Відповідальний.UnigueID.UGuid;
            base.FieldValue["col_i5"] = Коментар;
            base.FieldValue["col_a1"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a2"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a3"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПерерахунокТоварів_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПерерахунокТоварів_Objest> Copy(bool copyTableParts = false)
        {
            ПерерахунокТоварів_Objest copy = new ПерерахунокТоварів_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Склад = Склад,
                Відповідальний = Відповідальний,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Організація = Організація,
                Підрозділ = Підрозділ,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПерерахунокТоварів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a93", ]);
        }
        
        public ПерерахунокТоварів_Pointer GetDocumentPointer()
        {
            return new ПерерахунокТоварів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПерерахунокТоварів_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.ФізичніОсоби_Pointer Відповідальний { get; set; } = new Довідники.ФізичніОсоби_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ПерерахунокТоварів_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПерерахунокТоварів_Pointer : DocumentPointer
    {
        public ПерерахунокТоварів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a92", ПерерахунокТоварів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПерерахунокТоварів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a92", "ПерерахунокТоварів")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПерерахунокТоварів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПерерахунокТоварів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПерерахунокТоварів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПерерахунокТоварів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПерерахунокТоварів_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПерерахунокТоварів_Pointer Copy()
        {
            return new ПерерахунокТоварів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПерерахунокТоварів_Pointer GetEmptyPointer()
        {
            return new ПерерахунокТоварів_Pointer();
        }

        public async ValueTask<ПерерахунокТоварів_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПерерахунокТоварів_Objest obj = new ПерерахунокТоварів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПерерахунокТоварів_Select : DocumentSelect
    {		
        public ПерерахунокТоварів_Select() : base(Config.Kernel, "tab_a92") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПерерахунокТоварів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПерерахунокТоварів_Pointer? Current { get; private set; }

        public async ValueTask<ПерерахунокТоварів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПерерахунокТоварів_Pointer(pointer) : new ПерерахунокТоварів_Pointer();
        }
        
        public async ValueTask<List<ПерерахунокТоварів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПерерахунокТоварів_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПерерахунокТоварів_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПерерахунокТоварів_Товари_TablePart : DocumentTablePart
    {
        public ПерерахунокТоварів_Товари_TablePart(ПерерахунокТоварів_Objest owner) : base(Config.Kernel, "tab_a93",
             ["col_i8", "col_i9", "col_j1", "col_j3", "col_j4", "col_j5", "col_j6", "col_a1", "col_a2", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a93";
        
        public const string Кількість = "col_i8";
        public const string КількістьФакт = "col_i9";
        public const string КількістьУпаковок = "col_j1";
        public const string КількістьУпаковокФакт = "col_j3";
        public const string Номенклатура = "col_j4";
        public const string Пакування = "col_j5";
        public const string ХарактеристикаНоменклатури = "col_j6";
        public const string НомерРядка = "col_a1";
        public const string Коментар = "col_a2";

        public ПерерахунокТоварів_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a93", "join_tab_5", "Номенклатура");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a93", "join_tab_6", "Пакування");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a93", "join_tab_7", "ХарактеристикаНоменклатури");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Кількість = (fieldValue["col_i8"] != DBNull.Value) ? (decimal)fieldValue["col_i8"] : 0,
                    КількістьФакт = (fieldValue["col_i9"] != DBNull.Value) ? (decimal)fieldValue["col_i9"] : 0,
                    КількістьУпаковок = (fieldValue["col_j1"] != DBNull.Value) ? (int)fieldValue["col_j1"] : 0,
                    КількістьУпаковокФакт = (fieldValue["col_j3"] != DBNull.Value) ? (int)fieldValue["col_j3"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_j4"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_j5"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_j6"]),
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Коментар = fieldValue["col_a2"].ToString() ?? "",
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a92"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_i8", record.Кількість},
                    {"col_i9", record.КількістьФакт},
                    {"col_j1", record.КількістьУпаковок},
                    {"col_j3", record.КількістьУпаковокФакт},
                    {"col_j4", record.Номенклатура.UnigueID.UGuid},
                    {"col_j5", record.Пакування.UnigueID.UGuid},
                    {"col_j6", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a1", record.НомерРядка},
                    {"col_a2", record.Коментар},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public decimal Кількість { get; set; } = 0;
            public decimal КількістьФакт { get; set; } = 0;
            public int КількістьУпаковок { get; set; } = 0;
            public int КількістьУпаковокФакт { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public int НомерРядка { get; set; } = 0;
            public string Коментар { get; set; } = "";
            
        }
    }
      
    
    public static class ПерерахунокТоварів_Export
    {
        public static async ValueTask ToXmlFile(ПерерахунокТоварів_Pointer ПерерахунокТоварів, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПсуванняТоварів"
    public static class ПсуванняТоварів_Const
    {
        public const string TABLE = "tab_a94";
        public const string TYPE = "ПсуванняТоварів"; /* Назва вказівника */
        public const string POINTER = "Документи.ПсуванняТоварів"; /* Повна назва вказівника */
        public const string FULLNAME = "Псування товарів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_a6";
        public const string Підрозділ = "col_a7";
        public const string Склад = "col_a4";
        public const string Причина = "col_a8";
        public const string СумаДокументу = "col_a1";
        public const string Коментар = "col_a5";
        public const string Автор = "col_a2";
        public const string КлючовіСловаДляПошуку = "col_a3";
        public const string Основа = "col_b2";
    }

    public class ПсуванняТоварів_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПсуванняТоварів_Objest() : base(Config.Kernel, "tab_a94", ПсуванняТоварів_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a6", "col_a7", "col_a4", "col_a8", "col_a1", "col_a5", "col_a2", "col_a3", "col_b2", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПсуванняТоварів_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПсуванняТоварів_Const.FULLNAME + " *");
            
                await ПсуванняТоварів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a6"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a7"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a4"]);
                Причина = base.FieldValue["col_a8"].ToString() ?? "";
                СумаДокументу = (base.FieldValue["col_a1"] != DBNull.Value) ? (decimal)base.FieldValue["col_a1"] : 0;
                Коментар = base.FieldValue["col_a5"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a2"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a3"].ToString() ?? "";
                Основа = (base.FieldValue["col_b2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_b2"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПсуванняТоварів_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a6"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a7"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a8"] = Причина;
            base.FieldValue["col_a1"] = СумаДокументу;
            base.FieldValue["col_a5"] = Коментар;
            base.FieldValue["col_a2"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a3"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_b2"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, Причина, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПсуванняТоварів_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПсуванняТоварів_Objest> Copy(bool copyTableParts = false)
        {
            ПсуванняТоварів_Objest copy = new ПсуванняТоварів_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Підрозділ = Підрозділ,
                Склад = Склад,
                Причина = Причина,
                СумаДокументу = СумаДокументу,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПсуванняТоварів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a95", ]);
        }
        
        public ПсуванняТоварів_Pointer GetDocumentPointer()
        {
            return new ПсуванняТоварів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПсуванняТоварів_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public string Причина { get; set; } = "";
        public decimal СумаДокументу { get; set; } = 0;
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ПсуванняТоварів_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПсуванняТоварів_Pointer : DocumentPointer
    {
        public ПсуванняТоварів_Pointer(object? uid = null) : base(Config.Kernel, "tab_a94", ПсуванняТоварів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПсуванняТоварів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a94", "ПсуванняТоварів")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПсуванняТоварів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПсуванняТоварів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПсуванняТоварів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПсуванняТоварів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПсуванняТоварів_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПсуванняТоварів_Pointer Copy()
        {
            return new ПсуванняТоварів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПсуванняТоварів_Pointer GetEmptyPointer()
        {
            return new ПсуванняТоварів_Pointer();
        }

        public async ValueTask<ПсуванняТоварів_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПсуванняТоварів_Objest obj = new ПсуванняТоварів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПсуванняТоварів_Select : DocumentSelect
    {		
        public ПсуванняТоварів_Select() : base(Config.Kernel, "tab_a94") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПсуванняТоварів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПсуванняТоварів_Pointer? Current { get; private set; }

        public async ValueTask<ПсуванняТоварів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПсуванняТоварів_Pointer(pointer) : new ПсуванняТоварів_Pointer();
        }
        
        public async ValueTask<List<ПсуванняТоварів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПсуванняТоварів_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПсуванняТоварів_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПсуванняТоварів_Товари_TablePart : DocumentTablePart
    {
        public ПсуванняТоварів_Товари_TablePart(ПсуванняТоварів_Objest owner) : base(Config.Kernel, "tab_a95",
             ["col_a3", "col_b2", "col_b3", "col_a1", "col_a4", "col_a5", "col_b4", "col_b5", "col_a2", "col_a6", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a95";
        
        public const string НомерРядка = "col_a3";
        public const string Номенклатура = "col_b2";
        public const string ХарактеристикаНоменклатури = "col_b3";
        public const string Серія = "col_a1";
        public const string Пакування = "col_a4";
        public const string КількістьУпаковок = "col_a5";
        public const string Кількість = "col_b4";
        public const string Ціна = "col_b5";
        public const string Сума = "col_a2";
        public const string Партія = "col_a6";

        public ПсуванняТоварів_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a95", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a95", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a95", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a95", "join_tab_5", "Пакування");
                Довідники.ПартіяТоварівКомпозит_Pointer.GetJoin(QuerySelect, Партія, "tab_a95", "join_tab_10", "Партія");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a3"] != DBNull.Value) ? (int)fieldValue["col_a3"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_b3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a4"]),
                    КількістьУпаковок = (fieldValue["col_a5"] != DBNull.Value) ? (int)fieldValue["col_a5"] : 0,
                    Кількість = (fieldValue["col_b4"] != DBNull.Value) ? (decimal)fieldValue["col_b4"] : 0,
                    Ціна = (fieldValue["col_b5"] != DBNull.Value) ? (decimal)fieldValue["col_b5"] : 0,
                    Сума = (fieldValue["col_a2"] != DBNull.Value) ? (decimal)fieldValue["col_a2"] : 0,
                    Партія = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a6"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Партія.Name = ItemValue["Партія"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a94"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a3", record.НомерРядка},
                    {"col_b2", record.Номенклатура.UnigueID.UGuid},
                    {"col_b3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a1", record.Серія.UnigueID.UGuid},
                    {"col_a4", record.Пакування.UnigueID.UGuid},
                    {"col_a5", record.КількістьУпаковок},
                    {"col_b4", record.Кількість},
                    {"col_b5", record.Ціна},
                    {"col_a2", record.Сума},
                    {"col_a6", record.Партія.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public Довідники.ПартіяТоварівКомпозит_Pointer Партія { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            
        }
    }
      
    
    public static class ПсуванняТоварів_Export
    {
        public static async ValueTask ToXmlFile(ПсуванняТоварів_Pointer ПсуванняТоварів, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ВнутрішнєСпоживанняТоварів"
    public static class ВнутрішнєСпоживанняТоварів_Const
    {
        public const string TABLE = "tab_b07";
        public const string TYPE = "ВнутрішнєСпоживанняТоварів"; /* Назва вказівника */
        public const string POINTER = "Документи.ВнутрішнєСпоживанняТоварів"; /* Повна назва вказівника */
        public const string FULLNAME = "Внутрішнє споживання товарів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_a1";
        public const string Склад = "col_b1";
        public const string Валюта = "col_a2";
        public const string Підрозділ = "col_a9";
        public const string СумаДокументу = "col_a8";
        public const string Основа = "col_b7";
        public const string Автор = "col_b9";
        public const string ГосподарськаОперація = "col_b4";
        public const string Коментар = "col_b2";
        public const string КлючовіСловаДляПошуку = "col_a3";
    }

    public class ВнутрішнєСпоживанняТоварів_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ВнутрішнєСпоживанняТоварів_Objest() : base(Config.Kernel, "tab_b07", ВнутрішнєСпоживанняТоварів_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a1", "col_b1", "col_a2", "col_a9", "col_a8", "col_b7", "col_b9", "col_b4", "col_b2", "col_a3", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ВнутрішнєСпоживанняТоварів_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ВнутрішнєСпоживанняТоварів_Const.FULLNAME + " *");
            
                await ВнутрішнєСпоживанняТоварів_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a1"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_b1"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a2"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a9"]);
                СумаДокументу = (base.FieldValue["col_a8"] != DBNull.Value) ? (decimal)base.FieldValue["col_a8"] : 0;
                Основа = (base.FieldValue["col_b7"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_b7"] : new UuidAndText();
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_b9"]);
                ГосподарськаОперація = (base.FieldValue["col_b4"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_b4"] : 0;
                Коментар = base.FieldValue["col_b2"].ToString() ?? "";
                КлючовіСловаДляПошуку = base.FieldValue["col_a3"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ВнутрішнєСпоживанняТоварів_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a1"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_b1"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a9"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a8"] = СумаДокументу;
            base.FieldValue["col_b7"] = Основа;
            base.FieldValue["col_b9"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_b4"] = (int)ГосподарськаОперація;
            base.FieldValue["col_b2"] = Коментар;
            base.FieldValue["col_a3"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ВнутрішнєСпоживанняТоварів_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ВнутрішнєСпоживанняТоварів_Objest> Copy(bool copyTableParts = false)
        {
            ВнутрішнєСпоживанняТоварів_Objest copy = new ВнутрішнєСпоживанняТоварів_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Склад = Склад,
                Валюта = Валюта,
                Підрозділ = Підрозділ,
                СумаДокументу = СумаДокументу,
                Основа = Основа,
                Автор = Автор,
                ГосподарськаОперація = ГосподарськаОперація,
                Коментар = Коментар,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ВнутрішнєСпоживанняТоварів_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b08", ]);
        }
        
        public ВнутрішнєСпоживанняТоварів_Pointer GetDocumentPointer()
        {
            return new ВнутрішнєСпоживанняТоварів_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ВнутрішнєСпоживанняТоварів_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public string Коментар { get; set; } = "";
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ВнутрішнєСпоживанняТоварів_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ВнутрішнєСпоживанняТоварів_Pointer : DocumentPointer
    {
        public ВнутрішнєСпоживанняТоварів_Pointer(object? uid = null) : base(Config.Kernel, "tab_b07", ВнутрішнєСпоживанняТоварів_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ВнутрішнєСпоживанняТоварів_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b07", "ВнутрішнєСпоживанняТоварів")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ВнутрішнєСпоживанняТоварів_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ВнутрішнєСпоживанняТоварів_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ВнутрішнєСпоживанняТоварів_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ВнутрішнєСпоживанняТоварів_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ВнутрішнєСпоживанняТоварів_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ПартіїТоварів_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ВнутрішнєСпоживанняТоварів_Pointer Copy()
        {
            return new ВнутрішнєСпоживанняТоварів_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ВнутрішнєСпоживанняТоварів_Pointer GetEmptyPointer()
        {
            return new ВнутрішнєСпоживанняТоварів_Pointer();
        }

        public async ValueTask<ВнутрішнєСпоживанняТоварів_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ВнутрішнєСпоживанняТоварів_Objest obj = new ВнутрішнєСпоживанняТоварів_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ВнутрішнєСпоживанняТоварів_Select : DocumentSelect
    {		
        public ВнутрішнєСпоживанняТоварів_Select() : base(Config.Kernel, "tab_b07") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ВнутрішнєСпоживанняТоварів_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ВнутрішнєСпоживанняТоварів_Pointer? Current { get; private set; }

        public async ValueTask<ВнутрішнєСпоживанняТоварів_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ВнутрішнєСпоживанняТоварів_Pointer(pointer) : new ВнутрішнєСпоживанняТоварів_Pointer();
        }
        
        public async ValueTask<List<ВнутрішнєСпоживанняТоварів_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ВнутрішнєСпоживанняТоварів_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ВнутрішнєСпоживанняТоварів_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ВнутрішнєСпоживанняТоварів_Товари_TablePart : DocumentTablePart
    {
        public ВнутрішнєСпоживанняТоварів_Товари_TablePart(ВнутрішнєСпоживанняТоварів_Objest owner) : base(Config.Kernel, "tab_b08",
             ["col_a1", "col_d2", "col_d3", "col_a2", "col_d4", "col_d5", "col_d6", "col_d8", "col_d9", "col_a3", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b08";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_d2";
        public const string ХарактеристикаНоменклатури = "col_d3";
        public const string Серія = "col_a2";
        public const string Пакування = "col_d4";
        public const string КількістьУпаковок = "col_d5";
        public const string Кількість = "col_d6";
        public const string Ціна = "col_d8";
        public const string Сума = "col_d9";
        public const string Партія = "col_a3";

        public ВнутрішнєСпоживанняТоварів_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b08", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b08", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_b08", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b08", "join_tab_5", "Пакування");
                Довідники.ПартіяТоварівКомпозит_Pointer.GetJoin(QuerySelect, Партія, "tab_b08", "join_tab_10", "Партія");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_d2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_d3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a2"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_d4"]),
                    КількістьУпаковок = (fieldValue["col_d5"] != DBNull.Value) ? (int)fieldValue["col_d5"] : 0,
                    Кількість = (fieldValue["col_d6"] != DBNull.Value) ? (decimal)fieldValue["col_d6"] : 0,
                    Ціна = (fieldValue["col_d8"] != DBNull.Value) ? (decimal)fieldValue["col_d8"] : 0,
                    Сума = (fieldValue["col_d9"] != DBNull.Value) ? (decimal)fieldValue["col_d9"] : 0,
                    Партія = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a3"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Партія.Name = ItemValue["Партія"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b07"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_d2", record.Номенклатура.UnigueID.UGuid},
                    {"col_d3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a2", record.Серія.UnigueID.UGuid},
                    {"col_d4", record.Пакування.UnigueID.UGuid},
                    {"col_d5", record.КількістьУпаковок},
                    {"col_d6", record.Кількість},
                    {"col_d8", record.Ціна},
                    {"col_d9", record.Сума},
                    {"col_a3", record.Партія.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public Довідники.ПартіяТоварівКомпозит_Pointer Партія { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            
        }
    }
      
    
    public static class ВнутрішнєСпоживанняТоварів_Export
    {
        public static async ValueTask ToXmlFile(ВнутрішнєСпоживанняТоварів_Pointer ВнутрішнєСпоживанняТоварів, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "РахунокФактура"
    public static class РахунокФактура_Const
    {
        public const string TABLE = "tab_b10";
        public const string TYPE = "РахунокФактура"; /* Назва вказівника */
        public const string POINTER = "Документи.РахунокФактура"; /* Повна назва вказівника */
        public const string FULLNAME = "Рахунок фактура"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Контрагент = "col_b4";
        public const string Організація = "col_b5";
        public const string Валюта = "col_b6";
        public const string СумаДокументу = "col_b7";
        public const string Склад = "col_b8";
        public const string Статус = "col_a1";
        public const string ФормаОплати = "col_a3";
        public const string БанківськийРахунок = "col_a4";
        public const string БанківськийРахунокКонтрагента = "col_a5";
        public const string Каса = "col_a6";
        public const string ГосподарськаОперація = "col_b9";
        public const string Договір = "col_c2";
        public const string Підрозділ = "col_c3";
        public const string Автор = "col_c4";
        public const string Коментар = "col_c1";
        public const string Менеджер = "col_a2";
        public const string КлючовіСловаДляПошуку = "col_a7";
        public const string Основа = "col_a8";
    }

    public class РахунокФактура_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public РахунокФактура_Objest() : base(Config.Kernel, "tab_b10", РахунокФактура_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_b4", "col_b5", "col_b6", "col_b7", "col_b8", "col_a1", "col_a3", "col_a4", "col_a5", "col_a6", "col_b9", "col_c2", "col_c3", "col_c4", "col_c1", "col_a2", "col_a7", "col_a8", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new РахунокФактура_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, РахунокФактура_Const.FULLNAME + " *");
            
                await РахунокФактура_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_b4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_b5"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_b6"]);
                СумаДокументу = (base.FieldValue["col_b7"] != DBNull.Value) ? (decimal)base.FieldValue["col_b7"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_b8"]);
                Статус = (base.FieldValue["col_a1"] != DBNull.Value) ? (Перелічення.СтатусиЗамовленьКлієнтів)base.FieldValue["col_a1"] : 0;
                ФормаОплати = (base.FieldValue["col_a3"] != DBNull.Value) ? (Перелічення.ФормаОплати)base.FieldValue["col_a3"] : 0;
                БанківськийРахунок = new Довідники.БанківськіРахункиОрганізацій_Pointer(base.FieldValue["col_a4"]);
                БанківськийРахунокКонтрагента = new Довідники.БанківськіРахункиКонтрагентів_Pointer(base.FieldValue["col_a5"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_a6"]);
                ГосподарськаОперація = (base.FieldValue["col_b9"] != DBNull.Value) ? (Перелічення.ГосподарськіОперації)base.FieldValue["col_b9"] : 0;
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_c2"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_c3"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_c4"]);
                Коментар = base.FieldValue["col_c1"].ToString() ?? "";
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_a2"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a7"].ToString() ?? "";
                Основа = (base.FieldValue["col_a8"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a8"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await РахунокФактура_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_b4"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_b5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_b6"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_b7"] = СумаДокументу;
            base.FieldValue["col_b8"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a1"] = (int)Статус;
            base.FieldValue["col_a3"] = (int)ФормаОплати;
            base.FieldValue["col_a4"] = БанківськийРахунок.UnigueID.UGuid;
            base.FieldValue["col_a5"] = БанківськийРахунокКонтрагента.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_b9"] = (int)ГосподарськаОперація;
            base.FieldValue["col_c2"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_c3"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_c4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_c1"] = Коментар;
            base.FieldValue["col_a2"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_a7"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a8"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await РахунокФактура_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<РахунокФактура_Objest> Copy(bool copyTableParts = false)
        {
            РахунокФактура_Objest copy = new РахунокФактура_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Контрагент = Контрагент,
                Організація = Організація,
                Валюта = Валюта,
                СумаДокументу = СумаДокументу,
                Склад = Склад,
                Статус = Статус,
                ФормаОплати = ФормаОплати,
                БанківськийРахунок = БанківськийРахунок,
                БанківськийРахунокКонтрагента = БанківськийРахунокКонтрагента,
                Каса = Каса,
                ГосподарськаОперація = ГосподарськаОперація,
                Договір = Договір,
                Підрозділ = Підрозділ,
                Автор = Автор,
                Коментар = Коментар,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await РахунокФактура_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b11", ]);
        }
        
        public РахунокФактура_Pointer GetDocumentPointer()
        {
            return new РахунокФактура_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(РахунокФактура_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Перелічення.СтатусиЗамовленьКлієнтів Статус { get; set; } = 0;
        public Перелічення.ФормаОплати ФормаОплати { get; set; } = 0;
        public Довідники.БанківськіРахункиОрганізацій_Pointer БанківськийРахунок { get; set; } = new Довідники.БанківськіРахункиОрганізацій_Pointer();
        public Довідники.БанківськіРахункиКонтрагентів_Pointer БанківськийРахунокКонтрагента { get; set; } = new Довідники.БанківськіРахункиКонтрагентів_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public Перелічення.ГосподарськіОперації ГосподарськаОперація { get; set; } = 0;
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public РахунокФактура_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class РахунокФактура_Pointer : DocumentPointer
    {
        public РахунокФактура_Pointer(object? uid = null) : base(Config.Kernel, "tab_b10", РахунокФактура_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public РахунокФактура_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b10", "РахунокФактура")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(РахунокФактура_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [РахунокФактура_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{РахунокФактура_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(РахунокФактура_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            РахунокФактура_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public РахунокФактура_Pointer Copy()
        {
            return new РахунокФактура_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public РахунокФактура_Pointer GetEmptyPointer()
        {
            return new РахунокФактура_Pointer();
        }

        public async ValueTask<РахунокФактура_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            РахунокФактура_Objest obj = new РахунокФактура_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class РахунокФактура_Select : DocumentSelect
    {		
        public РахунокФактура_Select() : base(Config.Kernel, "tab_b10") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new РахунокФактура_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public РахунокФактура_Pointer? Current { get; private set; }

        public async ValueTask<РахунокФактура_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new РахунокФактура_Pointer(pointer) : new РахунокФактура_Pointer();
        }
        
        public async ValueTask<List<РахунокФактура_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<РахунокФактура_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new РахунокФактура_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class РахунокФактура_Товари_TablePart : DocumentTablePart
    {
        public РахунокФактура_Товари_TablePart(РахунокФактура_Objest owner) : base(Config.Kernel, "tab_b11",
             ["col_a2", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_c5", "col_c6", "col_c7", "col_c8", "col_a1", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b11";
        
        public const string НомерРядка = "col_a2";
        public const string Номенклатура = "col_b9";
        public const string ХарактеристикаНоменклатури = "col_c1";
        public const string Пакування = "col_c2";
        public const string КількістьУпаковок = "col_c3";
        public const string Кількість = "col_c4";
        public const string ВидЦіни = "col_c5";
        public const string Ціна = "col_c6";
        public const string Сума = "col_c7";
        public const string Скидка = "col_c8";
        public const string Склад = "col_a1";

        public РахунокФактура_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b11", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b11", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b11", "join_tab_4", "Пакування");
                Довідники.ВидиЦін_Pointer.GetJoin(QuerySelect, ВидЦіни, "tab_b11", "join_tab_7", "ВидЦіни");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_b11", "join_tab_11", "Склад");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a2"] != DBNull.Value) ? (int)fieldValue["col_a2"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b9"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_c1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_c2"]),
                    КількістьУпаковок = (fieldValue["col_c3"] != DBNull.Value) ? (int)fieldValue["col_c3"] : 0,
                    Кількість = (fieldValue["col_c4"] != DBNull.Value) ? (decimal)fieldValue["col_c4"] : 0,
                    ВидЦіни = new Довідники.ВидиЦін_Pointer(fieldValue["col_c5"]),
                    Ціна = (fieldValue["col_c6"] != DBNull.Value) ? (decimal)fieldValue["col_c6"] : 0,
                    Сума = (fieldValue["col_c7"] != DBNull.Value) ? (decimal)fieldValue["col_c7"] : 0,
                    Скидка = (fieldValue["col_c8"] != DBNull.Value) ? (decimal)fieldValue["col_c8"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a1"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ВидЦіни.Name = ItemValue["ВидЦіни"];
                      record.Склад.Name = ItemValue["Склад"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b10"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a2", record.НомерРядка},
                    {"col_b9", record.Номенклатура.UnigueID.UGuid},
                    {"col_c1", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_c2", record.Пакування.UnigueID.UGuid},
                    {"col_c3", record.КількістьУпаковок},
                    {"col_c4", record.Кількість},
                    {"col_c5", record.ВидЦіни.UnigueID.UGuid},
                    {"col_c6", record.Ціна},
                    {"col_c7", record.Сума},
                    {"col_c8", record.Скидка},
                    {"col_a1", record.Склад.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Скидка { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            
        }
    }
      
    
    public static class РахунокФактура_Export
    {
        public static async ValueTask ToXmlFile(РахунокФактура_Pointer РахунокФактура, string pathToSave)
        {
        РахунокФактура_Objest? obj = await РахунокФактура.GetDocumentObject(true);
            if (obj == null) return;

            XmlWriter xmlWriter = XmlWriter.Create(pathToSave, new XmlWriterSettings() { Indent = true, Encoding = System.Text.Encoding.UTF8 });
            xmlWriter.WriteStartDocument();
            xmlWriter.WriteStartElement("Document");
            xmlWriter.WriteAttributeString("uid", obj.UnigueID.ToString());
            
            xmlWriter.WriteStartElement("Назва");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.Назва);
              
            xmlWriter.WriteEndElement(); //Назва
            xmlWriter.WriteStartElement("НомерДок");
            xmlWriter.WriteAttributeString("type", "string");
            
                xmlWriter.WriteCData(obj.НомерДок);
              
            xmlWriter.WriteEndElement(); //НомерДок
            xmlWriter.WriteStartElement("ДатаДок");
            xmlWriter.WriteAttributeString("type", "datetime");
            
                xmlWriter.WriteValue(obj.ДатаДок.ToString("dd.MM.yyyy HH:mm:ss"));
              
            xmlWriter.WriteEndElement(); //ДатаДок
            xmlWriter.WriteStartElement("Контрагент");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Контрагенти");
                    xmlWriter.WriteAttributeString("uid", obj.Контрагент.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Контрагент.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Контрагент
            xmlWriter.WriteStartElement("Організація");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Організації");
                    xmlWriter.WriteAttributeString("uid", obj.Організація.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Організація.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Організація
            xmlWriter.WriteStartElement("Валюта");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Валюти");
                    xmlWriter.WriteAttributeString("uid", obj.Валюта.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Валюта.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Валюта
            xmlWriter.WriteStartElement("СумаДокументу");
            xmlWriter.WriteAttributeString("type", "numeric");
            
                xmlWriter.WriteValue(obj.СумаДокументу);
              
            xmlWriter.WriteEndElement(); //СумаДокументу
            xmlWriter.WriteStartElement("Склад");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Склади");
                    xmlWriter.WriteAttributeString("uid", obj.Склад.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Склад.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Склад
            xmlWriter.WriteStartElement("Каса");
            xmlWriter.WriteAttributeString("type", "pointer");
            
                    xmlWriter.WriteAttributeString("pointer", "Довідники.Каси");
                    xmlWriter.WriteAttributeString("uid", obj.Каса.UnigueID.ToString());
                    xmlWriter.WriteCData(await obj.Каса.GetPresentation());
                  
            xmlWriter.WriteEndElement(); //Каса
                /*  Табличні частини */
                xmlWriter.WriteStartElement("TabularParts");
                
                    xmlWriter.WriteStartElement("TablePart");
                    xmlWriter.WriteAttributeString("name", "Товари");

                    foreach(РахунокФактура_Товари_TablePart.Record record in obj.Товари_TablePart.Records)
                    {
                        xmlWriter.WriteStartElement("row");
                        xmlWriter.WriteAttributeString("uid", record.UID.ToString());
                        
                        xmlWriter.WriteStartElement("НомерРядка");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.НомерРядка);
                          
                        xmlWriter.WriteEndElement(); //НомерРядка
                        xmlWriter.WriteStartElement("Номенклатура");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.Номенклатура");
                                xmlWriter.WriteAttributeString("uid", record.Номенклатура.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Номенклатура.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Номенклатура
                        xmlWriter.WriteStartElement("ХарактеристикаНоменклатури");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ХарактеристикиНоменклатури");
                                xmlWriter.WriteAttributeString("uid", record.ХарактеристикаНоменклатури.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.ХарактеристикаНоменклатури.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //ХарактеристикаНоменклатури
                        xmlWriter.WriteStartElement("Пакування");
                        xmlWriter.WriteAttributeString("type", "pointer");
                        
                                xmlWriter.WriteAttributeString("pointer", "Довідники.ПакуванняОдиниціВиміру");
                                xmlWriter.WriteAttributeString("uid", record.Пакування.UnigueID.ToString());
                                xmlWriter.WriteCData(await record.Пакування.GetPresentation());
                              
                        xmlWriter.WriteEndElement(); //Пакування
                        xmlWriter.WriteStartElement("КількістьУпаковок");
                        xmlWriter.WriteAttributeString("type", "integer");
                        
                            xmlWriter.WriteValue(record.КількістьУпаковок);
                          
                        xmlWriter.WriteEndElement(); //КількістьУпаковок
                        xmlWriter.WriteStartElement("Кількість");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Кількість);
                          
                        xmlWriter.WriteEndElement(); //Кількість
                        xmlWriter.WriteStartElement("Ціна");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Ціна);
                          
                        xmlWriter.WriteEndElement(); //Ціна
                        xmlWriter.WriteStartElement("Сума");
                        xmlWriter.WriteAttributeString("type", "numeric");
                        
                            xmlWriter.WriteValue(record.Сума);
                          
                        xmlWriter.WriteEndElement(); //Сума
                        xmlWriter.WriteEndElement(); //row
                    }

                    xmlWriter.WriteEndElement(); //TablePart
                
                xmlWriter.WriteEndElement(); //TabularParts
            

            xmlWriter.WriteEndElement(); //root
            xmlWriter.WriteEndDocument();
            xmlWriter.Close();
          
        }
    }

    #endregion
    
    #region DOCUMENT "РозміщенняТоварівНаСкладі"
    public static class РозміщенняТоварівНаСкладі_Const
    {
        public const string TABLE = "tab_a64";
        public const string TYPE = "РозміщенняТоварівНаСкладі"; /* Назва вказівника */
        public const string POINTER = "Документи.РозміщенняТоварівНаСкладі"; /* Повна назва вказівника */
        public const string FULLNAME = "Розміщення товарів на складі"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string ДатаДок = "docdate";
        public const string НомерДок = "docnomer";
        public const string Коментар = "col_a1";
        public const string Основа = "col_a2";
        public const string Склад = "col_a3";
        public const string Автор = "col_a4";
        public const string Організація = "col_a5";
        public const string Підрозділ = "col_a6";
        public const string ДокументПоступлення = "col_a7";
        public const string КлючовіСловаДляПошуку = "col_a8";
    }

    public class РозміщенняТоварівНаСкладі_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public РозміщенняТоварівНаСкладі_Objest() : base(Config.Kernel, "tab_a64", РозміщенняТоварівНаСкладі_Const.TYPE,
             ["docname", "docdate", "docnomer", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new РозміщенняТоварівНаСкладі_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, РозміщенняТоварівНаСкладі_Const.FULLNAME + " *");
            
                await РозміщенняТоварівНаСкладі_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                Коментар = base.FieldValue["col_a1"].ToString() ?? "";
                Основа = (base.FieldValue["col_a2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a2"] : new UuidAndText();
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a3"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a5"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a6"]);
                ДокументПоступлення = new Документи.ПоступленняТоварівТаПослуг_Pointer(base.FieldValue["col_a7"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a8"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await РозміщенняТоварівНаСкладі_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["col_a1"] = Коментар;
            base.FieldValue["col_a2"] = Основа;
            base.FieldValue["col_a3"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a7"] = ДокументПоступлення.UnigueID.UGuid;
            base.FieldValue["col_a8"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await РозміщенняТоварівНаСкладі_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариВКомірках_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<РозміщенняТоварівНаСкладі_Objest> Copy(bool copyTableParts = false)
        {
            РозміщенняТоварівНаСкладі_Objest copy = new РозміщенняТоварівНаСкладі_Objest()
            {
                Назва = Назва,
                ДатаДок = ДатаДок,
                НомерДок = НомерДок,
                Коментар = Коментар,
                Основа = Основа,
                Склад = Склад,
                Автор = Автор,
                Організація = Організація,
                Підрозділ = Підрозділ,
                ДокументПоступлення = ДокументПоступлення,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await РозміщенняТоварівНаСкладі_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_a68", ]);
        }
        
        public РозміщенняТоварівНаСкладі_Pointer GetDocumentPointer()
        {
            return new РозміщенняТоварівНаСкладі_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(РозміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public string НомерДок { get; set; } = "";
        public string Коментар { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Документи.ПоступленняТоварівТаПослуг_Pointer ДокументПоступлення { get; set; } = new Документи.ПоступленняТоварівТаПослуг_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public РозміщенняТоварівНаСкладі_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class РозміщенняТоварівНаСкладі_Pointer : DocumentPointer
    {
        public РозміщенняТоварівНаСкладі_Pointer(object? uid = null) : base(Config.Kernel, "tab_a64", РозміщенняТоварівНаСкладі_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public РозміщенняТоварівНаСкладі_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a64", "РозміщенняТоварівНаСкладі")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(РозміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [РозміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{РозміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(РозміщенняТоварівНаСкладі_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            РозміщенняТоварівНаСкладі_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариВКомірках_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public РозміщенняТоварівНаСкладі_Pointer Copy()
        {
            return new РозміщенняТоварівНаСкладі_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public РозміщенняТоварівНаСкладі_Pointer GetEmptyPointer()
        {
            return new РозміщенняТоварівНаСкладі_Pointer();
        }

        public async ValueTask<РозміщенняТоварівНаСкладі_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            РозміщенняТоварівНаСкладі_Objest obj = new РозміщенняТоварівНаСкладі_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class РозміщенняТоварівНаСкладі_Select : DocumentSelect
    {		
        public РозміщенняТоварівНаСкладі_Select() : base(Config.Kernel, "tab_a64") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new РозміщенняТоварівНаСкладі_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public РозміщенняТоварівНаСкладі_Pointer? Current { get; private set; }

        public async ValueTask<РозміщенняТоварівНаСкладі_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new РозміщенняТоварівНаСкладі_Pointer(pointer) : new РозміщенняТоварівНаСкладі_Pointer();
        }
        
        public async ValueTask<List<РозміщенняТоварівНаСкладі_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<РозміщенняТоварівНаСкладі_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new РозміщенняТоварівНаСкладі_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class РозміщенняТоварівНаСкладі_Товари_TablePart : DocumentTablePart
    {
        public РозміщенняТоварівНаСкладі_Товари_TablePart(РозміщенняТоварівНаСкладі_Objest owner) : base(Config.Kernel, "tab_a68",
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_a68";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Серія = "col_a4";
        public const string Пакування = "col_a5";
        public const string КількістьУпаковок = "col_a6";
        public const string Кількість = "col_a7";
        public const string Комірка = "col_a8";

        public РозміщенняТоварівНаСкладі_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_a68", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_a68", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_a68", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_a68", "join_tab_5", "Пакування");
                Довідники.СкладськіКомірки_Pointer.GetJoin(QuerySelect, Комірка, "tab_a68", "join_tab_8", "Комірка");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a4"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a5"]),
                    КількістьУпаковок = (fieldValue["col_a6"] != DBNull.Value) ? (int)fieldValue["col_a6"] : 0,
                    Кількість = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a8"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Комірка.Name = ItemValue["Комірка"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a64"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Серія.UnigueID.UGuid},
                    {"col_a5", record.Пакування.UnigueID.UGuid},
                    {"col_a6", record.КількістьУпаковок},
                    {"col_a7", record.Кількість},
                    {"col_a8", record.Комірка.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            
        }
    }
      
    
    public static class РозміщенняТоварівНаСкладі_Export
    {
        public static async ValueTask ToXmlFile(РозміщенняТоварівНаСкладі_Pointer РозміщенняТоварівНаСкладі, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ПереміщенняТоварівНаСкладі"
    public static class ПереміщенняТоварівНаСкладі_Const
    {
        public const string TABLE = "tab_b09";
        public const string TYPE = "ПереміщенняТоварівНаСкладі"; /* Назва вказівника */
        public const string POINTER = "Документи.ПереміщенняТоварівНаСкладі"; /* Повна назва вказівника */
        public const string FULLNAME = "Переміщення товарів на складі"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string ДатаДок = "docdate";
        public const string НомерДок = "docnomer";
        public const string Коментар = "col_a1";
        public const string Основа = "col_a2";
        public const string Склад = "col_a3";
        public const string Автор = "col_a4";
        public const string Організація = "col_a5";
        public const string Підрозділ = "col_a6";
        public const string КлючовіСловаДляПошуку = "col_a7";
    }

    public class ПереміщенняТоварівНаСкладі_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ПереміщенняТоварівНаСкладі_Objest() : base(Config.Kernel, "tab_b09", ПереміщенняТоварівНаСкладі_Const.TYPE,
             ["docname", "docdate", "docnomer", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ПереміщенняТоварівНаСкладі_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ПереміщенняТоварівНаСкладі_Const.FULLNAME + " *");
            
                await ПереміщенняТоварівНаСкладі_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                Коментар = base.FieldValue["col_a1"].ToString() ?? "";
                Основа = (base.FieldValue["col_a2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a2"] : new UuidAndText();
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a3"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a5"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a6"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a7"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ПереміщенняТоварівНаСкладі_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["col_a1"] = Коментар;
            base.FieldValue["col_a2"] = Основа;
            base.FieldValue["col_a3"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a7"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ПереміщенняТоварівНаСкладі_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариВКомірках_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ПереміщенняТоварівНаСкладі_Objest> Copy(bool copyTableParts = false)
        {
            ПереміщенняТоварівНаСкладі_Objest copy = new ПереміщенняТоварівНаСкладі_Objest()
            {
                Назва = Назва,
                ДатаДок = ДатаДок,
                НомерДок = НомерДок,
                Коментар = Коментар,
                Основа = Основа,
                Склад = Склад,
                Автор = Автор,
                Організація = Організація,
                Підрозділ = Підрозділ,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ПереміщенняТоварівНаСкладі_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b26", ]);
        }
        
        public ПереміщенняТоварівНаСкладі_Pointer GetDocumentPointer()
        {
            return new ПереміщенняТоварівНаСкладі_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ПереміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public string НомерДок { get; set; } = "";
        public string Коментар { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ПереміщенняТоварівНаСкладі_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ПереміщенняТоварівНаСкладі_Pointer : DocumentPointer
    {
        public ПереміщенняТоварівНаСкладі_Pointer(object? uid = null) : base(Config.Kernel, "tab_b09", ПереміщенняТоварівНаСкладі_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ПереміщенняТоварівНаСкладі_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b09", "ПереміщенняТоварівНаСкладі")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ПереміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ПереміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ПереміщенняТоварівНаСкладі_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ПереміщенняТоварівНаСкладі_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ПереміщенняТоварівНаСкладі_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариВКомірках_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ПереміщенняТоварівНаСкладі_Pointer Copy()
        {
            return new ПереміщенняТоварівНаСкладі_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ПереміщенняТоварівНаСкладі_Pointer GetEmptyPointer()
        {
            return new ПереміщенняТоварівНаСкладі_Pointer();
        }

        public async ValueTask<ПереміщенняТоварівНаСкладі_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ПереміщенняТоварівНаСкладі_Objest obj = new ПереміщенняТоварівНаСкладі_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ПереміщенняТоварівНаСкладі_Select : DocumentSelect
    {		
        public ПереміщенняТоварівНаСкладі_Select() : base(Config.Kernel, "tab_b09") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ПереміщенняТоварівНаСкладі_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ПереміщенняТоварівНаСкладі_Pointer? Current { get; private set; }

        public async ValueTask<ПереміщенняТоварівНаСкладі_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ПереміщенняТоварівНаСкладі_Pointer(pointer) : new ПереміщенняТоварівНаСкладі_Pointer();
        }
        
        public async ValueTask<List<ПереміщенняТоварівНаСкладі_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ПереміщенняТоварівНаСкладі_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ПереміщенняТоварівНаСкладі_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ПереміщенняТоварівНаСкладі_Товари_TablePart : DocumentTablePart
    {
        public ПереміщенняТоварівНаСкладі_Товари_TablePart(ПереміщенняТоварівНаСкладі_Objest owner) : base(Config.Kernel, "tab_b26",
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b26";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Серія = "col_a4";
        public const string Пакування = "col_a5";
        public const string КількістьУпаковок = "col_a6";
        public const string Кількість = "col_a7";
        public const string КоміркаВідправник = "col_a8";
        public const string КоміркаОтримувач = "col_a9";

        public ПереміщенняТоварівНаСкладі_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b26", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b26", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_b26", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b26", "join_tab_5", "Пакування");
                Довідники.СкладськіКомірки_Pointer.GetJoin(QuerySelect, КоміркаВідправник, "tab_b26", "join_tab_8", "КоміркаВідправник");
                Довідники.СкладськіКомірки_Pointer.GetJoin(QuerySelect, КоміркаОтримувач, "tab_b26", "join_tab_9", "КоміркаОтримувач");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a4"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a5"]),
                    КількістьУпаковок = (fieldValue["col_a6"] != DBNull.Value) ? (int)fieldValue["col_a6"] : 0,
                    Кількість = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    КоміркаВідправник = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a8"]),
                    КоміркаОтримувач = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a9"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.КоміркаВідправник.Name = ItemValue["КоміркаВідправник"];
                      record.КоміркаОтримувач.Name = ItemValue["КоміркаОтримувач"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b09"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Серія.UnigueID.UGuid},
                    {"col_a5", record.Пакування.UnigueID.UGuid},
                    {"col_a6", record.КількістьУпаковок},
                    {"col_a7", record.Кількість},
                    {"col_a8", record.КоміркаВідправник.UnigueID.UGuid},
                    {"col_a9", record.КоміркаОтримувач.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.СкладськіКомірки_Pointer КоміркаВідправник { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            public Довідники.СкладськіКомірки_Pointer КоміркаОтримувач { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            
        }
    }
      
    
    public static class ПереміщенняТоварівНаСкладі_Export
    {
        public static async ValueTask ToXmlFile(ПереміщенняТоварівНаСкладі_Pointer ПереміщенняТоварівНаСкладі, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ЗбіркаТоварівНаСкладі"
    public static class ЗбіркаТоварівНаСкладі_Const
    {
        public const string TABLE = "tab_b27";
        public const string TYPE = "ЗбіркаТоварівНаСкладі"; /* Назва вказівника */
        public const string POINTER = "Документи.ЗбіркаТоварівНаСкладі"; /* Повна назва вказівника */
        public const string FULLNAME = "Збірка товарів на складі"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string ДатаДок = "docdate";
        public const string НомерДок = "docnomer";
        public const string Коментар = "col_a1";
        public const string Основа = "col_a2";
        public const string Склад = "col_a3";
        public const string Автор = "col_a4";
        public const string Організація = "col_a5";
        public const string Підрозділ = "col_a6";
        public const string ДокументРеалізації = "col_a7";
        public const string КлючовіСловаДляПошуку = "col_a8";
    }

    public class ЗбіркаТоварівНаСкладі_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЗбіркаТоварівНаСкладі_Objest() : base(Config.Kernel, "tab_b27", ЗбіркаТоварівНаСкладі_Const.TYPE,
             ["docname", "docdate", "docnomer", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ЗбіркаТоварівНаСкладі_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЗбіркаТоварівНаСкладі_Const.FULLNAME + " *");
            
                await ЗбіркаТоварівНаСкладі_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                Коментар = base.FieldValue["col_a1"].ToString() ?? "";
                Основа = (base.FieldValue["col_a2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a2"] : new UuidAndText();
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a3"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a5"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a6"]);
                ДокументРеалізації = new Документи.РеалізаціяТоварівТаПослуг_Pointer(base.FieldValue["col_a7"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a8"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ЗбіркаТоварівНаСкладі_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["col_a1"] = Коментар;
            base.FieldValue["col_a2"] = Основа;
            base.FieldValue["col_a3"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a7"] = ДокументРеалізації.UnigueID.UGuid;
            base.FieldValue["col_a8"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ЗбіркаТоварівНаСкладі_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариВКомірках_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ЗбіркаТоварівНаСкладі_Objest> Copy(bool copyTableParts = false)
        {
            ЗбіркаТоварівНаСкладі_Objest copy = new ЗбіркаТоварівНаСкладі_Objest()
            {
                Назва = Назва,
                ДатаДок = ДатаДок,
                НомерДок = НомерДок,
                Коментар = Коментар,
                Основа = Основа,
                Склад = Склад,
                Автор = Автор,
                Організація = Організація,
                Підрозділ = Підрозділ,
                ДокументРеалізації = ДокументРеалізації,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ЗбіркаТоварівНаСкладі_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b28", ]);
        }
        
        public ЗбіркаТоварівНаСкладі_Pointer GetDocumentPointer()
        {
            return new ЗбіркаТоварівНаСкладі_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЗбіркаТоварівНаСкладі_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public string НомерДок { get; set; } = "";
        public string Коментар { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public Документи.РеалізаціяТоварівТаПослуг_Pointer ДокументРеалізації { get; set; } = new Документи.РеалізаціяТоварівТаПослуг_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public ЗбіркаТоварівНаСкладі_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ЗбіркаТоварівНаСкладі_Pointer : DocumentPointer
    {
        public ЗбіркаТоварівНаСкладі_Pointer(object? uid = null) : base(Config.Kernel, "tab_b27", ЗбіркаТоварівНаСкладі_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЗбіркаТоварівНаСкладі_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b27", "ЗбіркаТоварівНаСкладі")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЗбіркаТоварівНаСкладі_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЗбіркаТоварівНаСкладі_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЗбіркаТоварівНаСкладі_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЗбіркаТоварівНаСкладі_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ЗбіркаТоварівНаСкладі_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариВКомірках_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ЗбіркаТоварівНаСкладі_Pointer Copy()
        {
            return new ЗбіркаТоварівНаСкладі_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ЗбіркаТоварівНаСкладі_Pointer GetEmptyPointer()
        {
            return new ЗбіркаТоварівНаСкладі_Pointer();
        }

        public async ValueTask<ЗбіркаТоварівНаСкладі_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЗбіркаТоварівНаСкладі_Objest obj = new ЗбіркаТоварівНаСкладі_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ЗбіркаТоварівНаСкладі_Select : DocumentSelect
    {		
        public ЗбіркаТоварівНаСкладі_Select() : base(Config.Kernel, "tab_b27") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЗбіркаТоварівНаСкладі_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЗбіркаТоварівНаСкладі_Pointer? Current { get; private set; }

        public async ValueTask<ЗбіркаТоварівНаСкладі_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЗбіркаТоварівНаСкладі_Pointer(pointer) : new ЗбіркаТоварівНаСкладі_Pointer();
        }
        
        public async ValueTask<List<ЗбіркаТоварівНаСкладі_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЗбіркаТоварівНаСкладі_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ЗбіркаТоварівНаСкладі_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ЗбіркаТоварівНаСкладі_Товари_TablePart : DocumentTablePart
    {
        public ЗбіркаТоварівНаСкладі_Товари_TablePart(ЗбіркаТоварівНаСкладі_Objest owner) : base(Config.Kernel, "tab_b28",
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b28";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Серія = "col_a4";
        public const string Пакування = "col_a5";
        public const string КількістьУпаковок = "col_a6";
        public const string Кількість = "col_a7";
        public const string Комірка = "col_a8";

        public ЗбіркаТоварівНаСкладі_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b28", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b28", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_b28", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b28", "join_tab_5", "Пакування");
                Довідники.СкладськіКомірки_Pointer.GetJoin(QuerySelect, Комірка, "tab_b28", "join_tab_8", "Комірка");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a4"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a5"]),
                    КількістьУпаковок = (fieldValue["col_a6"] != DBNull.Value) ? (int)fieldValue["col_a6"] : 0,
                    Кількість = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a8"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Комірка.Name = ItemValue["Комірка"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b27"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Серія.UnigueID.UGuid},
                    {"col_a5", record.Пакування.UnigueID.UGuid},
                    {"col_a6", record.КількістьУпаковок},
                    {"col_a7", record.Кількість},
                    {"col_a8", record.Комірка.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            
        }
    }
      
    
    public static class ЗбіркаТоварівНаСкладі_Export
    {
        public static async ValueTask ToXmlFile(ЗбіркаТоварівНаСкладі_Pointer ЗбіркаТоварівНаСкладі, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "РозміщенняНоменклатуриПоКоміркам"
    public static class РозміщенняНоменклатуриПоКоміркам_Const
    {
        public const string TABLE = "tab_b29";
        public const string TYPE = "РозміщенняНоменклатуриПоКоміркам"; /* Назва вказівника */
        public const string POINTER = "Документи.РозміщенняНоменклатуриПоКоміркам"; /* Повна назва вказівника */
        public const string FULLNAME = "Розміщення номенклатури по коміркам"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_a2";
        public const string Склад = "col_a1";
        public const string Коментар = "col_g9";
        public const string Автор = "col_a4";
        public const string Підрозділ = "col_a3";
        public const string Основа = "col_a5";
        public const string КлючовіСловаДляПошуку = "col_a6";
    }

    public class РозміщенняНоменклатуриПоКоміркам_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public РозміщенняНоменклатуриПоКоміркам_Objest() : base(Config.Kernel, "tab_b29", РозміщенняНоменклатуриПоКоміркам_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a2", "col_a1", "col_g9", "col_a4", "col_a3", "col_a5", "col_a6", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new РозміщенняНоменклатуриПоКоміркам_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, РозміщенняНоменклатуриПоКоміркам_Const.FULLNAME + " *");
            
                await РозміщенняНоменклатуриПоКоміркам_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a2"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a1"]);
                Коментар = base.FieldValue["col_g9"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a4"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_a3"]);
                Основа = (base.FieldValue["col_a5"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a5"] : new UuidAndText();
                КлючовіСловаДляПошуку = base.FieldValue["col_a6"].ToString() ?? "";
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await РозміщенняНоменклатуриПоКоміркам_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a2"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a1"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_g9"] = Коментар;
            base.FieldValue["col_a4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a3"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_a5"] = Основа;
            base.FieldValue["col_a6"] = КлючовіСловаДляПошуку;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await РозміщенняНоменклатуриПоКоміркам_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<РозміщенняНоменклатуриПоКоміркам_Objest> Copy(bool copyTableParts = false)
        {
            РозміщенняНоменклатуриПоКоміркам_Objest copy = new РозміщенняНоменклатуриПоКоміркам_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Склад = Склад,
                Коментар = Коментар,
                Автор = Автор,
                Підрозділ = Підрозділ,
                Основа = Основа,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await РозміщенняНоменклатуриПоКоміркам_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b32", ]);
        }
        
        public РозміщенняНоменклатуриПоКоміркам_Pointer GetDocumentPointer()
        {
            return new РозміщенняНоменклатуриПоКоміркам_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(РозміщенняНоменклатуриПоКоміркам_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        
        //Табличні частини
        public РозміщенняНоменклатуриПоКоміркам_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class РозміщенняНоменклатуриПоКоміркам_Pointer : DocumentPointer
    {
        public РозміщенняНоменклатуриПоКоміркам_Pointer(object? uid = null) : base(Config.Kernel, "tab_b29", РозміщенняНоменклатуриПоКоміркам_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public РозміщенняНоменклатуриПоКоміркам_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b29", "РозміщенняНоменклатуриПоКоміркам")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(РозміщенняНоменклатуриПоКоміркам_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [РозміщенняНоменклатуриПоКоміркам_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{РозміщенняНоменклатуриПоКоміркам_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(РозміщенняНоменклатуриПоКоміркам_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            РозміщенняНоменклатуриПоКоміркам_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          await ValueTask.FromResult(true);
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public РозміщенняНоменклатуриПоКоміркам_Pointer Copy()
        {
            return new РозміщенняНоменклатуриПоКоміркам_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public РозміщенняНоменклатуриПоКоміркам_Pointer GetEmptyPointer()
        {
            return new РозміщенняНоменклатуриПоКоміркам_Pointer();
        }

        public async ValueTask<РозміщенняНоменклатуриПоКоміркам_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            РозміщенняНоменклатуриПоКоміркам_Objest obj = new РозміщенняНоменклатуриПоКоміркам_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class РозміщенняНоменклатуриПоКоміркам_Select : DocumentSelect
    {		
        public РозміщенняНоменклатуриПоКоміркам_Select() : base(Config.Kernel, "tab_b29") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new РозміщенняНоменклатуриПоКоміркам_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public РозміщенняНоменклатуриПоКоміркам_Pointer? Current { get; private set; }

        public async ValueTask<РозміщенняНоменклатуриПоКоміркам_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new РозміщенняНоменклатуриПоКоміркам_Pointer(pointer) : new РозміщенняНоменклатуриПоКоміркам_Pointer();
        }
        
        public async ValueTask<List<РозміщенняНоменклатуриПоКоміркам_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<РозміщенняНоменклатуриПоКоміркам_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new РозміщенняНоменклатуриПоКоміркам_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class РозміщенняНоменклатуриПоКоміркам_Товари_TablePart : DocumentTablePart
    {
        public РозміщенняНоменклатуриПоКоміркам_Товари_TablePart(РозміщенняНоменклатуриПоКоміркам_Objest owner) : base(Config.Kernel, "tab_b32",
             ["col_a1", "col_h1", "col_a2", "col_h3", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b32";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_h1";
        public const string Комірка = "col_a2";
        public const string Пакування = "col_h3";

        public РозміщенняНоменклатуриПоКоміркам_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b32", "join_tab_2", "Номенклатура");
                Довідники.СкладськіКомірки_Pointer.GetJoin(QuerySelect, Комірка, "tab_b32", "join_tab_3", "Комірка");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b32", "join_tab_4", "Пакування");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_h1"]),
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a2"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_h3"]),
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.Комірка.Name = ItemValue["Комірка"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b29"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_h1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.Комірка.UnigueID.UGuid},
                    {"col_h3", record.Пакування.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            
        }
    }
      
    
    public static class РозміщенняНоменклатуриПоКоміркам_Export
    {
        public static async ValueTask ToXmlFile(РозміщенняНоменклатуриПоКоміркам_Pointer РозміщенняНоменклатуриПоКоміркам, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "КорегуванняБоргу"
    public static class КорегуванняБоргу_Const
    {
        public const string TABLE = "tab_a65";
        public const string TYPE = "КорегуванняБоргу"; /* Назва вказівника */
        public const string POINTER = "Документи.КорегуванняБоргу"; /* Повна назва вказівника */
        public const string FULLNAME = "Корегування боргу контрагентів"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Організація = "col_c8";
        public const string Підрозділ = "col_d5";
        public const string Коментар = "col_d1";
        public const string Автор = "col_a3";
        public const string КлючовіСловаДляПошуку = "col_a2";
        public const string Основа = "col_a1";
    }

    public class КорегуванняБоргу_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public КорегуванняБоргу_Objest() : base(Config.Kernel, "tab_a65", КорегуванняБоргу_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_c8", "col_d5", "col_d1", "col_a3", "col_a2", "col_a1", ], true)
        {
            
                //Табличні частини
                РозрахункиЗКонтрагентами_TablePart = new КорегуванняБоргу_РозрахункиЗКонтрагентами_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, КорегуванняБоргу_Const.FULLNAME + " *");
            
                await КорегуванняБоргу_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_c8"]);
                Підрозділ = new Довідники.СтруктураПідприємства_Pointer(base.FieldValue["col_d5"]);
                Коментар = base.FieldValue["col_d1"].ToString() ?? "";
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a3"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_a2"].ToString() ?? "";
                Основа = (base.FieldValue["col_a1"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a1"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await РозрахункиЗКонтрагентами_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await КорегуванняБоргу_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_c8"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_d5"] = Підрозділ.UnigueID.UGuid;
            base.FieldValue["col_d1"] = Коментар;
            base.FieldValue["col_a3"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_a2"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a1"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await КорегуванняБоргу_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<КорегуванняБоргу_Objest> Copy(bool copyTableParts = false)
        {
            КорегуванняБоргу_Objest copy = new КорегуванняБоргу_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Організація = Організація,
                Підрозділ = Підрозділ,
                Коментар = Коментар,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //РозрахункиЗКонтрагентами - Таблична частина
                await РозрахункиЗКонтрагентами_TablePart.Read();
                copy.РозрахункиЗКонтрагентами_TablePart.Records = РозрахункиЗКонтрагентами_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await КорегуванняБоргу_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b12", ]);
        }
        
        public КорегуванняБоргу_Pointer GetDocumentPointer()
        {
            return new КорегуванняБоргу_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(КорегуванняБоргу_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.СтруктураПідприємства_Pointer Підрозділ { get; set; } = new Довідники.СтруктураПідприємства_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public КорегуванняБоргу_РозрахункиЗКонтрагентами_TablePart РозрахункиЗКонтрагентами_TablePart { get; set; }
        
    }
    
    public class КорегуванняБоргу_Pointer : DocumentPointer
    {
        public КорегуванняБоргу_Pointer(object? uid = null) : base(Config.Kernel, "tab_a65", КорегуванняБоргу_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public КорегуванняБоргу_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a65", "КорегуванняБоргу")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(КорегуванняБоргу_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [КорегуванняБоргу_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{КорегуванняБоргу_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(КорегуванняБоргу_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            КорегуванняБоргу_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.РозрахункиЗКлієнтами_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РозрахункиЗПостачальниками_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public КорегуванняБоргу_Pointer Copy()
        {
            return new КорегуванняБоргу_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public КорегуванняБоргу_Pointer GetEmptyPointer()
        {
            return new КорегуванняБоргу_Pointer();
        }

        public async ValueTask<КорегуванняБоргу_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            КорегуванняБоргу_Objest obj = new КорегуванняБоргу_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class КорегуванняБоргу_Select : DocumentSelect
    {		
        public КорегуванняБоргу_Select() : base(Config.Kernel, "tab_a65") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new КорегуванняБоргу_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public КорегуванняБоргу_Pointer? Current { get; private set; }

        public async ValueTask<КорегуванняБоргу_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new КорегуванняБоргу_Pointer(pointer) : new КорегуванняБоргу_Pointer();
        }
        
        public async ValueTask<List<КорегуванняБоргу_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<КорегуванняБоргу_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new КорегуванняБоргу_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class КорегуванняБоргу_РозрахункиЗКонтрагентами_TablePart : DocumentTablePart
    {
        public КорегуванняБоргу_РозрахункиЗКонтрагентами_TablePart(КорегуванняБоргу_Objest owner) : base(Config.Kernel, "tab_b12",
             ["col_a1", "col_e9", "col_f1", "col_f2", "col_a2", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b12";
        
        public const string НомерРядка = "col_a1";
        public const string Контрагент = "col_e9";
        public const string Валюта = "col_f1";
        public const string Сума = "col_f2";
        public const string ТипКонтрагента = "col_a2";

        public КорегуванняБоргу_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Контрагенти_Pointer.GetJoin(QuerySelect, Контрагент, "tab_b12", "join_tab_2", "Контрагент");
                Довідники.Валюти_Pointer.GetJoin(QuerySelect, Валюта, "tab_b12", "join_tab_3", "Валюта");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_e9"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_f1"]),
                    Сума = (fieldValue["col_f2"] != DBNull.Value) ? (decimal)fieldValue["col_f2"] : 0,
                    ТипКонтрагента = (fieldValue["col_a2"] != DBNull.Value) ? (Перелічення.ТипиКонтрагентів)fieldValue["col_a2"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Контрагент.Name = ItemValue["Контрагент"];
                      record.Валюта.Name = ItemValue["Валюта"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a65"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_e9", record.Контрагент.UnigueID.UGuid},
                    {"col_f1", record.Валюта.UnigueID.UGuid},
                    {"col_f2", record.Сума},
                    {"col_a2", (int)record.ТипКонтрагента},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            public Перелічення.ТипиКонтрагентів ТипКонтрагента { get; set; } = 0;
            
        }
    }
      
    
    public static class КорегуванняБоргу_Export
    {
        public static async ValueTask ToXmlFile(КорегуванняБоргу_Pointer КорегуванняБоргу, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ЗакриттяЗамовленняКлієнта"
    public static class ЗакриттяЗамовленняКлієнта_Const
    {
        public const string TABLE = "tab_a96";
        public const string TYPE = "ЗакриттяЗамовленняКлієнта"; /* Назва вказівника */
        public const string POINTER = "Документи.ЗакриттяЗамовленняКлієнта"; /* Повна назва вказівника */
        public const string FULLNAME = "Закриття замовлення клієнта"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Контрагент = "col_b4";
        public const string Організація = "col_b5";
        public const string Валюта = "col_b6";
        public const string ПричинаЗакриттяЗамовлення = "col_a2";
        public const string Склад = "col_b8";
        public const string ЗамовленняКлієнта = "col_a1";
        public const string Каса = "col_a6";
        public const string Договір = "col_c2";
        public const string Автор = "col_c4";
        public const string Коментар = "col_c1";
        public const string Менеджер = "col_b2";
        public const string КлючовіСловаДляПошуку = "col_b3";
        public const string СумаДокументу = "col_a3";
        public const string Основа = "col_a4";
    }

    public class ЗакриттяЗамовленняКлієнта_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЗакриттяЗамовленняКлієнта_Objest() : base(Config.Kernel, "tab_a96", ЗакриттяЗамовленняКлієнта_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_b4", "col_b5", "col_b6", "col_a2", "col_b8", "col_a1", "col_a6", "col_c2", "col_c4", "col_c1", "col_b2", "col_b3", "col_a3", "col_a4", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ЗакриттяЗамовленняКлієнта_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЗакриттяЗамовленняКлієнта_Const.FULLNAME + " *");
            
                await ЗакриттяЗамовленняКлієнта_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_b4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_b5"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_b6"]);
                ПричинаЗакриттяЗамовлення = (base.FieldValue["col_a2"] != DBNull.Value) ? (Перелічення.ПричиниЗакриттяЗамовленняКлієнта)base.FieldValue["col_a2"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_b8"]);
                ЗамовленняКлієнта = new Документи.ЗамовленняКлієнта_Pointer(base.FieldValue["col_a1"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_a6"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_c2"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_c4"]);
                Коментар = base.FieldValue["col_c1"].ToString() ?? "";
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_b2"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_b3"].ToString() ?? "";
                СумаДокументу = (base.FieldValue["col_a3"] != DBNull.Value) ? (decimal)base.FieldValue["col_a3"] : 0;
                Основа = (base.FieldValue["col_a4"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a4"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ЗакриттяЗамовленняКлієнта_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_b4"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_b5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_b6"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a2"] = (int)ПричинаЗакриттяЗамовлення;
            base.FieldValue["col_b8"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a1"] = ЗамовленняКлієнта.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_c2"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_c4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_c1"] = Коментар;
            base.FieldValue["col_b2"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_b3"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a3"] = СумаДокументу;
            base.FieldValue["col_a4"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ЗакриттяЗамовленняКлієнта_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняКлієнтів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ЗакриттяЗамовленняКлієнта_Objest> Copy(bool copyTableParts = false)
        {
            ЗакриттяЗамовленняКлієнта_Objest copy = new ЗакриттяЗамовленняКлієнта_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Контрагент = Контрагент,
                Організація = Організація,
                Валюта = Валюта,
                ПричинаЗакриттяЗамовлення = ПричинаЗакриттяЗамовлення,
                Склад = Склад,
                ЗамовленняКлієнта = ЗамовленняКлієнта,
                Каса = Каса,
                Договір = Договір,
                Автор = Автор,
                Коментар = Коментар,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                СумаДокументу = СумаДокументу,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ЗакриттяЗамовленняКлієнта_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b39", ]);
        }
        
        public ЗакриттяЗамовленняКлієнта_Pointer GetDocumentPointer()
        {
            return new ЗакриттяЗамовленняКлієнта_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЗакриттяЗамовленняКлієнта_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Перелічення.ПричиниЗакриттяЗамовленняКлієнта ПричинаЗакриттяЗамовлення { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Документи.ЗамовленняКлієнта_Pointer ЗамовленняКлієнта { get; set; } = new Документи.ЗамовленняКлієнта_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public decimal СумаДокументу { get; set; } = 0;
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ЗакриттяЗамовленняКлієнта_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ЗакриттяЗамовленняКлієнта_Pointer : DocumentPointer
    {
        public ЗакриттяЗамовленняКлієнта_Pointer(object? uid = null) : base(Config.Kernel, "tab_a96", ЗакриттяЗамовленняКлієнта_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЗакриттяЗамовленняКлієнта_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_a96", "ЗакриттяЗамовленняКлієнта")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЗакриттяЗамовленняКлієнта_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЗакриттяЗамовленняКлієнта_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЗакриттяЗамовленняКлієнта_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЗакриттяЗамовленняКлієнта_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ЗакриттяЗамовленняКлієнта_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняКлієнтів_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ЗакриттяЗамовленняКлієнта_Pointer Copy()
        {
            return new ЗакриттяЗамовленняКлієнта_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ЗакриттяЗамовленняКлієнта_Pointer GetEmptyPointer()
        {
            return new ЗакриттяЗамовленняКлієнта_Pointer();
        }

        public async ValueTask<ЗакриттяЗамовленняКлієнта_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЗакриттяЗамовленняКлієнта_Objest obj = new ЗакриттяЗамовленняКлієнта_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ЗакриттяЗамовленняКлієнта_Select : DocumentSelect
    {		
        public ЗакриттяЗамовленняКлієнта_Select() : base(Config.Kernel, "tab_a96") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЗакриттяЗамовленняКлієнта_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЗакриттяЗамовленняКлієнта_Pointer? Current { get; private set; }

        public async ValueTask<ЗакриттяЗамовленняКлієнта_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЗакриттяЗамовленняКлієнта_Pointer(pointer) : new ЗакриттяЗамовленняКлієнта_Pointer();
        }
        
        public async ValueTask<List<ЗакриттяЗамовленняКлієнта_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЗакриттяЗамовленняКлієнта_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ЗакриттяЗамовленняКлієнта_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ЗакриттяЗамовленняКлієнта_Товари_TablePart : DocumentTablePart
    {
        public ЗакриттяЗамовленняКлієнта_Товари_TablePart(ЗакриттяЗамовленняКлієнта_Objest owner) : base(Config.Kernel, "tab_b39",
             ["col_a2", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_a1", "col_a3", "col_a4", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b39";
        
        public const string НомерРядка = "col_a2";
        public const string Номенклатура = "col_b9";
        public const string ХарактеристикаНоменклатури = "col_c1";
        public const string Пакування = "col_c2";
        public const string КількістьУпаковок = "col_c3";
        public const string Кількість = "col_c4";
        public const string Склад = "col_a1";
        public const string Ціна = "col_a3";
        public const string Сума = "col_a4";

        public ЗакриттяЗамовленняКлієнта_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b39", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b39", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b39", "join_tab_4", "Пакування");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_b39", "join_tab_7", "Склад");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a2"] != DBNull.Value) ? (int)fieldValue["col_a2"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b9"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_c1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_c2"]),
                    КількістьУпаковок = (fieldValue["col_c3"] != DBNull.Value) ? (int)fieldValue["col_c3"] : 0,
                    Кількість = (fieldValue["col_c4"] != DBNull.Value) ? (decimal)fieldValue["col_c4"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a1"]),
                    Ціна = (fieldValue["col_a3"] != DBNull.Value) ? (decimal)fieldValue["col_a3"] : 0,
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Склад.Name = ItemValue["Склад"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_a96"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a2", record.НомерРядка},
                    {"col_b9", record.Номенклатура.UnigueID.UGuid},
                    {"col_c1", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_c2", record.Пакування.UnigueID.UGuid},
                    {"col_c3", record.КількістьУпаковок},
                    {"col_c4", record.Кількість},
                    {"col_a1", record.Склад.UnigueID.UGuid},
                    {"col_a3", record.Ціна},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public static class ЗакриттяЗамовленняКлієнта_Export
    {
        public static async ValueTask ToXmlFile(ЗакриттяЗамовленняКлієнта_Pointer ЗакриттяЗамовленняКлієнта, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ЗакриттяРахункуФактури"
    public static class ЗакриттяРахункуФактури_Const
    {
        public const string TABLE = "tab_b41";
        public const string TYPE = "ЗакриттяРахункуФактури"; /* Назва вказівника */
        public const string POINTER = "Документи.ЗакриттяРахункуФактури"; /* Повна назва вказівника */
        public const string FULLNAME = "Закриття рахунку фактури"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Контрагент = "col_b4";
        public const string Організація = "col_b5";
        public const string Валюта = "col_b6";
        public const string ПричинаЗакриттяРахунку = "col_a2";
        public const string Склад = "col_b8";
        public const string РахунокФактура = "col_a1";
        public const string Каса = "col_a6";
        public const string Договір = "col_c2";
        public const string Автор = "col_c4";
        public const string Коментар = "col_c1";
        public const string Менеджер = "col_b2";
        public const string КлючовіСловаДляПошуку = "col_b3";
        public const string СумаДокументу = "col_a3";
        public const string Основа = "col_a4";
    }

    public class ЗакриттяРахункуФактури_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЗакриттяРахункуФактури_Objest() : base(Config.Kernel, "tab_b41", ЗакриттяРахункуФактури_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_b4", "col_b5", "col_b6", "col_a2", "col_b8", "col_a1", "col_a6", "col_c2", "col_c4", "col_c1", "col_b2", "col_b3", "col_a3", "col_a4", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ЗакриттяРахункуФактури_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЗакриттяРахункуФактури_Const.FULLNAME + " *");
            
                await ЗакриттяРахункуФактури_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_b4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_b5"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_b6"]);
                ПричинаЗакриттяРахунку = (base.FieldValue["col_a2"] != DBNull.Value) ? (Перелічення.ПричиниЗакриттяРахункуФактури)base.FieldValue["col_a2"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_b8"]);
                РахунокФактура = new Документи.РахунокФактура_Pointer(base.FieldValue["col_a1"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_a6"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_c2"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_c4"]);
                Коментар = base.FieldValue["col_c1"].ToString() ?? "";
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_b2"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_b3"].ToString() ?? "";
                СумаДокументу = (base.FieldValue["col_a3"] != DBNull.Value) ? (decimal)base.FieldValue["col_a3"] : 0;
                Основа = (base.FieldValue["col_a4"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a4"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ЗакриттяРахункуФактури_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_b4"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_b5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_b6"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a2"] = (int)ПричинаЗакриттяРахунку;
            base.FieldValue["col_b8"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a1"] = РахунокФактура.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_c2"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_c4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_c1"] = Коментар;
            base.FieldValue["col_b2"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_b3"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a3"] = СумаДокументу;
            base.FieldValue["col_a4"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ЗакриттяРахункуФактури_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ЗакриттяРахункуФактури_Objest> Copy(bool copyTableParts = false)
        {
            ЗакриттяРахункуФактури_Objest copy = new ЗакриттяРахункуФактури_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Контрагент = Контрагент,
                Організація = Організація,
                Валюта = Валюта,
                ПричинаЗакриттяРахунку = ПричинаЗакриттяРахунку,
                Склад = Склад,
                РахунокФактура = РахунокФактура,
                Каса = Каса,
                Договір = Договір,
                Автор = Автор,
                Коментар = Коментар,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                СумаДокументу = СумаДокументу,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ЗакриттяРахункуФактури_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b42", ]);
        }
        
        public ЗакриттяРахункуФактури_Pointer GetDocumentPointer()
        {
            return new ЗакриттяРахункуФактури_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЗакриттяРахункуФактури_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Перелічення.ПричиниЗакриттяРахункуФактури ПричинаЗакриттяРахунку { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Документи.РахунокФактура_Pointer РахунокФактура { get; set; } = new Документи.РахунокФактура_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public decimal СумаДокументу { get; set; } = 0;
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ЗакриттяРахункуФактури_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ЗакриттяРахункуФактури_Pointer : DocumentPointer
    {
        public ЗакриттяРахункуФактури_Pointer(object? uid = null) : base(Config.Kernel, "tab_b41", ЗакриттяРахункуФактури_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЗакриттяРахункуФактури_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b41", "ЗакриттяРахункуФактури")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЗакриттяРахункуФактури_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЗакриттяРахункуФактури_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЗакриттяРахункуФактури_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЗакриттяРахункуФактури_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ЗакриттяРахункуФактури_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ЗакриттяРахункуФактури_Pointer Copy()
        {
            return new ЗакриттяРахункуФактури_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ЗакриттяРахункуФактури_Pointer GetEmptyPointer()
        {
            return new ЗакриттяРахункуФактури_Pointer();
        }

        public async ValueTask<ЗакриттяРахункуФактури_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЗакриттяРахункуФактури_Objest obj = new ЗакриттяРахункуФактури_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ЗакриттяРахункуФактури_Select : DocumentSelect
    {		
        public ЗакриттяРахункуФактури_Select() : base(Config.Kernel, "tab_b41") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЗакриттяРахункуФактури_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЗакриттяРахункуФактури_Pointer? Current { get; private set; }

        public async ValueTask<ЗакриттяРахункуФактури_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЗакриттяРахункуФактури_Pointer(pointer) : new ЗакриттяРахункуФактури_Pointer();
        }
        
        public async ValueTask<List<ЗакриттяРахункуФактури_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЗакриттяРахункуФактури_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ЗакриттяРахункуФактури_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ЗакриттяРахункуФактури_Товари_TablePart : DocumentTablePart
    {
        public ЗакриттяРахункуФактури_Товари_TablePart(ЗакриттяРахункуФактури_Objest owner) : base(Config.Kernel, "tab_b42",
             ["col_a2", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_a1", "col_a3", "col_a4", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b42";
        
        public const string НомерРядка = "col_a2";
        public const string Номенклатура = "col_b9";
        public const string ХарактеристикаНоменклатури = "col_c1";
        public const string Пакування = "col_c2";
        public const string КількістьУпаковок = "col_c3";
        public const string Кількість = "col_c4";
        public const string Склад = "col_a1";
        public const string Ціна = "col_a3";
        public const string Сума = "col_a4";

        public ЗакриттяРахункуФактури_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b42", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b42", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b42", "join_tab_4", "Пакування");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_b42", "join_tab_7", "Склад");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a2"] != DBNull.Value) ? (int)fieldValue["col_a2"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b9"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_c1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_c2"]),
                    КількістьУпаковок = (fieldValue["col_c3"] != DBNull.Value) ? (int)fieldValue["col_c3"] : 0,
                    Кількість = (fieldValue["col_c4"] != DBNull.Value) ? (decimal)fieldValue["col_c4"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a1"]),
                    Ціна = (fieldValue["col_a3"] != DBNull.Value) ? (decimal)fieldValue["col_a3"] : 0,
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Склад.Name = ItemValue["Склад"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b41"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a2", record.НомерРядка},
                    {"col_b9", record.Номенклатура.UnigueID.UGuid},
                    {"col_c1", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_c2", record.Пакування.UnigueID.UGuid},
                    {"col_c3", record.КількістьУпаковок},
                    {"col_c4", record.Кількість},
                    {"col_a1", record.Склад.UnigueID.UGuid},
                    {"col_a3", record.Ціна},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public static class ЗакриттяРахункуФактури_Export
    {
        public static async ValueTask ToXmlFile(ЗакриттяРахункуФактури_Pointer ЗакриттяРахункуФактури, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ЗакриттяЗамовленняПостачальнику"
    public static class ЗакриттяЗамовленняПостачальнику_Const
    {
        public const string TABLE = "tab_b44";
        public const string TYPE = "ЗакриттяЗамовленняПостачальнику"; /* Назва вказівника */
        public const string POINTER = "Документи.ЗакриттяЗамовленняПостачальнику"; /* Повна назва вказівника */
        public const string FULLNAME = "Закриття замовлення постачальнику"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Контрагент = "col_b4";
        public const string Організація = "col_b5";
        public const string Валюта = "col_b6";
        public const string ПричинаЗакриттяЗамовлення = "col_a2";
        public const string Склад = "col_b8";
        public const string ЗамовленняПостачальнику = "col_a1";
        public const string Каса = "col_a6";
        public const string Договір = "col_c2";
        public const string Автор = "col_c4";
        public const string Коментар = "col_c1";
        public const string Менеджер = "col_b2";
        public const string КлючовіСловаДляПошуку = "col_b3";
        public const string СумаДокументу = "col_a3";
        public const string Основа = "col_a4";
    }

    public class ЗакриттяЗамовленняПостачальнику_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЗакриттяЗамовленняПостачальнику_Objest() : base(Config.Kernel, "tab_b44", ЗакриттяЗамовленняПостачальнику_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_b4", "col_b5", "col_b6", "col_a2", "col_b8", "col_a1", "col_a6", "col_c2", "col_c4", "col_c1", "col_b2", "col_b3", "col_a3", "col_a4", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ЗакриттяЗамовленняПостачальнику_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЗакриттяЗамовленняПостачальнику_Const.FULLNAME + " *");
            
                await ЗакриттяЗамовленняПостачальнику_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Контрагент = new Довідники.Контрагенти_Pointer(base.FieldValue["col_b4"]);
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_b5"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_b6"]);
                ПричинаЗакриттяЗамовлення = (base.FieldValue["col_a2"] != DBNull.Value) ? (Перелічення.ПричиниЗакриттяЗамовленняПостачальнику)base.FieldValue["col_a2"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_b8"]);
                ЗамовленняПостачальнику = new Документи.ЗамовленняПостачальнику_Pointer(base.FieldValue["col_a1"]);
                Каса = new Довідники.Каси_Pointer(base.FieldValue["col_a6"]);
                Договір = new Довідники.ДоговориКонтрагентів_Pointer(base.FieldValue["col_c2"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_c4"]);
                Коментар = base.FieldValue["col_c1"].ToString() ?? "";
                Менеджер = new Довідники.Користувачі_Pointer(base.FieldValue["col_b2"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_b3"].ToString() ?? "";
                СумаДокументу = (base.FieldValue["col_a3"] != DBNull.Value) ? (decimal)base.FieldValue["col_a3"] : 0;
                Основа = (base.FieldValue["col_a4"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a4"] : new UuidAndText();
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ЗакриттяЗамовленняПостачальнику_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_b4"] = Контрагент.UnigueID.UGuid;
            base.FieldValue["col_b5"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_b6"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a2"] = (int)ПричинаЗакриттяЗамовлення;
            base.FieldValue["col_b8"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a1"] = ЗамовленняПостачальнику.UnigueID.UGuid;
            base.FieldValue["col_a6"] = Каса.UnigueID.UGuid;
            base.FieldValue["col_c2"] = Договір.UnigueID.UGuid;
            base.FieldValue["col_c4"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_c1"] = Коментар;
            base.FieldValue["col_b2"] = Менеджер.UnigueID.UGuid;
            base.FieldValue["col_b3"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a3"] = СумаДокументу;
            base.FieldValue["col_a4"] = Основа;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Назва, НомерДок, Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ЗакриттяЗамовленняПостачальнику_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняПостачальникам_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ЗакриттяЗамовленняПостачальнику_Objest> Copy(bool copyTableParts = false)
        {
            ЗакриттяЗамовленняПостачальнику_Objest copy = new ЗакриттяЗамовленняПостачальнику_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Контрагент = Контрагент,
                Організація = Організація,
                Валюта = Валюта,
                ПричинаЗакриттяЗамовлення = ПричинаЗакриттяЗамовлення,
                Склад = Склад,
                ЗамовленняПостачальнику = ЗамовленняПостачальнику,
                Каса = Каса,
                Договір = Договір,
                Автор = Автор,
                Коментар = Коментар,
                Менеджер = Менеджер,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                СумаДокументу = СумаДокументу,
                Основа = Основа,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ЗакриттяЗамовленняПостачальнику_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b47", ]);
        }
        
        public ЗакриттяЗамовленняПостачальнику_Pointer GetDocumentPointer()
        {
            return new ЗакриттяЗамовленняПостачальнику_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЗакриттяЗамовленняПостачальнику_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public Перелічення.ПричиниЗакриттяЗамовленняПостачальнику ПричинаЗакриттяЗамовлення { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Документи.ЗамовленняПостачальнику_Pointer ЗамовленняПостачальнику { get; set; } = new Документи.ЗамовленняПостачальнику_Pointer();
        public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
        public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string Коментар { get; set; } = "";
        public Довідники.Користувачі_Pointer Менеджер { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public decimal СумаДокументу { get; set; } = 0;
        public UuidAndText Основа { get; set; } = new UuidAndText();
        
        //Табличні частини
        public ЗакриттяЗамовленняПостачальнику_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ЗакриттяЗамовленняПостачальнику_Pointer : DocumentPointer
    {
        public ЗакриттяЗамовленняПостачальнику_Pointer(object? uid = null) : base(Config.Kernel, "tab_b44", ЗакриттяЗамовленняПостачальнику_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЗакриттяЗамовленняПостачальнику_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b44", "ЗакриттяЗамовленняПостачальнику")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЗакриттяЗамовленняПостачальнику_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЗакриттяЗамовленняПостачальнику_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЗакриттяЗамовленняПостачальнику_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЗакриттяЗамовленняПостачальнику_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ЗакриттяЗамовленняПостачальнику_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ЗамовленняПостачальникам_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ЗакриттяЗамовленняПостачальнику_Pointer Copy()
        {
            return new ЗакриттяЗамовленняПостачальнику_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ЗакриттяЗамовленняПостачальнику_Pointer GetEmptyPointer()
        {
            return new ЗакриттяЗамовленняПостачальнику_Pointer();
        }

        public async ValueTask<ЗакриттяЗамовленняПостачальнику_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЗакриттяЗамовленняПостачальнику_Objest obj = new ЗакриттяЗамовленняПостачальнику_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ЗакриттяЗамовленняПостачальнику_Select : DocumentSelect
    {		
        public ЗакриттяЗамовленняПостачальнику_Select() : base(Config.Kernel, "tab_b44") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЗакриттяЗамовленняПостачальнику_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЗакриттяЗамовленняПостачальнику_Pointer? Current { get; private set; }

        public async ValueTask<ЗакриттяЗамовленняПостачальнику_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЗакриттяЗамовленняПостачальнику_Pointer(pointer) : new ЗакриттяЗамовленняПостачальнику_Pointer();
        }
        
        public async ValueTask<List<ЗакриттяЗамовленняПостачальнику_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЗакриттяЗамовленняПостачальнику_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ЗакриттяЗамовленняПостачальнику_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ЗакриттяЗамовленняПостачальнику_Товари_TablePart : DocumentTablePart
    {
        public ЗакриттяЗамовленняПостачальнику_Товари_TablePart(ЗакриттяЗамовленняПостачальнику_Objest owner) : base(Config.Kernel, "tab_b47",
             ["col_a2", "col_b9", "col_c1", "col_c2", "col_c3", "col_c4", "col_a1", "col_a3", "col_a4", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b47";
        
        public const string НомерРядка = "col_a2";
        public const string Номенклатура = "col_b9";
        public const string ХарактеристикаНоменклатури = "col_c1";
        public const string Пакування = "col_c2";
        public const string КількістьУпаковок = "col_c3";
        public const string Кількість = "col_c4";
        public const string Склад = "col_a1";
        public const string Ціна = "col_a3";
        public const string Сума = "col_a4";

        public ЗакриттяЗамовленняПостачальнику_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b47", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b47", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b47", "join_tab_4", "Пакування");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, Склад, "tab_b47", "join_tab_7", "Склад");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a2"] != DBNull.Value) ? (int)fieldValue["col_a2"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_b9"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_c1"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_c2"]),
                    КількістьУпаковок = (fieldValue["col_c3"] != DBNull.Value) ? (int)fieldValue["col_c3"] : 0,
                    Кількість = (fieldValue["col_c4"] != DBNull.Value) ? (decimal)fieldValue["col_c4"] : 0,
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a1"]),
                    Ціна = (fieldValue["col_a3"] != DBNull.Value) ? (decimal)fieldValue["col_a3"] : 0,
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.Склад.Name = ItemValue["Склад"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b44"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a2", record.НомерРядка},
                    {"col_b9", record.Номенклатура.UnigueID.UGuid},
                    {"col_c1", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_c2", record.Пакування.UnigueID.UGuid},
                    {"col_c3", record.КількістьУпаковок},
                    {"col_c4", record.Кількість},
                    {"col_a1", record.Склад.UnigueID.UGuid},
                    {"col_a3", record.Ціна},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }
    }
      
    
    public static class ЗакриттяЗамовленняПостачальнику_Export
    {
        public static async ValueTask ToXmlFile(ЗакриттяЗамовленняПостачальнику_Pointer ЗакриттяЗамовленняПостачальнику, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
    #region DOCUMENT "ЧекККМ"
    public static class ЧекККМ_Const
    {
        public const string TABLE = "tab_b51";
        public const string TYPE = "ЧекККМ"; /* Назва вказівника */
        public const string POINTER = "Документи.ЧекККМ"; /* Повна назва вказівника */
        public const string FULLNAME = "Чек ККМ"; /* Повна назва об'єкта */
        public const string DELETION_LABEL = "deletion_label"; /* Помітка на видалення true|false */
        public const string SPEND = "spend"; /* Проведений true|false */
        public const string SPEND_DATE = "spend_date"; /* Дата проведення DateTime */
        public readonly static string[] PRESENTATION_FIELDS = ["docname", ];
        
        
        public const string Назва = "docname";
        public const string НомерДок = "docnomer";
        public const string ДатаДок = "docdate";
        public const string Коментар = "col_a1";
        public const string Основа = "col_a2";
        public const string Організація = "col_a3";
        public const string Валюта = "col_a4";
        public const string СумаДокументу = "col_a5";
        public const string Склад = "col_a7";
        public const string КасаККМ = "col_a8";
        public const string Автор = "col_a9";
        public const string КлючовіСловаДляПошуку = "col_b1";
        public const string Знижка = "col_a6";
        public const string СумаБезЗнижки = "col_b2";
    }

    public class ЧекККМ_Objest : DocumentObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

        public ЧекККМ_Objest() : base(Config.Kernel, "tab_b51", ЧекККМ_Const.TYPE,
             ["docname", "docnomer", "docdate", "col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a7", "col_a8", "col_a9", "col_b1", "col_a6", "col_b2", ], true)
        {
            
                //Табличні частини
                Товари_TablePart = new ЧекККМ_Товари_TablePart(this);
                
        }
        
        public async ValueTask New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЧекККМ_Const.FULLNAME + " *");
            
                await ЧекККМ_Triggers.New(this);
              
        }

        public async ValueTask<bool> Read(UnigueID uid, bool readAllTablePart = false)
        {
            if (await BaseRead(uid))
            {
                Назва = base.FieldValue["docname"].ToString() ?? "";
                НомерДок = base.FieldValue["docnomer"].ToString() ?? "";
                ДатаДок = (base.FieldValue["docdate"] != DBNull.Value) ? DateTime.Parse(base.FieldValue["docdate"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue;
                Коментар = base.FieldValue["col_a1"].ToString() ?? "";
                Основа = (base.FieldValue["col_a2"] != DBNull.Value) ? (UuidAndText)base.FieldValue["col_a2"] : new UuidAndText();
                Організація = new Довідники.Організації_Pointer(base.FieldValue["col_a3"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a4"]);
                СумаДокументу = (base.FieldValue["col_a5"] != DBNull.Value) ? (decimal)base.FieldValue["col_a5"] : 0;
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a7"]);
                КасаККМ = new Довідники.КасиККМ_Pointer(base.FieldValue["col_a8"]);
                Автор = new Довідники.Користувачі_Pointer(base.FieldValue["col_a9"]);
                КлючовіСловаДляПошуку = base.FieldValue["col_b1"].ToString() ?? "";
                Знижка = (base.FieldValue["col_a6"] != DBNull.Value) ? (decimal)base.FieldValue["col_a6"] : 0;
                СумаБезЗнижки = (base.FieldValue["col_b2"] != DBNull.Value) ? (decimal)base.FieldValue["col_b2"] : 0;
                
                BaseClear();
                
                if (readAllTablePart)
                {
                    
                    await Товари_TablePart.Read();
                }
                
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            
                await ЧекККМ_Triggers.BeforeSave(this);
            base.FieldValue["docname"] = Назва;
            base.FieldValue["docnomer"] = НомерДок;
            base.FieldValue["docdate"] = ДатаДок;
            base.FieldValue["col_a1"] = Коментар;
            base.FieldValue["col_a2"] = Основа;
            base.FieldValue["col_a3"] = Організація.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a5"] = СумаДокументу;
            base.FieldValue["col_a7"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a8"] = КасаККМ.UnigueID.UGuid;
            base.FieldValue["col_a9"] = Автор.UnigueID.UGuid;
            base.FieldValue["col_b1"] = КлючовіСловаДляПошуку;
            base.FieldValue["col_a6"] = Знижка;
            base.FieldValue["col_b2"] = СумаБезЗнижки;
            
            bool result = await BaseSave();
            if (result)
            {
                
                await BaseWriteFullTextSearch(GetBasis(), [Коментар, КлючовіСловаДляПошуку, ]);
                
            }
            CaptionChanged?.Invoke(this, string.Join(", ", [Назва, ]));
            return result;
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            
            await BaseAddIgnoreDocumentList();
            bool spend = await ЧекККМ_SpendTheDocument.Spend(this);
            if (!spend) ClearRegAccum();
            await BaseSpend(spend, spend ? spendDate : DateTime.MinValue);
            await BaseRemoveIgnoreDocumentList();
            return spend;
                
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштівККМ_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask ClearSpendTheDocument()
        {
            ClearRegAccum();
            
            await BaseSpend(false, DateTime.MinValue);
        }

        public async ValueTask<ЧекККМ_Objest> Copy(bool copyTableParts = false)
        {
            ЧекККМ_Objest copy = new ЧекККМ_Objest()
            {
                Назва = Назва,
                НомерДок = НомерДок,
                ДатаДок = ДатаДок,
                Коментар = Коментар,
                Основа = Основа,
                Організація = Організація,
                Валюта = Валюта,
                СумаДокументу = СумаДокументу,
                Склад = Склад,
                КасаККМ = КасаККМ,
                Автор = Автор,
                КлючовіСловаДляПошуку = КлючовіСловаДляПошуку,
                Знижка = Знижка,
                СумаБезЗнижки = СумаБезЗнижки,
                
            };
            
            if (copyTableParts)
            {
            
                //Товари - Таблична частина
                await Товари_TablePart.Read();
                copy.Товари_TablePart.Records = Товари_TablePart.Copy();
            
            }
            

            await copy.New();
            
                await ЧекККМ_Triggers.Copying(copy, this);      
            
            return copy;
        }

        public async ValueTask SetDeletionLabel(bool label = true)
        {
            
            await ClearSpendTheDocument();
            await base.BaseDeletionLabel(label);
        }

        public async ValueTask Delete()
        {
            
            await ClearSpendTheDocument();
            await base.BaseDelete(["tab_b50", ]);
        }
        
        public ЧекККМ_Pointer GetDocumentPointer()
        {
            return new ЧекККМ_Pointer(UnigueID.UGuid);
        }

        public async ValueTask<string> GetPresentation()
        {
            return await base.BasePresentation(ЧекККМ_Const.PRESENTATION_FIELDS);
        }
        
        public string Назва { get; set; } = "";
        public string НомерДок { get; set; } = "";
        public DateTime ДатаДок { get; set; } = DateTime.MinValue;
        public string Коментар { get; set; } = "";
        public UuidAndText Основа { get; set; } = new UuidAndText();
        public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public decimal СумаДокументу { get; set; } = 0;
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.КасиККМ_Pointer КасаККМ { get; set; } = new Довідники.КасиККМ_Pointer();
        public Довідники.Користувачі_Pointer Автор { get; set; } = new Довідники.Користувачі_Pointer();
        public string КлючовіСловаДляПошуку { get; set; } = "";
        public decimal Знижка { get; set; } = 0;
        public decimal СумаБезЗнижки { get; set; } = 0;
        
        //Табличні частини
        public ЧекККМ_Товари_TablePart Товари_TablePart { get; set; }
        
    }
    
    public class ЧекККМ_Pointer : DocumentPointer
    {
        public ЧекККМ_Pointer(object? uid = null) : base(Config.Kernel, "tab_b51", ЧекККМ_Const.TYPE)
        {
            base.Init(new UnigueID(uid));
        }
        
        public ЧекККМ_Pointer(UnigueID uid, Dictionary<string, object>? fields = null) : base(Config.Kernel, "tab_b51", "ЧекККМ")
        {
            base.Init(uid, fields);
        }

        public string Назва
        {
            get { return Name; } set { Name = value; }
        }

        public async ValueTask<string> GetPresentation()
        {
            return Name = await base.BasePresentation(ЧекККМ_Const.PRESENTATION_FIELDS);
        }

        public static void GetJoin(Query querySelect, string joinField, string parentTable, string joinTableAlias, string fieldAlias)
        {
            string[] presentationField = new string [ЧекККМ_Const.PRESENTATION_FIELDS.Length];
            for (int i = 0; i < presentationField.Length; i++) presentationField[i] = $"{joinTableAlias}.{ЧекККМ_Const.PRESENTATION_FIELDS[i]}";
            querySelect.Joins.Add(new Join(ЧекККМ_Const.TABLE, joinField, parentTable, joinTableAlias));
            querySelect.FieldAndAlias.Add(new ValueName<string>(presentationField.Length switch { 1 => presentationField[0], >1 => $"concat_ws (', ', " + string.Join(", ", presentationField) + ")", _ => "'#'" }, fieldAlias));
        }

        public async ValueTask<bool?> IsSpend()
        {
            return await base.BaseIsSpend();
        }

        public async ValueTask<(bool? Spend, DateTime SpendDate)> GetSpend()
        {
            return await base.BaseGetSpend();
        }

        public async ValueTask<bool> SpendTheDocument(DateTime spendDate)
        {
            ЧекККМ_Objest? obj = await GetDocumentObject();
            return obj != null && await obj.SpendTheDocument(spendDate);
        }

        public async ValueTask ClearSpendTheDocument()
        {
            
            ClearRegAccum();
            await BaseSpend(false, DateTime.MinValue);
                
        }

        public async ValueTask<bool?> GetDeletionLabel()
        {
            return await base.BaseGetDeletionLabel();
        }

        
        /* Очищення регістрів накопичення */
        async void ClearRegAccum()
        {
          
            if(!this.UnigueID.IsEmpty())
            {
              
                await new РегістриНакопичення.ТовариНаСкладах_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.ВільніЗалишки_RecordsSet().Delete(this.UnigueID.UGuid);
              
                await new РегістриНакопичення.РухКоштівККМ_RecordsSet().Delete(this.UnigueID.UGuid);
              
            }
            
        }
  

        public async ValueTask SetDeletionLabel(bool label = true)
        {
          
            if (label)
            {
                ClearRegAccum();
                await BaseSpend(false, DateTime.MinValue);
            }
            
          await base.BaseDeletionLabel(label);
        }

        public ЧекККМ_Pointer Copy()
        {
            return new ЧекККМ_Pointer(base.UnigueID, base.Fields) { Name = Name };
        }

        public ЧекККМ_Pointer GetEmptyPointer()
        {
            return new ЧекККМ_Pointer();
        }

        public async ValueTask<ЧекККМ_Objest?> GetDocumentObject(bool readAllTablePart = false)
        {
            if (this.IsEmpty()) return null;
            ЧекККМ_Objest obj = new ЧекККМ_Objest();
            return await obj.Read(base.UnigueID, readAllTablePart) ? obj : null;
        }
    }

    public class ЧекККМ_Select : DocumentSelect
    {		
        public ЧекККМ_Select() : base(Config.Kernel, "tab_b51") { }
        public async ValueTask<bool> Select() { return await base.BaseSelect(); }
        public async ValueTask<bool> SelectSingle() { if (await base.BaseSelectSingle()) { MoveNext(); return true; } else { Current = null; return false; } }
        public bool MoveNext() { if (base.MoveToPosition() && base.CurrentPointerPosition.HasValue) { Current = new ЧекККМ_Pointer(base.CurrentPointerPosition.Value.UnigueID, base.CurrentPointerPosition.Value.Fields); return true; } else { Current = null; return false; } }
        public ЧекККМ_Pointer? Current { get; private set; }

        public async ValueTask<ЧекККМ_Pointer> FindByField(string name, object value, string funcToField = "", string funcToField_Param1 = "")
        {
            UnigueID? pointer = await base.BaseFindByField(name, value, funcToField, funcToField_Param1);
            return pointer != null ? new ЧекККМ_Pointer(pointer) : new ЧекККМ_Pointer();
        }
        
        public async ValueTask<List<ЧекККМ_Pointer>> FindListByField(string name, object value, int limit = 0, int offset = 0)
        {
            List<ЧекККМ_Pointer> documentPointerList = [];
            foreach (var documentPointer in await base.BaseFindListByField(name, value, limit, offset)) 
                documentPointerList.Add(new ЧекККМ_Pointer(documentPointer.UnigueID, documentPointer.Fields));
            return documentPointerList;
        }
    }

      
    
    public class ЧекККМ_Товари_TablePart : DocumentTablePart
    {
        public ЧекККМ_Товари_TablePart(ЧекККМ_Objest owner) : base(Config.Kernel, "tab_b50",
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", "col_b3", ], true)
        {
            if (owner == null) throw new Exception("owner null");
            Owner = owner;
            
            QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
            
        }

        public const string TABLE = "tab_b50";
        
        public const string НомерРядка = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Серія = "col_a4";
        public const string Пакування = "col_a5";
        public const string КількістьУпаковок = "col_a6";
        public const string Кількість = "col_a7";
        public const string Ціна = "col_a8";
        public const string Сума = "col_a9";
        public const string Знижка = "col_b1";
        public const string ВидЦіни = "col_b2";
        public const string СумаБезЗнижки = "col_b3";

        public ЧекККМ_Objest Owner { get; private set; }
        
        public List<Record> Records { get; set; } = [];

        public event EventHandler? Saved;
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields != null)
            {
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);
            }
            
            else
            { 
              QuerySelect.Order.Add(НомерРядка, SelectOrder.ASC);
              
            }
            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, Номенклатура, "tab_b50", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, ХарактеристикаНоменклатури, "tab_b50", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, Серія, "tab_b50", "join_tab_4", "Серія");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, Пакування, "tab_b50", "join_tab_5", "Пакування");
                Довідники.ВидиЦін_Pointer.GetJoin(QuerySelect, ВидЦіни, "tab_b50", "join_tab_11", "ВидЦіни");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead(Owner.UnigueID);

            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    НомерРядка = (fieldValue["col_a1"] != DBNull.Value) ? (int)fieldValue["col_a1"] : 0,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a4"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a5"]),
                    КількістьУпаковок = (fieldValue["col_a6"] != DBNull.Value) ? (int)fieldValue["col_a6"] : 0,
                    Кількість = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    Ціна = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Сума = (fieldValue["col_a9"] != DBNull.Value) ? (decimal)fieldValue["col_a9"] : 0,
                    Знижка = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    ВидЦіни = new Довідники.ВидиЦін_Pointer(fieldValue["col_b2"]),
                    СумаБезЗнижки = (fieldValue["col_b3"] != DBNull.Value) ? (decimal)fieldValue["col_b3"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                  record.JoinItemValue = ItemValue;
                  record.Номенклатура.Name = ItemValue["Номенклатура"];
                      record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                      record.Серія.Name = ItemValue["Серія"];
                      record.Пакування.Name = ItemValue["Пакування"];
                      record.ВидЦіни.Name = ItemValue["ВидЦіни"];
                      
                }
                
            }
            
            base.BaseClear();
        }
        
        public async ValueTask Save(bool clear_all_before_save) 
        {
            if (!await base.IsExistOwner(Owner.UnigueID, "tab_b51"))
                throw new Exception("Owner not exist");
            
            base.OwnerVersionID = Owner.VersionID;
            base.OwnerBasis = Owner.GetBasis();
            Dictionary<Guid, Dictionary<string, object>> listFieldValue = [];
            

            await base.BaseBeginTransaction();
            
            if (clear_all_before_save)
                await base.BaseDelete(Owner.UnigueID);

            
            int sequenceNumber_НомерРядка = 0;
            
            foreach (Record record in Records)
            {
                
                record.НомерРядка = ++sequenceNumber_НомерРядка;
                
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.НомерРядка},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Серія.UnigueID.UGuid},
                    {"col_a5", record.Пакування.UnigueID.UGuid},
                    {"col_a6", record.КількістьУпаковок},
                    {"col_a7", record.Кількість},
                    {"col_a8", record.Ціна},
                    {"col_a9", record.Сума},
                    {"col_b1", record.Знижка},
                    {"col_b2", record.ВидЦіни.UnigueID.UGuid},
                    {"col_b3", record.СумаБезЗнижки},
                    
                };
                record.UID = await base.BaseSave(record.UID, Owner.UnigueID, fieldValue);
                
                listFieldValue.Add(record.UID, fieldValue);
                
            }
            
            await base.BaseCommitTransaction();
            
            await base.BaseSaveVersion(listFieldValue);
            
            Saved?.Invoke(this, new EventArgs());
        }

        public List<Record> Copy()
        {
            List<Record> copyRecords = new(Records);
            foreach (Record copyRecordItem in copyRecords)
                copyRecordItem.UID = Guid.Empty;

            return copyRecords;
        }

        public class Record : DocumentTablePartRecord
        {
            public int НомерРядка { get; set; } = 0;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public int КількістьУпаковок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Ціна { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Знижка { get; set; } = 0;
            public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
            public decimal СумаБезЗнижки { get; set; } = 0;
            
        }
    }
      
    
    public static class ЧекККМ_Export
    {
        public static async ValueTask ToXmlFile(ЧекККМ_Pointer ЧекККМ, string pathToSave)
        {
        await ValueTask.FromResult(true);
        }
    }

    #endregion
    
}

namespace GeneratedCode.Журнали
{
    #region Journal
    public class JournalSelect: AccountingSoftware.JournalSelect
    {
        public JournalSelect() : base(Config.Kernel,
             ["tab_a25", "tab_a32", "tab_a34", "tab_a36", "tab_a42", "tab_a44", "tab_a48", "tab_a31", "tab_a51", "tab_a53", "tab_a81", "tab_a83", "tab_a88", "tab_a90", "tab_a92", "tab_a94", "tab_b07", "tab_b10", "tab_a64", "tab_b09", "tab_b27", "tab_b29", "tab_a65", "tab_a96", "tab_b41", "tab_b44", "tab_b51", ],
             ["ЗамовленняПостачальнику", "ПоступленняТоварівТаПослуг", "ЗамовленняКлієнта", "РеалізаціяТоварівТаПослуг", "ВстановленняЦінНоменклатури", "ПрихіднийКасовийОрдер", "РозхіднийКасовийОрдер", "ПереміщенняТоварів", "ПоверненняТоварівПостачальнику", "ПоверненняТоварівВідКлієнта", "АктВиконанихРобіт", "ВведенняЗалишків", "НадлишкиТоварів", "ПересортицяТоварів", "ПерерахунокТоварів", "ПсуванняТоварів", "ВнутрішнєСпоживанняТоварів", "РахунокФактура", "РозміщенняТоварівНаСкладі", "ПереміщенняТоварівНаСкладі", "ЗбіркаТоварівНаСкладі", "РозміщенняНоменклатуриПоКоміркам", "КорегуванняБоргу", "ЗакриттяЗамовленняКлієнта", "ЗакриттяРахункуФактури", "ЗакриттяЗамовленняПостачальнику", "ЧекККМ", ]) { }

        public async ValueTask<DocumentObject?> GetDocumentObject(bool readAllTablePart = true)
        {
            if (Current == null) return null;
            return Current.TypeDocument switch
            {
                "ЗамовленняПостачальнику" => await new Документи.ЗамовленняПостачальнику_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПоступленняТоварівТаПослуг" => await new Документи.ПоступленняТоварівТаПослуг_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ЗамовленняКлієнта" => await new Документи.ЗамовленняКлієнта_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "РеалізаціяТоварівТаПослуг" => await new Документи.РеалізаціяТоварівТаПослуг_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ВстановленняЦінНоменклатури" => await new Документи.ВстановленняЦінНоменклатури_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПрихіднийКасовийОрдер" => await new Документи.ПрихіднийКасовийОрдер_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "РозхіднийКасовийОрдер" => await new Документи.РозхіднийКасовийОрдер_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПереміщенняТоварів" => await new Документи.ПереміщенняТоварів_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПоверненняТоварівПостачальнику" => await new Документи.ПоверненняТоварівПостачальнику_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПоверненняТоварівВідКлієнта" => await new Документи.ПоверненняТоварівВідКлієнта_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "АктВиконанихРобіт" => await new Документи.АктВиконанихРобіт_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ВведенняЗалишків" => await new Документи.ВведенняЗалишків_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "НадлишкиТоварів" => await new Документи.НадлишкиТоварів_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПересортицяТоварів" => await new Документи.ПересортицяТоварів_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПерерахунокТоварів" => await new Документи.ПерерахунокТоварів_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПсуванняТоварів" => await new Документи.ПсуванняТоварів_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ВнутрішнєСпоживанняТоварів" => await new Документи.ВнутрішнєСпоживанняТоварів_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "РахунокФактура" => await new Документи.РахунокФактура_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "РозміщенняТоварівНаСкладі" => await new Документи.РозміщенняТоварівНаСкладі_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ПереміщенняТоварівНаСкладі" => await new Документи.ПереміщенняТоварівНаСкладі_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ЗбіркаТоварівНаСкладі" => await new Документи.ЗбіркаТоварівНаСкладі_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "РозміщенняНоменклатуриПоКоміркам" => await new Документи.РозміщенняНоменклатуриПоКоміркам_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "КорегуванняБоргу" => await new Документи.КорегуванняБоргу_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ЗакриттяЗамовленняКлієнта" => await new Документи.ЗакриттяЗамовленняКлієнта_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ЗакриттяРахункуФактури" => await new Документи.ЗакриттяРахункуФактури_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ЗакриттяЗамовленняПостачальнику" => await new Документи.ЗакриттяЗамовленняПостачальнику_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                "ЧекККМ" => await new Документи.ЧекККМ_Pointer(Current.UnigueID).GetDocumentObject(readAllTablePart),
                _ => null
            };
        }
    }
    #endregion
}

namespace GeneratedCode.РегістриВідомостей
{
    
    #region REGISTER "ЦіниНоменклатури"
    public static class ЦіниНоменклатури_Const
    {
        public const string FULLNAME = "Ціни номенклатури";
        public const string TABLE = "tab_a40";
        
        public const string Номенклатура = "col_f5";
        public const string ХарактеристикаНоменклатури = "col_f6";
        public const string ВидЦіни = "col_f7";
        public const string Ціна = "col_f8";
        public const string Пакування = "col_f9";
        public const string Валюта = "col_g2";
    }

    public class ЦіниНоменклатури_RecordsSet : RegisterInformationRecordsSet
    {
        public ЦіниНоменклатури_RecordsSet() : base(Config.Kernel, "tab_a40", "ЦіниНоменклатури",
             ["col_f5", "col_f6", "col_f7", "col_f8", "col_f9", "col_g2", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ЦіниНоменклатури_Const.Номенклатура, "tab_a40", "join_tab_1", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ЦіниНоменклатури_Const.ХарактеристикаНоменклатури, "tab_a40", "join_tab_2", "ХарактеристикаНоменклатури");
                Довідники.ВидиЦін_Pointer.GetJoin(QuerySelect, 
                  ЦіниНоменклатури_Const.ВидЦіни, "tab_a40", "join_tab_3", "ВидЦіни");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, 
                  ЦіниНоменклатури_Const.Пакування, "tab_a40", "join_tab_5", "Пакування");
                Довідники.Валюти_Pointer.GetJoin(QuerySelect, 
                  ЦіниНоменклатури_Const.Валюта, "tab_a40", "join_tab_6", "Валюта");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_f5"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_f6"]),
                    ВидЦіни = new Довідники.ВидиЦін_Pointer(fieldValue["col_f7"]),
                    Ціна = (fieldValue["col_f8"] != DBNull.Value) ? (decimal)fieldValue["col_f8"] : 0,
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_f9"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_g2"]),
                    
                };
                Records.Add(record);
                
                  if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                  {
                    record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.ВидЦіни.Name = ItemValue["ВидЦіни"];
                        record.Пакування.Name = ItemValue["Пакування"];
                        record.Валюта.Name = ItemValue["Валюта"];
                        
                  }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner)
        {
            await base.BaseBeginTransaction();
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_f5", record.Номенклатура.UnigueID.UGuid},
                    {"col_f6", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_f7", record.ВидЦіни.UnigueID.UGuid},
                    {"col_f8", record.Ціна},
                    {"col_f9", record.Пакування.UnigueID.UGuid},
                    {"col_g2", record.Валюта.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseCommitTransaction();
        }

        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
        
        public async ValueTask Delete(Guid owner)
        {
            await base.BaseDelete(owner);
        }

        public class Record : RegisterInformationRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
            public decimal Ціна { get; set; } = 0;
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            
        }
    }

    public class ЦіниНоменклатури_Objest : RegisterInformationObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

		    public ЦіниНоменклатури_Objest() : base(Config.Kernel, "tab_a40",
             ["col_f5", "col_f6", "col_f7", "col_f8", "col_f9", "col_g2", ]) { }

        public void New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ЦіниНоменклатури_Const.FULLNAME + " *");
        }

        public async ValueTask<bool> Read(UnigueID uid)
        {
            if (await BaseRead(uid))
            {
                Номенклатура = new Довідники.Номенклатура_Pointer(base.FieldValue["col_f5"]);
                ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(base.FieldValue["col_f6"]);
                ВидЦіни = new Довідники.ВидиЦін_Pointer(base.FieldValue["col_f7"]);
                Ціна = (base.FieldValue["col_f8"] != DBNull.Value) ? (decimal)base.FieldValue["col_f8"] : 0;
                Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(base.FieldValue["col_f9"]);
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_g2"]);
                
                BaseClear();
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_f5"] = Номенклатура.UnigueID.UGuid;
            base.FieldValue["col_f6"] = ХарактеристикаНоменклатури.UnigueID.UGuid;
            base.FieldValue["col_f7"] = ВидЦіни.UnigueID.UGuid;
            base.FieldValue["col_f8"] = Ціна;
            base.FieldValue["col_f9"] = Пакування.UnigueID.UGuid;
            base.FieldValue["col_g2"] = Валюта.UnigueID.UGuid;
            
            bool result = await BaseSave();
            CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), ]));
            return result;
        }

        public ЦіниНоменклатури_Objest Copy()
        {
            ЦіниНоменклатури_Objest copy = new ЦіниНоменклатури_Objest()
            {
                Period = Period, /* Базове поле */
                Номенклатура = Номенклатура,
                ХарактеристикаНоменклатури = ХарактеристикаНоменклатури,
                ВидЦіни = ВидЦіни,
                Ціна = Ціна,
                Пакування = Пакування,
                Валюта = Валюта,
                
            };
            copy.New();
            return copy;
        }

        public async ValueTask Delete()
        {
			      await base.BaseDelete();
        }

        public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
        public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
        public Довідники.ВидиЦін_Pointer ВидЦіни { get; set; } = new Довідники.ВидиЦін_Pointer();
        public decimal Ціна { get; set; } = 0;
        public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        
    }
	
    #endregion
  
    #region REGISTER "КурсиВалют"
    public static class КурсиВалют_Const
    {
        public const string FULLNAME = "Курси валют";
        public const string TABLE = "tab_a59";
        
        public const string Валюта = "col_a1";
        public const string Курс = "col_a2";
        public const string Кратність = "col_a3";
    }

    public class КурсиВалют_RecordsSet : RegisterInformationRecordsSet
    {
        public КурсиВалют_RecordsSet() : base(Config.Kernel, "tab_a59", "КурсиВалют",
             ["col_a1", "col_a2", "col_a3", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Валюти_Pointer.GetJoin(QuerySelect, 
                  КурсиВалют_Const.Валюта, "tab_a59", "join_tab_1", "Валюта");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a1"]),
                    Курс = (fieldValue["col_a2"] != DBNull.Value) ? (decimal)fieldValue["col_a2"] : 0,
                    Кратність = (fieldValue["col_a3"] != DBNull.Value) ? (int)fieldValue["col_a3"] : 0,
                    
                };
                Records.Add(record);
                
                  if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                  {
                    record.Валюта.Name = ItemValue["Валюта"];
                        
                  }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner)
        {
            await base.BaseBeginTransaction();
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Валюта.UnigueID.UGuid},
                    {"col_a2", record.Курс},
                    {"col_a3", record.Кратність},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseCommitTransaction();
        }

        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
        
        public async ValueTask Delete(Guid owner)
        {
            await base.BaseDelete(owner);
        }

        public class Record : RegisterInformationRecord
        {
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Курс { get; set; } = 0;
            public int Кратність { get; set; } = 0;
            
        }
    }

    public class КурсиВалют_Objest : RegisterInformationObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

		    public КурсиВалют_Objest() : base(Config.Kernel, "tab_a59",
             ["col_a1", "col_a2", "col_a3", ]) { }

        public void New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, КурсиВалют_Const.FULLNAME + " *");
        }

        public async ValueTask<bool> Read(UnigueID uid)
        {
            if (await BaseRead(uid))
            {
                Валюта = new Довідники.Валюти_Pointer(base.FieldValue["col_a1"]);
                Курс = (base.FieldValue["col_a2"] != DBNull.Value) ? (decimal)base.FieldValue["col_a2"] : 0;
                Кратність = (base.FieldValue["col_a3"] != DBNull.Value) ? (int)base.FieldValue["col_a3"] : 0;
                
                BaseClear();
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), Курс, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Валюта.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Курс;
            base.FieldValue["col_a3"] = Кратність;
            
            bool result = await BaseSave();
            CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), Курс, ]));
            return result;
        }

        public КурсиВалют_Objest Copy()
        {
            КурсиВалют_Objest copy = new КурсиВалют_Objest()
            {
                Period = Period, /* Базове поле */
                Валюта = Валюта,
                Курс = Курс,
                Кратність = Кратність,
                
            };
            copy.New();
            return copy;
        }

        public async ValueTask Delete()
        {
			      await base.BaseDelete();
        }

        public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
        public decimal Курс { get; set; } = 0;
        public int Кратність { get; set; } = 0;
        
    }
	
    #endregion
  
    #region REGISTER "ШтрихкодиНоменклатури"
    public static class ШтрихкодиНоменклатури_Const
    {
        public const string FULLNAME = "Штрихкоди";
        public const string TABLE = "tab_b17";
        
        public const string Штрихкод = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Пакування = "col_a4";
    }

    public class ШтрихкодиНоменклатури_RecordsSet : RegisterInformationRecordsSet
    {
        public ШтрихкодиНоменклатури_RecordsSet() : base(Config.Kernel, "tab_b17", "ШтрихкодиНоменклатури",
             ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ШтрихкодиНоменклатури_Const.Номенклатура, "tab_b17", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ШтрихкодиНоменклатури_Const.ХарактеристикаНоменклатури, "tab_b17", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, 
                  ШтрихкодиНоменклатури_Const.Пакування, "tab_b17", "join_tab_4", "Пакування");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Штрихкод = fieldValue["col_a1"].ToString() ?? "",
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a4"]),
                    
                };
                Records.Add(record);
                
                  if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                  {
                    record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.Пакування.Name = ItemValue["Пакування"];
                        
                  }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner)
        {
            await base.BaseBeginTransaction();
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Штрихкод},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Пакування.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseCommitTransaction();
        }

        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
        
        public async ValueTask Delete(Guid owner)
        {
            await base.BaseDelete(owner);
        }

        public class Record : RegisterInformationRecord
        {
            public string Штрихкод { get; set; } = "";
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            
        }
    }

    public class ШтрихкодиНоменклатури_Objest : RegisterInformationObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

		    public ШтрихкодиНоменклатури_Objest() : base(Config.Kernel, "tab_b17",
             ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }

        public void New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ШтрихкодиНоменклатури_Const.FULLNAME + " *");
        }

        public async ValueTask<bool> Read(UnigueID uid)
        {
            if (await BaseRead(uid))
            {
                Штрихкод = base.FieldValue["col_a1"].ToString() ?? "";
                Номенклатура = new Довідники.Номенклатура_Pointer(base.FieldValue["col_a2"]);
                ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(base.FieldValue["col_a3"]);
                Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(base.FieldValue["col_a4"]);
                
                BaseClear();
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), Штрихкод, ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Штрихкод;
            base.FieldValue["col_a2"] = Номенклатура.UnigueID.UGuid;
            base.FieldValue["col_a3"] = ХарактеристикаНоменклатури.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Пакування.UnigueID.UGuid;
            
            bool result = await BaseSave();
            CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), Штрихкод, ]));
            return result;
        }

        public ШтрихкодиНоменклатури_Objest Copy()
        {
            ШтрихкодиНоменклатури_Objest copy = new ШтрихкодиНоменклатури_Objest()
            {
                Period = Period, /* Базове поле */
                Штрихкод = Штрихкод,
                Номенклатура = Номенклатура,
                ХарактеристикаНоменклатури = ХарактеристикаНоменклатури,
                Пакування = Пакування,
                
            };
            copy.New();
            return copy;
        }

        public async ValueTask Delete()
        {
			      await base.BaseDelete();
        }

        public string Штрихкод { get; set; } = "";
        public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
        public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
        public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
        
    }
	
    #endregion
  
    #region REGISTER "ФайлиДокументів"
    public static class ФайлиДокументів_Const
    {
        public const string FULLNAME = "Файли документів";
        public const string TABLE = "tab_b23";
        
        public const string Файл = "col_a1";
    }

    public class ФайлиДокументів_RecordsSet : RegisterInformationRecordsSet
    {
        public ФайлиДокументів_RecordsSet() : base(Config.Kernel, "tab_b23", "ФайлиДокументів",
             ["col_a1", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Файли_Pointer.GetJoin(QuerySelect, 
                  ФайлиДокументів_Const.Файл, "tab_b23", "join_tab_1", "Файл");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Файл = new Довідники.Файли_Pointer(fieldValue["col_a1"]),
                    
                };
                Records.Add(record);
                
                  if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                  {
                    record.Файл.Name = ItemValue["Файл"];
                        
                  }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner)
        {
            await base.BaseBeginTransaction();
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Файл.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseCommitTransaction();
        }

        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
        
        public async ValueTask Delete(Guid owner)
        {
            await base.BaseDelete(owner);
        }

        public class Record : RegisterInformationRecord
        {
            public Довідники.Файли_Pointer Файл { get; set; } = new Довідники.Файли_Pointer();
            
        }
    }

    public class ФайлиДокументів_Objest : RegisterInformationObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

		    public ФайлиДокументів_Objest() : base(Config.Kernel, "tab_b23",
             ["col_a1", ]) { }

        public void New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, ФайлиДокументів_Const.FULLNAME + " *");
        }

        public async ValueTask<bool> Read(UnigueID uid)
        {
            if (await BaseRead(uid))
            {
                Файл = new Довідники.Файли_Pointer(base.FieldValue["col_a1"]);
                
                BaseClear();
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Файл.UnigueID.UGuid;
            
            bool result = await BaseSave();
            CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), ]));
            return result;
        }

        public ФайлиДокументів_Objest Copy()
        {
            ФайлиДокументів_Objest copy = new ФайлиДокументів_Objest()
            {
                Period = Period, /* Базове поле */
                Файл = Файл,
                
            };
            copy.New();
            return copy;
        }

        public async ValueTask Delete()
        {
			      await base.BaseDelete();
        }

        public Довідники.Файли_Pointer Файл { get; set; } = new Довідники.Файли_Pointer();
        
    }
	
    #endregion
  
    #region REGISTER "РозміщенняНоменклатуриПоКоміркамНаСкладі"
    public static class РозміщенняНоменклатуриПоКоміркамНаСкладі_Const
    {
        public const string FULLNAME = "Розміщення номенклатури";
        public const string TABLE = "tab_a74";
        
        public const string Номенклатура = "col_a1";
        public const string Склад = "col_a2";
        public const string Приміщення = "col_a3";
        public const string Комірка = "col_a4";
    }

    public class РозміщенняНоменклатуриПоКоміркамНаСкладі_RecordsSet : RegisterInformationRecordsSet
    {
        public РозміщенняНоменклатуриПоКоміркамНаСкладі_RecordsSet() : base(Config.Kernel, "tab_a74", "РозміщенняНоменклатуриПоКоміркамНаСкладі",
             ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  РозміщенняНоменклатуриПоКоміркамНаСкладі_Const.Номенклатура, "tab_a74", "join_tab_1", "Номенклатура");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  РозміщенняНоменклатуриПоКоміркамНаСкладі_Const.Склад, "tab_a74", "join_tab_2", "Склад");
                Довідники.СкладськіПриміщення_Pointer.GetJoin(QuerySelect, 
                  РозміщенняНоменклатуриПоКоміркамНаСкладі_Const.Приміщення, "tab_a74", "join_tab_3", "Приміщення");
                Довідники.СкладськіКомірки_Pointer.GetJoin(QuerySelect, 
                  РозміщенняНоменклатуриПоКоміркамНаСкладі_Const.Комірка, "tab_a74", "join_tab_4", "Комірка");
                
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a1"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a2"]),
                    Приміщення = new Довідники.СкладськіПриміщення_Pointer(fieldValue["col_a3"]),
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a4"]),
                    
                };
                Records.Add(record);
                
                  if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                  {
                    record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.Склад.Name = ItemValue["Склад"];
                        record.Приміщення.Name = ItemValue["Приміщення"];
                        record.Комірка.Name = ItemValue["Комірка"];
                        
                  }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner)
        {
            await base.BaseBeginTransaction();
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.Склад.UnigueID.UGuid},
                    {"col_a3", record.Приміщення.UnigueID.UGuid},
                    {"col_a4", record.Комірка.UnigueID.UGuid},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseCommitTransaction();
        }

        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
        
        public async ValueTask Delete(Guid owner)
        {
            await base.BaseDelete(owner);
        }

        public class Record : RegisterInformationRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.СкладськіПриміщення_Pointer Приміщення { get; set; } = new Довідники.СкладськіПриміщення_Pointer();
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            
        }
    }

    public class РозміщенняНоменклатуриПоКоміркамНаСкладі_Objest : RegisterInformationObject
    {
        public event EventHandler<UnigueID>? UnigueIDChanged;
        public event EventHandler<string>? CaptionChanged;

		    public РозміщенняНоменклатуриПоКоміркамНаСкладі_Objest() : base(Config.Kernel, "tab_a74",
             ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }

        public void New()
        {
            BaseNew();
            UnigueIDChanged?.Invoke(this, base.UnigueID);
            CaptionChanged?.Invoke(this, РозміщенняНоменклатуриПоКоміркамНаСкладі_Const.FULLNAME + " *");
        }

        public async ValueTask<bool> Read(UnigueID uid)
        {
            if (await BaseRead(uid))
            {
                Номенклатура = new Довідники.Номенклатура_Pointer(base.FieldValue["col_a1"]);
                Склад = new Довідники.Склади_Pointer(base.FieldValue["col_a2"]);
                Приміщення = new Довідники.СкладськіПриміщення_Pointer(base.FieldValue["col_a3"]);
                Комірка = new Довідники.СкладськіКомірки_Pointer(base.FieldValue["col_a4"]);
                
                BaseClear();
                UnigueIDChanged?.Invoke(this, base.UnigueID);
                CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), ]));
                return true;
            }
            else
                return false;
        }
        
        public async ValueTask<bool> Save()
        {
            base.FieldValue["col_a1"] = Номенклатура.UnigueID.UGuid;
            base.FieldValue["col_a2"] = Склад.UnigueID.UGuid;
            base.FieldValue["col_a3"] = Приміщення.UnigueID.UGuid;
            base.FieldValue["col_a4"] = Комірка.UnigueID.UGuid;
            
            bool result = await BaseSave();
            CaptionChanged?.Invoke(this, string.Join(", ", [Period.ToString(), ]));
            return result;
        }

        public РозміщенняНоменклатуриПоКоміркамНаСкладі_Objest Copy()
        {
            РозміщенняНоменклатуриПоКоміркамНаСкладі_Objest copy = new РозміщенняНоменклатуриПоКоміркамНаСкладі_Objest()
            {
                Period = Period, /* Базове поле */
                Номенклатура = Номенклатура,
                Склад = Склад,
                Приміщення = Приміщення,
                Комірка = Комірка,
                
            };
            copy.New();
            return copy;
        }

        public async ValueTask Delete()
        {
			      await base.BaseDelete();
        }

        public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
        public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
        public Довідники.СкладськіПриміщення_Pointer Приміщення { get; set; } = new Довідники.СкладськіПриміщення_Pointer();
        public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
        
    }
	
    #endregion
  
}

namespace GeneratedCode.РегістриНакопичення
{
    public static class VirtualTablesСalculation
    {
        /* Функція повного очищення віртуальних таблиць */
        public static void ClearAll()
        {
            /*  */
        }

        /* Функція для обчислення віртуальних таблиць  */
        public static async ValueTask Execute(DateTime period, string regAccumName)
        {
            
            Dictionary<string, object> paramQuery = new Dictionary<string, object>{ { "ПеріодДеньВідбір", period } };

            switch(regAccumName)
            {
            
                case "ТовариНаСкладах":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ТовариНаСкладах_Залишки_TablePart.TABLE} WHERE {ТовариНаСкладах_Залишки_TablePart.TABLE}.{ТовариНаСкладах_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ТовариНаСкладах_Залишки_TablePart.TABLE} ( uid, {ТовариНаСкладах_Залишки_TablePart.Період}, {ТовариНаСкладах_Залишки_TablePart.Номенклатура}, {ТовариНаСкладах_Залишки_TablePart.ХарактеристикаНоменклатури}, {ТовариНаСкладах_Залишки_TablePart.Склад}, {ТовариНаСкладах_Залишки_TablePart.Серія}, {ТовариНаСкладах_Залишки_TablePart.ВНаявності}, {ТовариНаСкладах_Залишки_TablePart.ДоВідвантаження} ) SELECT uuid_generate_v4(), date_trunc('day', ТовариНаСкладах.period::timestamp) AS Період, ТовариНаСкладах.{ТовариНаСкладах_Const.Номенклатура} AS Номенклатура, ТовариНаСкладах.{ТовариНаСкладах_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ТовариНаСкладах.{ТовариНаСкладах_Const.Склад} AS Склад, ТовариНаСкладах.{ТовариНаСкладах_Const.Серія} AS Серія, /* ВНаявності */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} END) AS ВНаявності, /* ДоВідвантаження */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} END) AS ДоВідвантаження FROM {ТовариНаСкладах_Const.TABLE} AS ТовариНаСкладах WHERE date_trunc('day', ТовариНаСкладах.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Номенклатура, ХарактеристикаНоменклатури, Склад, Серія HAVING /* ВНаявності */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} END) != 0 OR /* ДоВідвантаження */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} END) != 0", paramQuery, transactionID);
                        
                    /* QueryBlock: ЗалишкиТаОбороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.TABLE} WHERE {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.TABLE}.{ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.TABLE} ( uid, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.Період}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.Номенклатура}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.ХарактеристикаНоменклатури}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.Склад}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.Серія}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.ВНаявностіПрихід}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.ВНаявностіРозхід}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.ВНаявностіЗалишок}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.ДоВідвантаженняПрихід}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.ДоВідвантаженняРозхід}, {ТовариНаСкладах_ЗалишкиТаОбороти_TablePart.ДоВідвантаженняЗалишок} ) SELECT uuid_generate_v4(), date_trunc('day', ТовариНаСкладах.period::timestamp) AS Період, ТовариНаСкладах.{ТовариНаСкладах_Const.Номенклатура} AS Номенклатура, ТовариНаСкладах.{ТовариНаСкладах_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ТовариНаСкладах.{ТовариНаСкладах_Const.Склад} AS Склад, ТовариНаСкладах.{ТовариНаСкладах_Const.Серія} AS Серія, /* ВНаявності */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE 0 END) AS ВНаявностіПрихід, SUM(CASE WHEN ТовариНаСкладах.income = false THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE 0 END) AS ВНаявностіРозхід, SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} END) AS ВНаявностіЗалишок, /* ДоВідвантаження */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE 0 END) AS ДоВідвантаженняПрихід, SUM(CASE WHEN ТовариНаСкладах.income = false THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE 0 END) AS ДоВідвантаженняРозхід, SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} END) AS ДоВідвантаженняЗалишок FROM {ТовариНаСкладах_Const.TABLE} AS ТовариНаСкладах WHERE date_trunc('day', ТовариНаСкладах.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Номенклатура, ХарактеристикаНоменклатури, Склад, Серія HAVING /* ВНаявності */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE 0 END) != 0 OR SUM(CASE WHEN ТовариНаСкладах.income = false THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE 0 END) != 0 OR SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ВНаявності} END) != 0 OR /* ДоВідвантаження */ SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE 0 END) != 0 OR SUM(CASE WHEN ТовариНаСкладах.income = false THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE 0 END) != 0 OR SUM(CASE WHEN ТовариНаСкладах.income = true THEN ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} ELSE -ТовариНаСкладах.{ТовариНаСкладах_Const.ДоВідвантаження} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "ЗамовленняКлієнтів":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ЗамовленняКлієнтів_Залишки_TablePart.TABLE} WHERE {ЗамовленняКлієнтів_Залишки_TablePart.TABLE}.{ЗамовленняКлієнтів_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ЗамовленняКлієнтів_Залишки_TablePart.TABLE} ( uid, {ЗамовленняКлієнтів_Залишки_TablePart.Період}, {ЗамовленняКлієнтів_Залишки_TablePart.ЗамовленняКлієнта}, {ЗамовленняКлієнтів_Залишки_TablePart.Номенклатура}, {ЗамовленняКлієнтів_Залишки_TablePart.ХарактеристикаНоменклатури}, {ЗамовленняКлієнтів_Залишки_TablePart.Склад}, {ЗамовленняКлієнтів_Залишки_TablePart.Замовлено}, {ЗамовленняКлієнтів_Залишки_TablePart.Сума} ) SELECT uuid_generate_v4(), date_trunc('day', ЗамовленняКлієнтів.period::timestamp) AS Період, ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.ЗамовленняКлієнта} AS ЗамовленняКлієнта, ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Номенклатура} AS Номенклатура, ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Склад} AS Склад, /* Замовлено */ SUM(CASE WHEN ЗамовленняКлієнтів.income = true THEN ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Замовлено} ELSE -ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Замовлено} END) AS Замовлено, /* Сума */ SUM(CASE WHEN ЗамовленняКлієнтів.income = true THEN ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Сума} ELSE -ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Сума} END) AS Сума FROM {ЗамовленняКлієнтів_Const.TABLE} AS ЗамовленняКлієнтів WHERE date_trunc('day', ЗамовленняКлієнтів.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, ЗамовленняКлієнта, Номенклатура, ХарактеристикаНоменклатури, Склад HAVING /* Замовлено */ SUM(CASE WHEN ЗамовленняКлієнтів.income = true THEN ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Замовлено} ELSE -ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Замовлено} END) != 0 OR /* Сума */ SUM(CASE WHEN ЗамовленняКлієнтів.income = true THEN ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Сума} ELSE -ЗамовленняКлієнтів.{ЗамовленняКлієнтів_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "РозрахункиЗКлієнтами":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РозрахункиЗКлієнтами_Залишки_TablePart.TABLE} WHERE {РозрахункиЗКлієнтами_Залишки_TablePart.TABLE}.{РозрахункиЗКлієнтами_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РозрахункиЗКлієнтами_Залишки_TablePart.TABLE} ( uid, {РозрахункиЗКлієнтами_Залишки_TablePart.Період}, {РозрахункиЗКлієнтами_Залишки_TablePart.Валюта}, {РозрахункиЗКлієнтами_Залишки_TablePart.Контрагент}, {РозрахункиЗКлієнтами_Залишки_TablePart.Сума} ) SELECT uuid_generate_v4(), date_trunc('day', РозрахункиЗКлієнтами.period::timestamp) AS Період, РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Валюта} AS Валюта, РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Контрагент} AS Контрагент, /* Сума */ SUM(CASE WHEN РозрахункиЗКлієнтами.income = true THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE -РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} END) AS Сума FROM {РозрахункиЗКлієнтами_Const.TABLE} AS РозрахункиЗКлієнтами WHERE date_trunc('day', РозрахункиЗКлієнтами.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Валюта, Контрагент HAVING /* Сума */ SUM(CASE WHEN РозрахункиЗКлієнтами.income = true THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE -РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    /* QueryBlock: ЗалишкиТаОбороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.TABLE} WHERE {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.TABLE}.{РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.TABLE} ( uid, {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.Період}, {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.Валюта}, {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.Контрагент}, {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.СумаПрихід}, {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.СумаРозхід}, {РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart.СумаЗалишок} ) SELECT uuid_generate_v4(), date_trunc('day', РозрахункиЗКлієнтами.period::timestamp) AS Період, РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Валюта} AS Валюта, РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Контрагент} AS Контрагент, /* Сума */ SUM(CASE WHEN РозрахункиЗКлієнтами.income = true THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE 0 END) AS СумаПрихід, SUM(CASE WHEN РозрахункиЗКлієнтами.income = false THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE 0 END) AS СумаРозхід, SUM(CASE WHEN РозрахункиЗКлієнтами.income = true THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE -РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} END) AS СумаЗалишок FROM {РозрахункиЗКлієнтами_Const.TABLE} AS РозрахункиЗКлієнтами WHERE date_trunc('day', РозрахункиЗКлієнтами.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Валюта, Контрагент HAVING /* Сума */ SUM(CASE WHEN РозрахункиЗКлієнтами.income = true THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РозрахункиЗКлієнтами.income = false THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РозрахункиЗКлієнтами.income = true THEN РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} ELSE -РозрахункиЗКлієнтами.{РозрахункиЗКлієнтами_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "Закупівлі":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Обороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {Закупівлі_Обороти_TablePart.TABLE} WHERE {Закупівлі_Обороти_TablePart.TABLE}.{Закупівлі_Обороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {Закупівлі_Обороти_TablePart.TABLE} ( uid, {Закупівлі_Обороти_TablePart.Період}, {Закупівлі_Обороти_TablePart.Організація}, {Закупівлі_Обороти_TablePart.Склад}, {Закупівлі_Обороти_TablePart.Контрагент}, {Закупівлі_Обороти_TablePart.Договір}, {Закупівлі_Обороти_TablePart.Номенклатура}, {Закупівлі_Обороти_TablePart.ХарактеристикаНоменклатури}, {Закупівлі_Обороти_TablePart.Кількість}, {Закупівлі_Обороти_TablePart.Сума}, {Закупівлі_Обороти_TablePart.Собівартість} ) SELECT uuid_generate_v4(), date_trunc('day', Закупівлі.period::timestamp) AS Період, Закупівлі.{Закупівлі_Const.Організація} AS Організація, Закупівлі.{Закупівлі_Const.Склад} AS Склад, Закупівлі.{Закупівлі_Const.Контрагент} AS Контрагент, Закупівлі.{Закупівлі_Const.Договір} AS Договір, Закупівлі.{Закупівлі_Const.Номенклатура} AS Номенклатура, Закупівлі.{Закупівлі_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, SUM(Закупівлі.{Закупівлі_Const.Кількість}) AS Кількість, SUM(Закупівлі.{Закупівлі_Const.Сума}) AS Сума, Закупівлі.{Закупівлі_Const.Собівартість} AS Собівартість FROM {Закупівлі_Const.TABLE} AS Закупівлі WHERE date_trunc('day', Закупівлі.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, Склад, Контрагент, Договір, Номенклатура, ХарактеристикаНоменклатури, Собівартість HAVING SUM(Закупівлі.{Закупівлі_Const.Кількість}) != 0 OR SUM(Закупівлі.{Закупівлі_Const.Сума}) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "ВільніЗалишки":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ВільніЗалишки_Залишки_TablePart.TABLE} WHERE {ВільніЗалишки_Залишки_TablePart.TABLE}.{ВільніЗалишки_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ВільніЗалишки_Залишки_TablePart.TABLE} ( uid, {ВільніЗалишки_Залишки_TablePart.Період}, {ВільніЗалишки_Залишки_TablePart.Номенклатура}, {ВільніЗалишки_Залишки_TablePart.ХарактеристикаНоменклатури}, {ВільніЗалишки_Залишки_TablePart.Склад}, {ВільніЗалишки_Залишки_TablePart.ВНаявності}, {ВільніЗалишки_Залишки_TablePart.ВРезервіЗіСкладу}, {ВільніЗалишки_Залишки_TablePart.ВРезервіПідЗамовлення} ) SELECT uuid_generate_v4(), date_trunc('day', ВільніЗалишки.period::timestamp) AS Період, ВільніЗалишки.{ВільніЗалишки_Const.Номенклатура} AS Номенклатура, ВільніЗалишки.{ВільніЗалишки_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ВільніЗалишки.{ВільніЗалишки_Const.Склад} AS Склад, /* ВНаявності */ SUM(CASE WHEN ВільніЗалишки.income = true THEN ВільніЗалишки.{ВільніЗалишки_Const.ВНаявності} ELSE -ВільніЗалишки.{ВільніЗалишки_Const.ВНаявності} END) AS ВНаявності, /* ВРезервіЗіСкладу */ SUM(CASE WHEN ВільніЗалишки.income = true THEN ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіЗіСкладу} ELSE -ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіЗіСкладу} END) AS ВРезервіЗіСкладу, /* ВРезервіПідЗамовлення */ SUM(CASE WHEN ВільніЗалишки.income = true THEN ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіПідЗамовлення} ELSE -ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіПідЗамовлення} END) AS ВРезервіПідЗамовлення FROM {ВільніЗалишки_Const.TABLE} AS ВільніЗалишки WHERE date_trunc('day', ВільніЗалишки.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Номенклатура, ХарактеристикаНоменклатури, Склад HAVING /* ВНаявності */ SUM(CASE WHEN ВільніЗалишки.income = true THEN ВільніЗалишки.{ВільніЗалишки_Const.ВНаявності} ELSE -ВільніЗалишки.{ВільніЗалишки_Const.ВНаявності} END) != 0 OR /* ВРезервіЗіСкладу */ SUM(CASE WHEN ВільніЗалишки.income = true THEN ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіЗіСкладу} ELSE -ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіЗіСкладу} END) != 0 OR /* ВРезервіПідЗамовлення */ SUM(CASE WHEN ВільніЗалишки.income = true THEN ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіПідЗамовлення} ELSE -ВільніЗалишки.{ВільніЗалишки_Const.ВРезервіПідЗамовлення} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "ЗамовленняПостачальникам":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ЗамовленняПостачальникам_Залишки_TablePart.TABLE} WHERE {ЗамовленняПостачальникам_Залишки_TablePart.TABLE}.{ЗамовленняПостачальникам_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ЗамовленняПостачальникам_Залишки_TablePart.TABLE} ( uid, {ЗамовленняПостачальникам_Залишки_TablePart.Період}, {ЗамовленняПостачальникам_Залишки_TablePart.ЗамовленняПостачальнику}, {ЗамовленняПостачальникам_Залишки_TablePart.Номенклатура}, {ЗамовленняПостачальникам_Залишки_TablePart.ХарактеристикаНоменклатури}, {ЗамовленняПостачальникам_Залишки_TablePart.Склад}, {ЗамовленняПостачальникам_Залишки_TablePart.Замовлено} ) SELECT uuid_generate_v4(), date_trunc('day', ЗамовленняПостачальникам.period::timestamp) AS Період, ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.ЗамовленняПостачальнику} AS ЗамовленняПостачальнику, ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.Номенклатура} AS Номенклатура, ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.Склад} AS Склад, /* Замовлено */ SUM(CASE WHEN ЗамовленняПостачальникам.income = true THEN ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.Замовлено} ELSE -ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.Замовлено} END) AS Замовлено FROM {ЗамовленняПостачальникам_Const.TABLE} AS ЗамовленняПостачальникам WHERE date_trunc('day', ЗамовленняПостачальникам.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, ЗамовленняПостачальнику, Номенклатура, ХарактеристикаНоменклатури, Склад HAVING /* Замовлено */ SUM(CASE WHEN ЗамовленняПостачальникам.income = true THEN ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.Замовлено} ELSE -ЗамовленняПостачальникам.{ЗамовленняПостачальникам_Const.Замовлено} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "РозрахункиЗПостачальниками":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РозрахункиЗПостачальниками_Залишки_TablePart.TABLE} WHERE {РозрахункиЗПостачальниками_Залишки_TablePart.TABLE}.{РозрахункиЗПостачальниками_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РозрахункиЗПостачальниками_Залишки_TablePart.TABLE} ( uid, {РозрахункиЗПостачальниками_Залишки_TablePart.Період}, {РозрахункиЗПостачальниками_Залишки_TablePart.Контрагент}, {РозрахункиЗПостачальниками_Залишки_TablePart.Валюта}, {РозрахункиЗПостачальниками_Залишки_TablePart.Сума} ) SELECT uuid_generate_v4(), date_trunc('day', РозрахункиЗПостачальниками.period::timestamp) AS Період, РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Контрагент} AS Контрагент, РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Валюта} AS Валюта, /* Сума */ SUM(CASE WHEN РозрахункиЗПостачальниками.income = true THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE -РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} END) AS Сума FROM {РозрахункиЗПостачальниками_Const.TABLE} AS РозрахункиЗПостачальниками WHERE date_trunc('day', РозрахункиЗПостачальниками.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Контрагент, Валюта HAVING /* Сума */ SUM(CASE WHEN РозрахункиЗПостачальниками.income = true THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE -РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    /* QueryBlock: ЗалишкиТаОбороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.TABLE} WHERE {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.TABLE}.{РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.TABLE} ( uid, {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.Період}, {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.Контрагент}, {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.Валюта}, {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.СумаПрихід}, {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.СумаРозхід}, {РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart.СумаЗалишок} ) SELECT uuid_generate_v4(), date_trunc('day', РозрахункиЗПостачальниками.period::timestamp) AS Період, РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Контрагент} AS Контрагент, РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Валюта} AS Валюта, /* Сума */ SUM(CASE WHEN РозрахункиЗПостачальниками.income = true THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE 0 END) AS СумаПрихід, SUM(CASE WHEN РозрахункиЗПостачальниками.income = false THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE 0 END) AS СумаРозхід, SUM(CASE WHEN РозрахункиЗПостачальниками.income = true THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE -РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} END) AS СумаЗалишок FROM {РозрахункиЗПостачальниками_Const.TABLE} AS РозрахункиЗПостачальниками WHERE date_trunc('day', РозрахункиЗПостачальниками.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Контрагент, Валюта HAVING /* Сума */ SUM(CASE WHEN РозрахункиЗПостачальниками.income = true THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РозрахункиЗПостачальниками.income = false THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РозрахункиЗПостачальниками.income = true THEN РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} ELSE -РозрахункиЗПостачальниками.{РозрахункиЗПостачальниками_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "РухКоштів":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РухКоштів_Залишки_TablePart.TABLE} WHERE {РухКоштів_Залишки_TablePart.TABLE}.{РухКоштів_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РухКоштів_Залишки_TablePart.TABLE} ( uid, {РухКоштів_Залишки_TablePart.Період}, {РухКоштів_Залишки_TablePart.Організація}, {РухКоштів_Залишки_TablePart.Каса}, {РухКоштів_Залишки_TablePart.Валюта}, {РухКоштів_Залишки_TablePart.Сума} ) SELECT uuid_generate_v4(), date_trunc('day', РухКоштів.period::timestamp) AS Період, РухКоштів.{РухКоштів_Const.Організація} AS Організація, РухКоштів.{РухКоштів_Const.Каса} AS Каса, РухКоштів.{РухКоштів_Const.Валюта} AS Валюта, /* Сума */ SUM(CASE WHEN РухКоштів.income = true THEN РухКоштів.{РухКоштів_Const.Сума} ELSE -РухКоштів.{РухКоштів_Const.Сума} END) AS Сума FROM {РухКоштів_Const.TABLE} AS РухКоштів WHERE date_trunc('day', РухКоштів.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, Каса, Валюта HAVING /* Сума */ SUM(CASE WHEN РухКоштів.income = true THEN РухКоштів.{РухКоштів_Const.Сума} ELSE -РухКоштів.{РухКоштів_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    /* QueryBlock: ЗалишкиТаОбороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РухКоштів_ЗалишкиТаОбороти_TablePart.TABLE} WHERE {РухКоштів_ЗалишкиТаОбороти_TablePart.TABLE}.{РухКоштів_ЗалишкиТаОбороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РухКоштів_ЗалишкиТаОбороти_TablePart.TABLE} ( uid, {РухКоштів_ЗалишкиТаОбороти_TablePart.Період}, {РухКоштів_ЗалишкиТаОбороти_TablePart.Організація}, {РухКоштів_ЗалишкиТаОбороти_TablePart.Каса}, {РухКоштів_ЗалишкиТаОбороти_TablePart.Валюта}, {РухКоштів_ЗалишкиТаОбороти_TablePart.СумаПрихід}, {РухКоштів_ЗалишкиТаОбороти_TablePart.СумаРозхід}, {РухКоштів_ЗалишкиТаОбороти_TablePart.СумаЗалишок} ) SELECT uuid_generate_v4(), date_trunc('day', РухКоштів.period::timestamp) AS Період, РухКоштів.{РухКоштів_Const.Організація} AS Організація, РухКоштів.{РухКоштів_Const.Каса} AS Каса, РухКоштів.{РухКоштів_Const.Валюта} AS Валюта, /* Сума */ SUM(CASE WHEN РухКоштів.income = true THEN РухКоштів.{РухКоштів_Const.Сума} ELSE 0 END) AS СумаПрихід, SUM(CASE WHEN РухКоштів.income = false THEN РухКоштів.{РухКоштів_Const.Сума} ELSE 0 END) AS СумаРозхід, SUM(CASE WHEN РухКоштів.income = true THEN РухКоштів.{РухКоштів_Const.Сума} ELSE -РухКоштів.{РухКоштів_Const.Сума} END) AS СумаЗалишок FROM {РухКоштів_Const.TABLE} AS РухКоштів WHERE date_trunc('day', РухКоштів.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, Каса, Валюта HAVING /* Сума */ SUM(CASE WHEN РухКоштів.income = true THEN РухКоштів.{РухКоштів_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РухКоштів.income = false THEN РухКоштів.{РухКоштів_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РухКоштів.income = true THEN РухКоштів.{РухКоштів_Const.Сума} ELSE -РухКоштів.{РухКоштів_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "ПартіїТоварів":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ПартіїТоварів_Залишки_TablePart.TABLE} WHERE {ПартіїТоварів_Залишки_TablePart.TABLE}.{ПартіїТоварів_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ПартіїТоварів_Залишки_TablePart.TABLE} ( uid, {ПартіїТоварів_Залишки_TablePart.Період}, {ПартіїТоварів_Залишки_TablePart.Організація}, {ПартіїТоварів_Залишки_TablePart.ПартіяТоварівКомпозит}, {ПартіїТоварів_Залишки_TablePart.Номенклатура}, {ПартіїТоварів_Залишки_TablePart.ХарактеристикаНоменклатури}, {ПартіїТоварів_Залишки_TablePart.Серія}, {ПартіїТоварів_Залишки_TablePart.Склад}, {ПартіїТоварів_Залишки_TablePart.Рядок}, {ПартіїТоварів_Залишки_TablePart.Кількість}, {ПартіїТоварів_Залишки_TablePart.Собівартість} ) SELECT uuid_generate_v4(), date_trunc('day', ПартіїТоварів.period::timestamp) AS Період, ПартіїТоварів.{ПартіїТоварів_Const.Організація} AS Організація, ПартіїТоварів.{ПартіїТоварів_Const.ПартіяТоварівКомпозит} AS ПартіяТоварівКомпозит, ПартіїТоварів.{ПартіїТоварів_Const.Номенклатура} AS Номенклатура, ПартіїТоварів.{ПартіїТоварів_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ПартіїТоварів.{ПартіїТоварів_Const.Серія} AS Серія, ПартіїТоварів.{ПартіїТоварів_Const.Склад} AS Склад, ПартіїТоварів.{ПартіїТоварів_Const.Рядок} AS Рядок, /* Кількість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Кількість} END) AS Кількість, /* Собівартість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} END) AS Собівартість FROM {ПартіїТоварів_Const.TABLE} AS ПартіїТоварів WHERE date_trunc('day', ПартіїТоварів.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, ПартіяТоварівКомпозит, Номенклатура, ХарактеристикаНоменклатури, Серія, Склад, Рядок HAVING /* Кількість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Кількість} END) != 0 OR /* Собівартість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} END) != 0", paramQuery, transactionID);
                        
                    /* QueryBlock: ЗалишкиТаОбороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.TABLE} WHERE {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.TABLE}.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.TABLE} ( uid, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Період}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Організація}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.ПартіяТоварівКомпозит}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Номенклатура}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.ХарактеристикаНоменклатури}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Серія}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Склад}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Рядок}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.КількістьПрихід}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.КількістьРозхід}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.КількістьЗалишок}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.СобівартістьПрихід}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.СобівартістьРозхід}, {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.СобівартістьЗалишок} ) SELECT uuid_generate_v4(), date_trunc('day', ПартіїТоварів.period::timestamp) AS Період, ПартіїТоварів.{ПартіїТоварів_Const.Організація} AS Організація, ПартіїТоварів.{ПартіїТоварів_Const.ПартіяТоварівКомпозит} AS ПартіяТоварівКомпозит, ПартіїТоварів.{ПартіїТоварів_Const.Номенклатура} AS Номенклатура, ПартіїТоварів.{ПартіїТоварів_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ПартіїТоварів.{ПартіїТоварів_Const.Серія} AS Серія, ПартіїТоварів.{ПартіїТоварів_Const.Склад} AS Склад, ПартіїТоварів.{ПартіїТоварів_Const.Рядок} AS Рядок, /* Кількість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE 0 END) AS КількістьПрихід, SUM(CASE WHEN ПартіїТоварів.income = false THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE 0 END) AS КількістьРозхід, SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Кількість} END) AS КількістьЗалишок, /* Собівартість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE 0 END) AS СобівартістьПрихід, SUM(CASE WHEN ПартіїТоварів.income = false THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE 0 END) AS СобівартістьРозхід, SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} END) AS СобівартістьЗалишок FROM {ПартіїТоварів_Const.TABLE} AS ПартіїТоварів WHERE date_trunc('day', ПартіїТоварів.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, ПартіяТоварівКомпозит, Номенклатура, ХарактеристикаНоменклатури, Серія, Склад, Рядок HAVING /* Кількість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE 0 END) != 0 OR SUM(CASE WHEN ПартіїТоварів.income = false THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE 0 END) != 0 OR SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Кількість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Кількість} END) != 0 OR /* Собівартість */ SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE 0 END) != 0 OR SUM(CASE WHEN ПартіїТоварів.income = false THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE 0 END) != 0 OR SUM(CASE WHEN ПартіїТоварів.income = true THEN ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} ELSE -ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "Продажі":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: Обороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {Продажі_Обороти_TablePart.TABLE} WHERE {Продажі_Обороти_TablePart.TABLE}.{Продажі_Обороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {Продажі_Обороти_TablePart.TABLE} ( uid, {Продажі_Обороти_TablePart.Період}, {Продажі_Обороти_TablePart.Організація}, {Продажі_Обороти_TablePart.Склад}, {Продажі_Обороти_TablePart.Контрагент}, {Продажі_Обороти_TablePart.Договір}, {Продажі_Обороти_TablePart.Номенклатура}, {Продажі_Обороти_TablePart.ХарактеристикаНоменклатури}, {Продажі_Обороти_TablePart.Кількість}, {Продажі_Обороти_TablePart.Сума}, {Продажі_Обороти_TablePart.Дохід}, {Продажі_Обороти_TablePart.Собівартість} ) SELECT uuid_generate_v4(), date_trunc('day', Продажі.period::timestamp) AS Період, Продажі.{Продажі_Const.Організація} AS Організація, Продажі.{Продажі_Const.Склад} AS Склад, Продажі.{Продажі_Const.Контрагент} AS Контрагент, Продажі.{Продажі_Const.Договір} AS Договір, Продажі.{Продажі_Const.Номенклатура} AS Номенклатура, Продажі.{Продажі_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, SUM(Продажі.{Продажі_Const.Кількість}) AS Кількість, SUM(Продажі.{Продажі_Const.Сума}) AS Сума, SUM(Продажі.{Продажі_Const.Дохід}) AS Дохід, Продажі.{Продажі_Const.Собівартість} AS Собівартість FROM {Продажі_Const.TABLE} AS Продажі WHERE date_trunc('day', Продажі.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, Склад, Контрагент, Договір, Номенклатура, ХарактеристикаНоменклатури, Собівартість HAVING SUM(Продажі.{Продажі_Const.Кількість}) != 0 OR SUM(Продажі.{Продажі_Const.Сума}) != 0 OR SUM(Продажі.{Продажі_Const.Дохід}) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "ТовариВКомірках":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: ЗалишкиТаОбороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.TABLE} WHERE {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.TABLE}.{ТовариВКомірках_ЗалишкиТаОбороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.TABLE} ( uid, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.Період}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.Номенклатура}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.ХарактеристикаНоменклатури}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.Пакування}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.Комірка}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.Серія}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.ВНаявностіПрихід}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.ВНаявностіРозхід}, {ТовариВКомірках_ЗалишкиТаОбороти_TablePart.ВНаявностіЗалишок} ) SELECT uuid_generate_v4(), date_trunc('day', ТовариВКомірках.period::timestamp) AS Період, ТовариВКомірках.{ТовариВКомірках_Const.Номенклатура} AS Номенклатура, ТовариВКомірках.{ТовариВКомірках_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ТовариВКомірках.{ТовариВКомірках_Const.Пакування} AS Пакування, ТовариВКомірках.{ТовариВКомірках_Const.Комірка} AS Комірка, ТовариВКомірках.{ТовариВКомірках_Const.Серія} AS Серія, /* ВНаявності */ SUM(CASE WHEN ТовариВКомірках.income = true THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE 0 END) AS ВНаявностіПрихід, SUM(CASE WHEN ТовариВКомірках.income = false THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE 0 END) AS ВНаявностіРозхід, SUM(CASE WHEN ТовариВКомірках.income = true THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE -ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} END) AS ВНаявностіЗалишок FROM {ТовариВКомірках_Const.TABLE} AS ТовариВКомірках WHERE date_trunc('day', ТовариВКомірках.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Номенклатура, ХарактеристикаНоменклатури, Пакування, Комірка, Серія HAVING /* ВНаявності */ SUM(CASE WHEN ТовариВКомірках.income = true THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE 0 END) != 0 OR SUM(CASE WHEN ТовариВКомірках.income = false THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE 0 END) != 0 OR SUM(CASE WHEN ТовариВКомірках.income = true THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE -ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} END) != 0", paramQuery, transactionID);
                        
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ТовариВКомірках_Залишки_TablePart.TABLE} WHERE {ТовариВКомірках_Залишки_TablePart.TABLE}.{ТовариВКомірках_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ТовариВКомірках_Залишки_TablePart.TABLE} ( uid, {ТовариВКомірках_Залишки_TablePart.Період}, {ТовариВКомірках_Залишки_TablePart.Номенклатура}, {ТовариВКомірках_Залишки_TablePart.ХарактеристикаНоменклатури}, {ТовариВКомірках_Залишки_TablePart.Пакування}, {ТовариВКомірках_Залишки_TablePart.Комірка}, {ТовариВКомірках_Залишки_TablePart.Серія}, {ТовариВКомірках_Залишки_TablePart.ВНаявності} ) SELECT uuid_generate_v4(), date_trunc('day', ТовариВКомірках.period::timestamp) AS Період, ТовариВКомірках.{ТовариВКомірках_Const.Номенклатура} AS Номенклатура, ТовариВКомірках.{ТовариВКомірках_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ТовариВКомірках.{ТовариВКомірках_Const.Пакування} AS Пакування, ТовариВКомірках.{ТовариВКомірках_Const.Комірка} AS Комірка, ТовариВКомірках.{ТовариВКомірках_Const.Серія} AS Серія, /* ВНаявності */ SUM(CASE WHEN ТовариВКомірках.income = true THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE -ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} END) AS ВНаявності FROM {ТовариВКомірках_Const.TABLE} AS ТовариВКомірках WHERE date_trunc('day', ТовариВКомірках.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Номенклатура, ХарактеристикаНоменклатури, Пакування, Комірка, Серія HAVING /* ВНаявності */ SUM(CASE WHEN ТовариВКомірках.income = true THEN ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} ELSE -ТовариВКомірках.{ТовариВКомірках_Const.ВНаявності} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                case "РухКоштівККМ":
                {
                    byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                    
                    /* QueryBlock: ЗалишкиТаОбороти */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.TABLE} WHERE {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.TABLE}.{РухКоштівККМ_ЗалишкиТаОбороти_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.TABLE} ( uid, {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.Період}, {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.Організація}, {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.КасаККМ}, {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.Валюта}, {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.СумаПрихід}, {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.СумаРозхід}, {РухКоштівККМ_ЗалишкиТаОбороти_TablePart.СумаЗалишок} ) SELECT uuid_generate_v4(), date_trunc('day', РухКоштівККМ.period::timestamp) AS Період, РухКоштівККМ.{РухКоштівККМ_Const.Організація} AS Організація, РухКоштівККМ.{РухКоштівККМ_Const.КасаККМ} AS КасаККМ, РухКоштівККМ.{РухКоштівККМ_Const.Валюта} AS Валюта, /* Сума */ SUM(CASE WHEN РухКоштівККМ.income = true THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE 0 END) AS СумаПрихід, SUM(CASE WHEN РухКоштівККМ.income = false THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE 0 END) AS СумаРозхід, SUM(CASE WHEN РухКоштівККМ.income = true THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE -РухКоштівККМ.{РухКоштівККМ_Const.Сума} END) AS СумаЗалишок FROM {РухКоштівККМ_Const.TABLE} AS РухКоштівККМ WHERE date_trunc('day', РухКоштівККМ.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, КасаККМ, Валюта HAVING /* Сума */ SUM(CASE WHEN РухКоштівККМ.income = true THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РухКоштівККМ.income = false THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE 0 END) != 0 OR SUM(CASE WHEN РухКоштівККМ.income = true THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE -РухКоштівККМ.{РухКоштівККМ_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    /* QueryBlock: Залишки */
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РухКоштівККМ_Залишки_TablePart.TABLE} WHERE {РухКоштівККМ_Залишки_TablePart.TABLE}.{РухКоштівККМ_Залишки_TablePart.Період} = @ПеріодДеньВідбір", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РухКоштівККМ_Залишки_TablePart.TABLE} ( uid, {РухКоштівККМ_Залишки_TablePart.Період}, {РухКоштівККМ_Залишки_TablePart.Організація}, {РухКоштівККМ_Залишки_TablePart.КасаККМ}, {РухКоштівККМ_Залишки_TablePart.Валюта}, {РухКоштівККМ_Залишки_TablePart.Сума} ) SELECT uuid_generate_v4(), date_trunc('day', РухКоштівККМ.period::timestamp) AS Період, РухКоштівККМ.{РухКоштівККМ_Const.Організація} AS Організація, РухКоштівККМ.{РухКоштівККМ_Const.КасаККМ} AS КасаККМ, РухКоштівККМ.{РухКоштівККМ_Const.Валюта} AS Валюта, /* Сума */ SUM(CASE WHEN РухКоштівККМ.income = true THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE -РухКоштівККМ.{РухКоштівККМ_Const.Сума} END) AS Сума FROM {РухКоштівККМ_Const.TABLE} AS РухКоштівККМ WHERE date_trunc('day', РухКоштівККМ.period::timestamp) = @ПеріодДеньВідбір GROUP BY Період, Організація, КасаККМ, Валюта HAVING /* Сума */ SUM(CASE WHEN РухКоштівККМ.income = true THEN РухКоштівККМ.{РухКоштівККМ_Const.Сума} ELSE -РухКоштівККМ.{РухКоштівККМ_Const.Сума} END) != 0", paramQuery, transactionID);
                        
                    await Config.Kernel.DataBase.CommitTransaction(transactionID);
                    break;
                }
                
                    default:
                        break;
            }
            
        }

        /* Функція для обчислення підсумкових віртуальних таблиць */
        public static async ValueTask ExecuteFinalCalculation(List<string> regAccumNameList)
        {
            
            foreach (string regAccumName in regAccumNameList)
                switch(regAccumName)
                {
                
                    case "ТовариНаСкладах":
                    {
                        byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                        
                        /* QueryBlock: Підсумки */
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ТовариНаСкладах_Підсумки_TablePart.TABLE}", null, transactionID);
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ТовариНаСкладах_Підсумки_TablePart.TABLE} ( uid, {ТовариНаСкладах_Підсумки_TablePart.Номенклатура}, {ТовариНаСкладах_Підсумки_TablePart.ХарактеристикаНоменклатури}, {ТовариНаСкладах_Підсумки_TablePart.Склад}, {ТовариНаСкладах_Підсумки_TablePart.Серія}, {ТовариНаСкладах_Підсумки_TablePart.ВНаявності}, {ТовариНаСкладах_Підсумки_TablePart.ДоВідвантаження} ) SELECT uuid_generate_v4(), ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.Номенклатура} AS Номенклатура, ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.Склад} AS Склад, ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.Серія} AS Серія, /* ВНаявності */ SUM(ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.ВНаявності}) AS ВНаявності, /* ДоВідвантаження */ SUM(ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.ДоВідвантаження}) AS ДоВідвантаження FROM {ТовариНаСкладах_Залишки_TablePart.TABLE} AS ТовариНаСкладах GROUP BY Номенклатура, ХарактеристикаНоменклатури, Склад, Серія HAVING /* ВНаявності */ SUM(ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.ВНаявності}) != 0 OR /* ДоВідвантаження */ SUM(ТовариНаСкладах.{ТовариНаСкладах_Залишки_TablePart.ДоВідвантаження}) != 0", null, transactionID);
                            
                        await Config.Kernel.DataBase.CommitTransaction(transactionID);
                        break;
                    }
                    
                    case "ВільніЗалишки":
                    {
                        byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                        
                        /* QueryBlock: Підсумки */
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ВільніЗалишки_Підсумки_TablePart.TABLE}", null, transactionID);
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ВільніЗалишки_Підсумки_TablePart.TABLE} ( uid, {ВільніЗалишки_Підсумки_TablePart.Номенклатура}, {ВільніЗалишки_Підсумки_TablePart.ХарактеристикаНоменклатури}, {ВільніЗалишки_Підсумки_TablePart.Склад}, {ВільніЗалишки_Підсумки_TablePart.ВНаявності}, {ВільніЗалишки_Підсумки_TablePart.ВРезервіЗіСкладу}, {ВільніЗалишки_Підсумки_TablePart.ВРезервіПідЗамовлення} ) SELECT uuid_generate_v4(), ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.Номенклатура} AS Номенклатура, ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.Склад} AS Склад, /* ВНаявності */ SUM(ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.ВНаявності}) AS ВНаявності, /* ВРезервіЗіСкладу */ SUM(ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.ВРезервіЗіСкладу}) AS ВРезервіЗіСкладу, /* ВРезервіПідЗамовлення */ SUM(ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.ВРезервіПідЗамовлення}) AS ВРезервіПідЗамовлення FROM {ВільніЗалишки_Залишки_TablePart.TABLE} AS ВільніЗалишки GROUP BY Номенклатура, ХарактеристикаНоменклатури, Склад HAVING /* ВНаявності */ SUM(ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.ВНаявності}) != 0 OR /* ВРезервіЗіСкладу */ SUM(ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.ВРезервіЗіСкладу}) != 0 OR /* ВРезервіПідЗамовлення */ SUM(ВільніЗалишки.{ВільніЗалишки_Залишки_TablePart.ВРезервіПідЗамовлення}) != 0", null, transactionID);
                            
                        await Config.Kernel.DataBase.CommitTransaction(transactionID);
                        break;
                    }
                    
                    case "РухКоштів":
                    {
                        byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                        
                        /* QueryBlock: Підсумки */
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РухКоштів_Підсумки_TablePart.TABLE}", null, transactionID);
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РухКоштів_Підсумки_TablePart.TABLE} ( uid, {РухКоштів_Підсумки_TablePart.Організація}, {РухКоштів_Підсумки_TablePart.Каса}, {РухКоштів_Підсумки_TablePart.Валюта}, {РухКоштів_Підсумки_TablePart.Сума} ) SELECT uuid_generate_v4(), РухКоштів.{РухКоштів_Залишки_TablePart.Організація} AS Організація, РухКоштів.{РухКоштів_Залишки_TablePart.Каса} AS Каса, РухКоштів.{РухКоштів_Залишки_TablePart.Валюта} AS Валюта, /* Сума */ SUM(РухКоштів.{РухКоштів_Залишки_TablePart.Сума}) AS Сума FROM {РухКоштів_Залишки_TablePart.TABLE} AS РухКоштів GROUP BY Організація, Каса, Валюта HAVING /* Сума */ SUM(РухКоштів.{РухКоштів_Залишки_TablePart.Сума}) != 0", null, transactionID);
                            
                        await Config.Kernel.DataBase.CommitTransaction(transactionID);
                        break;
                    }
                    
                    case "ПартіїТоварів":
                    {
                        byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                        
                        /* QueryBlock: Підсумки */
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ПартіїТоварів_Підсумки_TablePart.TABLE}", null, transactionID);
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ПартіїТоварів_Підсумки_TablePart.TABLE} ( uid, {ПартіїТоварів_Підсумки_TablePart.Організація}, {ПартіїТоварів_Підсумки_TablePart.ПартіяТоварівКомпозит}, {ПартіїТоварів_Підсумки_TablePart.Номенклатура}, {ПартіїТоварів_Підсумки_TablePart.ХарактеристикаНоменклатури}, {ПартіїТоварів_Підсумки_TablePart.Серія}, {ПартіїТоварів_Підсумки_TablePart.Склад}, {ПартіїТоварів_Підсумки_TablePart.Кількість} ) SELECT uuid_generate_v4(), ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Організація} AS Організація, ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ПартіяТоварівКомпозит} AS ПартіяТоварівКомпозит, ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Номенклатура} AS Номенклатура, ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Серія} AS Серія, ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Склад} AS Склад, /* Кількість */ SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Кількість}) AS Кількість FROM {ПартіїТоварів_Залишки_TablePart.TABLE} AS ПартіїТоварів GROUP BY Організація, ПартіяТоварівКомпозит, Номенклатура, ХарактеристикаНоменклатури, Серія, Склад HAVING /* Кількість */ SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Кількість}) != 0", null, transactionID);
                            
                        await Config.Kernel.DataBase.CommitTransaction(transactionID);
                        break;
                    }
                    
                    case "ТовариВКомірках":
                    {
                        byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                        
                        /* QueryBlock: Підсумки */
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {ТовариВКомірках_Підсумки_TablePart.TABLE}", null, transactionID);
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {ТовариВКомірках_Підсумки_TablePart.TABLE} ( uid, {ТовариВКомірках_Підсумки_TablePart.Номенклатура}, {ТовариВКомірках_Підсумки_TablePart.ХарактеристикаНоменклатури}, {ТовариВКомірках_Підсумки_TablePart.Пакування}, {ТовариВКомірках_Підсумки_TablePart.Комірка}, {ТовариВКомірках_Підсумки_TablePart.Серія}, {ТовариВКомірках_Підсумки_TablePart.ВНаявності} ) SELECT uuid_generate_v4(), ТовариВКомірках.{ТовариВКомірках_Залишки_TablePart.Номенклатура} AS Номенклатура, ТовариВКомірках.{ТовариВКомірках_Залишки_TablePart.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури, ТовариВКомірках.{ТовариВКомірках_Залишки_TablePart.Пакування} AS Пакування, ТовариВКомірках.{ТовариВКомірках_Залишки_TablePart.Комірка} AS Комірка, ТовариВКомірках.{ТовариВКомірках_Залишки_TablePart.Серія} AS Серія, /* ВНаявності */ SUM(ТовариВКомірках.{ТовариВКомірках_Залишки_TablePart.ВНаявності}) AS ВНаявності FROM {ТовариВКомірках_Залишки_TablePart.TABLE} AS ТовариВКомірках GROUP BY Номенклатура, ХарактеристикаНоменклатури, Пакування, Комірка, Серія HAVING /* ВНаявності */ SUM(ТовариВКомірках.{ТовариВКомірках_Залишки_TablePart.ВНаявності}) != 0", null, transactionID);
                            
                        await Config.Kernel.DataBase.CommitTransaction(transactionID);
                        break;
                    }
                    
                    case "РухКоштівККМ":
                    {
                        byte transactionID = await Config.Kernel.DataBase.BeginTransaction();
                        
                        /* QueryBlock: Підсумки */
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"DELETE FROM {РухКоштівККМ_Підсумки_TablePart.TABLE}", null, transactionID);
                            
                        await Config.Kernel.DataBase.ExecuteSQL($@"INSERT INTO {РухКоштівККМ_Підсумки_TablePart.TABLE} ( uid, {РухКоштівККМ_Підсумки_TablePart.Організація}, {РухКоштівККМ_Підсумки_TablePart.КасаККМ}, {РухКоштівККМ_Підсумки_TablePart.Валюта}, {РухКоштівККМ_Підсумки_TablePart.Сума} ) SELECT uuid_generate_v4(), РухКоштівККМ.{РухКоштівККМ_Залишки_TablePart.Організація} AS Організація, РухКоштівККМ.{РухКоштівККМ_Залишки_TablePart.КасаККМ} AS КасаККМ, РухКоштівККМ.{РухКоштівККМ_Залишки_TablePart.Валюта} AS Валюта, /* Сума */ SUM(РухКоштівККМ.{РухКоштівККМ_Залишки_TablePart.Сума}) AS Сума FROM {РухКоштівККМ_Залишки_TablePart.TABLE} AS РухКоштівККМ GROUP BY Організація, КасаККМ, Валюта HAVING /* Сума */ SUM(РухКоштівККМ.{РухКоштівККМ_Залишки_TablePart.Сума}) != 0", null, transactionID);
                            
                        await Config.Kernel.DataBase.CommitTransaction(transactionID);
                        break;
                    }
                    
                        default:
                            break;
                }
            
        }
    }

    
    #region REGISTER "ТовариНаСкладах"
    public static class ТовариНаСкладах_Const
    {
        public const string FULLNAME = "Товари на складах";
        public const string TABLE = "tab_a38";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a32", "tab_a36", "tab_a31", "tab_a51", "tab_a53", "tab_a83", "tab_a94", "tab_b07", "tab_b51", ];
		    public static readonly string[] AllowDocumentSpendType = ["ПоступленняТоварівТаПослуг", "РеалізаціяТоварівТаПослуг", "ПереміщенняТоварів", "ПоверненняТоварівПостачальнику", "ПоверненняТоварівВідКлієнта", "ВведенняЗалишків", "ПсуванняТоварів", "ВнутрішнєСпоживанняТоварів", "ЧекККМ", ];
        
        public const string Номенклатура = "col_e4";
        public const string ХарактеристикаНоменклатури = "col_e5";
        public const string Склад = "col_e6";
        public const string Серія = "col_a1";
        public const string ВНаявності = "col_e7";
        public const string ДоВідвантаження = "col_e8";
    }
	
    public class ТовариНаСкладах_RecordsSet : RegisterAccumulationRecordsSet
    {
        public ТовариНаСкладах_RecordsSet() : base(Config.Kernel, "tab_a38", "ТовариНаСкладах",
             ["col_e4", "col_e5", "col_e6", "col_a1", "col_e7", "col_e8", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ТовариНаСкладах_Const.Номенклатура, "tab_a38", "join_tab_1", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ТовариНаСкладах_Const.ХарактеристикаНоменклатури, "tab_a38", "join_tab_2", "ХарактеристикаНоменклатури");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  ТовариНаСкладах_Const.Склад, "tab_a38", "join_tab_3", "Склад");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ТовариНаСкладах_Const.Серія, "tab_a38", "join_tab_4", "Серія");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ПоступленняТоварівТаПослуг_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.РеалізаціяТоварівТаПослуг_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.ПереміщенняТоварів_Const.Назва} WHEN join_doc_4.uid IS NOT NULL THEN join_doc_4.{Документи.ПоверненняТоварівПостачальнику_Const.Назва} WHEN join_doc_5.uid IS NOT NULL THEN join_doc_5.{Документи.ПоверненняТоварівВідКлієнта_Const.Назва} WHEN join_doc_6.uid IS NOT NULL THEN join_doc_6.{Документи.ВведенняЗалишків_Const.Назва} WHEN join_doc_7.uid IS NOT NULL THEN join_doc_7.{Документи.ПсуванняТоварів_Const.Назва} WHEN join_doc_8.uid IS NOT NULL THEN join_doc_8.{Документи.ВнутрішнєСпоживанняТоварів_Const.Назва} WHEN join_doc_9.uid IS NOT NULL THEN join_doc_9.{Документи.ЧекККМ_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in ТовариНаСкладах_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a38", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_e4"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_e5"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_e6"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a1"]),
                    ВНаявності = (fieldValue["col_e7"] != DBNull.Value) ? (decimal)fieldValue["col_e7"] : 0,
                    ДоВідвантаження = (fieldValue["col_e8"] != DBNull.Value) ? (decimal)fieldValue["col_e8"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.Склад.Name = ItemValue["Склад"];
                        record.Серія.Name = ItemValue["Серія"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_e4", record.Номенклатура.UnigueID.UGuid},
                    {"col_e5", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_e6", record.Склад.UnigueID.UGuid},
                    {"col_a1", record.Серія.UnigueID.UGuid},
                    {"col_e7", record.ВНаявності},
                    {"col_e8", record.ДоВідвантаження},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            public decimal ДоВідвантаження { get; set; } = 0;
            
        }
    }
    
    
    
    public class ТовариНаСкладах_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public ТовариНаСкладах_Залишки_TablePart() : base(Config.Kernel, "tab_b24",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ]) { }
        
        public const string TABLE = "tab_b24";
        
        public const string Період = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Склад = "col_a4";
        public const string Серія = "col_a5";
        public const string ВНаявності = "col_a6";
        public const string ДоВідвантаження = "col_a7";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a4"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a5"]),
                    ВНаявності = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    ДоВідвантаження = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Склад.UnigueID.UGuid},
                    {"col_a5", record.Серія.UnigueID.UGuid},
                    {"col_a6", record.ВНаявності},
                    {"col_a7", record.ДоВідвантаження},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            public decimal ДоВідвантаження { get; set; } = 0;
            
        }            
    }
    
    
    public class ТовариНаСкладах_ЗалишкиТаОбороти_TablePart : RegisterAccumulationTablePart
    {
        public ТовариНаСкладах_ЗалишкиТаОбороти_TablePart() : base(Config.Kernel, "tab_b30",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", ]) { }
        
        public const string TABLE = "tab_b30";
        
        public const string Період = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Склад = "col_a4";
        public const string Серія = "col_a5";
        public const string ВНаявностіПрихід = "col_a6";
        public const string ВНаявностіРозхід = "col_a7";
        public const string ВНаявностіЗалишок = "col_a8";
        public const string ДоВідвантаженняПрихід = "col_a9";
        public const string ДоВідвантаженняРозхід = "col_b1";
        public const string ДоВідвантаженняЗалишок = "col_b2";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a4"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a5"]),
                    ВНаявностіПрихід = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    ВНаявностіРозхід = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    ВНаявностіЗалишок = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    ДоВідвантаженняПрихід = (fieldValue["col_a9"] != DBNull.Value) ? (decimal)fieldValue["col_a9"] : 0,
                    ДоВідвантаженняРозхід = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    ДоВідвантаженняЗалишок = (fieldValue["col_b2"] != DBNull.Value) ? (decimal)fieldValue["col_b2"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Склад.UnigueID.UGuid},
                    {"col_a5", record.Серія.UnigueID.UGuid},
                    {"col_a6", record.ВНаявностіПрихід},
                    {"col_a7", record.ВНаявностіРозхід},
                    {"col_a8", record.ВНаявностіЗалишок},
                    {"col_a9", record.ДоВідвантаженняПрихід},
                    {"col_b1", record.ДоВідвантаженняРозхід},
                    {"col_b2", record.ДоВідвантаженняЗалишок},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявностіПрихід { get; set; } = 0;
            public decimal ВНаявностіРозхід { get; set; } = 0;
            public decimal ВНаявностіЗалишок { get; set; } = 0;
            public decimal ДоВідвантаженняПрихід { get; set; } = 0;
            public decimal ДоВідвантаженняРозхід { get; set; } = 0;
            public decimal ДоВідвантаженняЗалишок { get; set; } = 0;
            
        }            
    }
    
    
    public class ТовариНаСкладах_Підсумки_TablePart : RegisterAccumulationTablePart
    {
        public ТовариНаСкладах_Підсумки_TablePart() : base(Config.Kernel, "tab_a97",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
        
        public const string TABLE = "tab_a97";
        
        public const string Номенклатура = "col_a1";
        public const string ХарактеристикаНоменклатури = "col_a2";
        public const string Склад = "col_a3";
        public const string Серія = "col_a4";
        public const string ВНаявності = "col_a5";
        public const string ДоВідвантаження = "col_a6";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a1"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a2"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a3"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a4"]),
                    ВНаявності = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    ДоВідвантаження = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a3", record.Склад.UnigueID.UGuid},
                    {"col_a4", record.Серія.UnigueID.UGuid},
                    {"col_a5", record.ВНаявності},
                    {"col_a6", record.ДоВідвантаження},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            public decimal ДоВідвантаження { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "ЗамовленняКлієнтів"
    public static class ЗамовленняКлієнтів_Const
    {
        public const string FULLNAME = "ЗамовленняКлієнтів";
        public const string TABLE = "tab_a55";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a34", "tab_a36", "tab_a96", ];
		    public static readonly string[] AllowDocumentSpendType = ["ЗамовленняКлієнта", "РеалізаціяТоварівТаПослуг", "ЗакриттяЗамовленняКлієнта", ];
        
        public const string ЗамовленняКлієнта = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Склад = "col_a4";
        public const string Замовлено = "col_a5";
        public const string Сума = "col_a6";
    }
	
    public class ЗамовленняКлієнтів_RecordsSet : RegisterAccumulationRecordsSet
    {
        public ЗамовленняКлієнтів_RecordsSet() : base(Config.Kernel, "tab_a55", "ЗамовленняКлієнтів",
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Документи.ЗамовленняКлієнта_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняКлієнтів_Const.ЗамовленняКлієнта, "tab_a55", "join_tab_1", "ЗамовленняКлієнта");
                Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняКлієнтів_Const.Номенклатура, "tab_a55", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняКлієнтів_Const.ХарактеристикаНоменклатури, "tab_a55", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняКлієнтів_Const.Склад, "tab_a55", "join_tab_4", "Склад");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ЗамовленняКлієнта_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.РеалізаціяТоварівТаПослуг_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.ЗакриттяЗамовленняКлієнта_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in ЗамовленняКлієнтів_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a55", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    ЗамовленняКлієнта = new Документи.ЗамовленняКлієнта_Pointer(fieldValue["col_a1"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a4"]),
                    Замовлено = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    Сума = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.ЗамовленняКлієнта.Name = ItemValue["ЗамовленняКлієнта"];
                        record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.Склад.Name = ItemValue["Склад"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.ЗамовленняКлієнта.UnigueID.UGuid},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Склад.UnigueID.UGuid},
                    {"col_a5", record.Замовлено},
                    {"col_a6", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Документи.ЗамовленняКлієнта_Pointer ЗамовленняКлієнта { get; set; } = new Документи.ЗамовленняКлієнта_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Замовлено { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }
    }
    
    
    
    public class ЗамовленняКлієнтів_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public ЗамовленняКлієнтів_Залишки_TablePart() : base(Config.Kernel, "tab_b31",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ]) { }
        
        public const string TABLE = "tab_b31";
        
        public const string Період = "col_a1";
        public const string ЗамовленняКлієнта = "col_a2";
        public const string Номенклатура = "col_a3";
        public const string ХарактеристикаНоменклатури = "col_a4";
        public const string Склад = "col_a5";
        public const string Замовлено = "col_a6";
        public const string Сума = "col_a7";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    ЗамовленняКлієнта = new Документи.ЗамовленняКлієнта_Pointer(fieldValue["col_a2"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a3"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a4"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a5"]),
                    Замовлено = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    Сума = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.ЗамовленняКлієнта.UnigueID.UGuid},
                    {"col_a3", record.Номенклатура.UnigueID.UGuid},
                    {"col_a4", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a5", record.Склад.UnigueID.UGuid},
                    {"col_a6", record.Замовлено},
                    {"col_a7", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Документи.ЗамовленняКлієнта_Pointer ЗамовленняКлієнта { get; set; } = new Документи.ЗамовленняКлієнта_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Замовлено { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "РозрахункиЗКлієнтами"
    public static class РозрахункиЗКлієнтами_Const
    {
        public const string FULLNAME = "РозрахункиЗКлієнтами";
        public const string TABLE = "tab_a56";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a36", "tab_a44", "tab_a48", "tab_a53", "tab_a81", "tab_a83", "tab_a65", ];
		    public static readonly string[] AllowDocumentSpendType = ["РеалізаціяТоварівТаПослуг", "ПрихіднийКасовийОрдер", "РозхіднийКасовийОрдер", "ПоверненняТоварівВідКлієнта", "АктВиконанихРобіт", "ВведенняЗалишків", "КорегуванняБоргу", ];
        
        public const string Валюта = "col_a2";
        public const string Контрагент = "col_a5";
        public const string Сума = "col_a4";
    }
	
    public class РозрахункиЗКлієнтами_RecordsSet : RegisterAccumulationRecordsSet
    {
        public РозрахункиЗКлієнтами_RecordsSet() : base(Config.Kernel, "tab_a56", "РозрахункиЗКлієнтами",
             ["col_a2", "col_a5", "col_a4", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Валюти_Pointer.GetJoin(QuerySelect, 
                  РозрахункиЗКлієнтами_Const.Валюта, "tab_a56", "join_tab_1", "Валюта");
                Довідники.Контрагенти_Pointer.GetJoin(QuerySelect, 
                  РозрахункиЗКлієнтами_Const.Контрагент, "tab_a56", "join_tab_2", "Контрагент");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.РеалізаціяТоварівТаПослуг_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.ПрихіднийКасовийОрдер_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.РозхіднийКасовийОрдер_Const.Назва} WHEN join_doc_4.uid IS NOT NULL THEN join_doc_4.{Документи.ПоверненняТоварівВідКлієнта_Const.Назва} WHEN join_doc_5.uid IS NOT NULL THEN join_doc_5.{Документи.АктВиконанихРобіт_Const.Назва} WHEN join_doc_6.uid IS NOT NULL THEN join_doc_6.{Документи.ВведенняЗалишків_Const.Назва} WHEN join_doc_7.uid IS NOT NULL THEN join_doc_7.{Документи.КорегуванняБоргу_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in РозрахункиЗКлієнтами_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a56", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a2"]),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a5"]),
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Валюта.Name = ItemValue["Валюта"];
                        record.Контрагент.Name = ItemValue["Контрагент"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a2", record.Валюта.UnigueID.UGuid},
                    {"col_a5", record.Контрагент.UnigueID.UGuid},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }
    }
    
    
    
    public class РозрахункиЗКлієнтами_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public РозрахункиЗКлієнтами_Залишки_TablePart() : base(Config.Kernel, "tab_b34",
              ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
        
        public const string TABLE = "tab_b34";
        
        public const string Період = "col_a1";
        public const string Валюта = "col_a2";
        public const string Контрагент = "col_a3";
        public const string Сума = "col_a4";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a2"]),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a3"]),
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Валюта.UnigueID.UGuid},
                    {"col_a3", record.Контрагент.UnigueID.UGuid},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }            
    }
    
    
    public class РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart : RegisterAccumulationTablePart
    {
        public РозрахункиЗКлієнтами_ЗалишкиТаОбороти_TablePart() : base(Config.Kernel, "tab_b36",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
        
        public const string TABLE = "tab_b36";
        
        public const string Період = "col_a1";
        public const string Валюта = "col_a2";
        public const string Контрагент = "col_a3";
        public const string СумаПрихід = "col_a4";
        public const string СумаРозхід = "col_a5";
        public const string СумаЗалишок = "col_a6";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a2"]),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a3"]),
                    СумаПрихід = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    СумаРозхід = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    СумаЗалишок = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Валюта.UnigueID.UGuid},
                    {"col_a3", record.Контрагент.UnigueID.UGuid},
                    {"col_a4", record.СумаПрихід},
                    {"col_a5", record.СумаРозхід},
                    {"col_a6", record.СумаЗалишок},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public decimal СумаПрихід { get; set; } = 0;
            public decimal СумаРозхід { get; set; } = 0;
            public decimal СумаЗалишок { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "Закупівлі"
    public static class Закупівлі_Const
    {
        public const string FULLNAME = "Закупівлі";
        public const string TABLE = "tab_a57";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a32", "tab_a51", ];
		    public static readonly string[] AllowDocumentSpendType = ["ПоступленняТоварівТаПослуг", "ПоверненняТоварівПостачальнику", ];
        
        public const string Організація = "col_a5";
        public const string Склад = "col_a6";
        public const string Контрагент = "col_a7";
        public const string Договір = "col_b3";
        public const string Номенклатура = "col_a1";
        public const string ХарактеристикаНоменклатури = "col_a2";
        public const string Кількість = "col_a8";
        public const string Сума = "col_b1";
        public const string Собівартість = "col_a3";
    }
	
    public class Закупівлі_RecordsSet : RegisterAccumulationRecordsSet
    {
        public Закупівлі_RecordsSet() : base(Config.Kernel, "tab_a57", "Закупівлі",
             ["col_a5", "col_a6", "col_a7", "col_b3", "col_a1", "col_a2", "col_a8", "col_b1", "col_a3", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Організації_Pointer.GetJoin(QuerySelect, 
                  Закупівлі_Const.Організація, "tab_a57", "join_tab_1", "Організація");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  Закупівлі_Const.Склад, "tab_a57", "join_tab_2", "Склад");
                Довідники.Контрагенти_Pointer.GetJoin(QuerySelect, 
                  Закупівлі_Const.Контрагент, "tab_a57", "join_tab_3", "Контрагент");
                Довідники.ДоговориКонтрагентів_Pointer.GetJoin(QuerySelect, 
                  Закупівлі_Const.Договір, "tab_a57", "join_tab_4", "Договір");
                Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  Закупівлі_Const.Номенклатура, "tab_a57", "join_tab_5", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  Закупівлі_Const.ХарактеристикаНоменклатури, "tab_a57", "join_tab_6", "ХарактеристикаНоменклатури");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ПоступленняТоварівТаПослуг_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.ПоверненняТоварівПостачальнику_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in Закупівлі_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a57", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a5"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a6"]),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a7"]),
                    Договір = new Довідники.ДоговориКонтрагентів_Pointer(fieldValue["col_b3"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a1"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a2"]),
                    Кількість = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Сума = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    Собівартість = (fieldValue["col_a3"] != DBNull.Value) ? (decimal)fieldValue["col_a3"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Організація.Name = ItemValue["Організація"];
                        record.Склад.Name = ItemValue["Склад"];
                        record.Контрагент.Name = ItemValue["Контрагент"];
                        record.Договір.Name = ItemValue["Договір"];
                        record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a5", record.Організація.UnigueID.UGuid},
                    {"col_a6", record.Склад.UnigueID.UGuid},
                    {"col_a7", record.Контрагент.UnigueID.UGuid},
                    {"col_b3", record.Договір.UnigueID.UGuid},
                    {"col_a1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a8", record.Кількість},
                    {"col_b1", record.Сума},
                    {"col_a3", record.Собівартість},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public decimal Кількість { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Собівартість { get; set; } = 0;
            
        }
    }
    
    
    
    public class Закупівлі_Обороти_TablePart : RegisterAccumulationTablePart
    {
        public Закупівлі_Обороти_TablePart() : base(Config.Kernel, "tab_a63",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", ]) { }
        
        public const string TABLE = "tab_a63";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string Склад = "col_a3";
        public const string Контрагент = "col_a4";
        public const string Договір = "col_a5";
        public const string Номенклатура = "col_a6";
        public const string ХарактеристикаНоменклатури = "col_a7";
        public const string Кількість = "col_a8";
        public const string Сума = "col_a9";
        public const string Собівартість = "col_b1";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a3"]),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a4"]),
                    Договір = new Довідники.ДоговориКонтрагентів_Pointer(fieldValue["col_a5"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a6"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a7"]),
                    Кількість = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Сума = (fieldValue["col_a9"] != DBNull.Value) ? (decimal)fieldValue["col_a9"] : 0,
                    Собівартість = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.Склад.UnigueID.UGuid},
                    {"col_a4", record.Контрагент.UnigueID.UGuid},
                    {"col_a5", record.Договір.UnigueID.UGuid},
                    {"col_a6", record.Номенклатура.UnigueID.UGuid},
                    {"col_a7", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a8", record.Кількість},
                    {"col_a9", record.Сума},
                    {"col_b1", record.Собівартість},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public decimal Кількість { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Собівартість { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "ВільніЗалишки"
    public static class ВільніЗалишки_Const
    {
        public const string FULLNAME = "ВільніЗалишки";
        public const string TABLE = "tab_a58";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a32", "tab_a34", "tab_a36", "tab_a31", "tab_a51", "tab_a53", "tab_a83", "tab_a94", "tab_b07", "tab_b10", "tab_a96", "tab_b41", "tab_b51", ];
		    public static readonly string[] AllowDocumentSpendType = ["ПоступленняТоварівТаПослуг", "ЗамовленняКлієнта", "РеалізаціяТоварівТаПослуг", "ПереміщенняТоварів", "ПоверненняТоварівПостачальнику", "ПоверненняТоварівВідКлієнта", "ВведенняЗалишків", "ПсуванняТоварів", "ВнутрішнєСпоживанняТоварів", "РахунокФактура", "ЗакриттяЗамовленняКлієнта", "ЗакриттяРахункуФактури", "ЧекККМ", ];
        
        public const string Номенклатура = "col_a5";
        public const string ХарактеристикаНоменклатури = "col_a6";
        public const string Склад = "col_a7";
        public const string ВНаявності = "col_a8";
        public const string ВРезервіЗіСкладу = "col_b1";
        public const string ВРезервіПідЗамовлення = "col_b2";
        public const string ДокументРезерву = "col_a1";
    }
	
    public class ВільніЗалишки_RecordsSet : RegisterAccumulationRecordsSet
    {
        public ВільніЗалишки_RecordsSet() : base(Config.Kernel, "tab_a58", "ВільніЗалишки",
             ["col_a5", "col_a6", "col_a7", "col_a8", "col_b1", "col_b2", "col_a1", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ВільніЗалишки_Const.Номенклатура, "tab_a58", "join_tab_1", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ВільніЗалишки_Const.ХарактеристикаНоменклатури, "tab_a58", "join_tab_2", "ХарактеристикаНоменклатури");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  ВільніЗалишки_Const.Склад, "tab_a58", "join_tab_3", "Склад");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ПоступленняТоварівТаПослуг_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.ЗамовленняКлієнта_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.РеалізаціяТоварівТаПослуг_Const.Назва} WHEN join_doc_4.uid IS NOT NULL THEN join_doc_4.{Документи.ПереміщенняТоварів_Const.Назва} WHEN join_doc_5.uid IS NOT NULL THEN join_doc_5.{Документи.ПоверненняТоварівПостачальнику_Const.Назва} WHEN join_doc_6.uid IS NOT NULL THEN join_doc_6.{Документи.ПоверненняТоварівВідКлієнта_Const.Назва} WHEN join_doc_7.uid IS NOT NULL THEN join_doc_7.{Документи.ВведенняЗалишків_Const.Назва} WHEN join_doc_8.uid IS NOT NULL THEN join_doc_8.{Документи.ПсуванняТоварів_Const.Назва} WHEN join_doc_9.uid IS NOT NULL THEN join_doc_9.{Документи.ВнутрішнєСпоживанняТоварів_Const.Назва} WHEN join_doc_10.uid IS NOT NULL THEN join_doc_10.{Документи.РахунокФактура_Const.Назва} WHEN join_doc_11.uid IS NOT NULL THEN join_doc_11.{Документи.ЗакриттяЗамовленняКлієнта_Const.Назва} WHEN join_doc_12.uid IS NOT NULL THEN join_doc_12.{Документи.ЗакриттяРахункуФактури_Const.Назва} WHEN join_doc_13.uid IS NOT NULL THEN join_doc_13.{Документи.ЧекККМ_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in ВільніЗалишки_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a58", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a5"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a6"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a7"]),
                    ВНаявності = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    ВРезервіЗіСкладу = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    ВРезервіПідЗамовлення = (fieldValue["col_b2"] != DBNull.Value) ? (decimal)fieldValue["col_b2"] : 0,
                    ДокументРезерву = (fieldValue["col_a1"] != DBNull.Value) ? (Guid)fieldValue["col_a1"] : Guid.Empty,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.Склад.Name = ItemValue["Склад"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a5", record.Номенклатура.UnigueID.UGuid},
                    {"col_a6", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a7", record.Склад.UnigueID.UGuid},
                    {"col_a8", record.ВНаявності},
                    {"col_b1", record.ВРезервіЗіСкладу},
                    {"col_b2", record.ВРезервіПідЗамовлення},
                    {"col_a1", record.ДокументРезерву},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            public decimal ВРезервіЗіСкладу { get; set; } = 0;
            public decimal ВРезервіПідЗамовлення { get; set; } = 0;
            public Guid ДокументРезерву { get; set; } = new Guid();
            
        }
    }
    
    
    
    public class ВільніЗалишки_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public ВільніЗалишки_Залишки_TablePart() : base(Config.Kernel, "tab_b37",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ]) { }
        
        public const string TABLE = "tab_b37";
        
        public const string Період = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Склад = "col_a4";
        public const string ВНаявності = "col_a5";
        public const string ВРезервіЗіСкладу = "col_a6";
        public const string ВРезервіПідЗамовлення = "col_a7";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a4"]),
                    ВНаявності = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    ВРезервіЗіСкладу = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    ВРезервіПідЗамовлення = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Склад.UnigueID.UGuid},
                    {"col_a5", record.ВНаявності},
                    {"col_a6", record.ВРезервіЗіСкладу},
                    {"col_a7", record.ВРезервіПідЗамовлення},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            public decimal ВРезервіЗіСкладу { get; set; } = 0;
            public decimal ВРезервіПідЗамовлення { get; set; } = 0;
            
        }            
    }
    
    
    public class ВільніЗалишки_Підсумки_TablePart : RegisterAccumulationTablePart
    {
        public ВільніЗалишки_Підсумки_TablePart() : base(Config.Kernel, "tab_a77",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
        
        public const string TABLE = "tab_a77";
        
        public const string Номенклатура = "col_a1";
        public const string ХарактеристикаНоменклатури = "col_a2";
        public const string Склад = "col_a3";
        public const string ВНаявності = "col_a4";
        public const string ВРезервіЗіСкладу = "col_a5";
        public const string ВРезервіПідЗамовлення = "col_a6";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a1"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a2"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a3"]),
                    ВНаявності = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    ВРезервіЗіСкладу = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    ВРезервіПідЗамовлення = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a3", record.Склад.UnigueID.UGuid},
                    {"col_a4", record.ВНаявності},
                    {"col_a5", record.ВРезервіЗіСкладу},
                    {"col_a6", record.ВРезервіПідЗамовлення},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            public decimal ВРезервіЗіСкладу { get; set; } = 0;
            public decimal ВРезервіПідЗамовлення { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "ЗамовленняПостачальникам"
    public static class ЗамовленняПостачальникам_Const
    {
        public const string FULLNAME = "ЗамовленняПостачальникам";
        public const string TABLE = "tab_a60";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a25", "tab_a32", "tab_b44", ];
		    public static readonly string[] AllowDocumentSpendType = ["ЗамовленняПостачальнику", "ПоступленняТоварівТаПослуг", "ЗакриттяЗамовленняПостачальнику", ];
        
        public const string ЗамовленняПостачальнику = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Склад = "col_a4";
        public const string Замовлено = "col_a5";
    }
	
    public class ЗамовленняПостачальникам_RecordsSet : RegisterAccumulationRecordsSet
    {
        public ЗамовленняПостачальникам_RecordsSet() : base(Config.Kernel, "tab_a60", "ЗамовленняПостачальникам",
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Документи.ЗамовленняПостачальнику_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняПостачальникам_Const.ЗамовленняПостачальнику, "tab_a60", "join_tab_1", "ЗамовленняПостачальнику");
                Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняПостачальникам_Const.Номенклатура, "tab_a60", "join_tab_2", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняПостачальникам_Const.ХарактеристикаНоменклатури, "tab_a60", "join_tab_3", "ХарактеристикаНоменклатури");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  ЗамовленняПостачальникам_Const.Склад, "tab_a60", "join_tab_4", "Склад");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ЗамовленняПостачальнику_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.ПоступленняТоварівТаПослуг_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.ЗакриттяЗамовленняПостачальнику_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in ЗамовленняПостачальникам_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a60", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    ЗамовленняПостачальнику = new Документи.ЗамовленняПостачальнику_Pointer(fieldValue["col_a1"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a4"]),
                    Замовлено = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.ЗамовленняПостачальнику.Name = ItemValue["ЗамовленняПостачальнику"];
                        record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.Склад.Name = ItemValue["Склад"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.ЗамовленняПостачальнику.UnigueID.UGuid},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Склад.UnigueID.UGuid},
                    {"col_a5", record.Замовлено},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Документи.ЗамовленняПостачальнику_Pointer ЗамовленняПостачальнику { get; set; } = new Документи.ЗамовленняПостачальнику_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Замовлено { get; set; } = 0;
            
        }
    }
    
    
    
    public class ЗамовленняПостачальникам_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public ЗамовленняПостачальникам_Залишки_TablePart() : base(Config.Kernel, "tab_b40",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
        
        public const string TABLE = "tab_b40";
        
        public const string Період = "col_a1";
        public const string ЗамовленняПостачальнику = "col_a2";
        public const string Номенклатура = "col_a3";
        public const string ХарактеристикаНоменклатури = "col_a4";
        public const string Склад = "col_a5";
        public const string Замовлено = "col_a6";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    ЗамовленняПостачальнику = new Документи.ЗамовленняПостачальнику_Pointer(fieldValue["col_a2"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a3"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a4"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a5"]),
                    Замовлено = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.ЗамовленняПостачальнику.UnigueID.UGuid},
                    {"col_a3", record.Номенклатура.UnigueID.UGuid},
                    {"col_a4", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a5", record.Склад.UnigueID.UGuid},
                    {"col_a6", record.Замовлено},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Документи.ЗамовленняПостачальнику_Pointer ЗамовленняПостачальнику { get; set; } = new Документи.ЗамовленняПостачальнику_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Замовлено { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "РозрахункиЗПостачальниками"
    public static class РозрахункиЗПостачальниками_Const
    {
        public const string FULLNAME = "РозрахункиЗПостачальниками";
        public const string TABLE = "tab_a61";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a32", "tab_a44", "tab_a48", "tab_a51", "tab_a83", "tab_a65", ];
		    public static readonly string[] AllowDocumentSpendType = ["ПоступленняТоварівТаПослуг", "ПрихіднийКасовийОрдер", "РозхіднийКасовийОрдер", "ПоверненняТоварівПостачальнику", "ВведенняЗалишків", "КорегуванняБоргу", ];
        
        public const string Контрагент = "col_a6";
        public const string Валюта = "col_a7";
        public const string Сума = "col_a8";
    }
	
    public class РозрахункиЗПостачальниками_RecordsSet : RegisterAccumulationRecordsSet
    {
        public РозрахункиЗПостачальниками_RecordsSet() : base(Config.Kernel, "tab_a61", "РозрахункиЗПостачальниками",
             ["col_a6", "col_a7", "col_a8", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Контрагенти_Pointer.GetJoin(QuerySelect, 
                  РозрахункиЗПостачальниками_Const.Контрагент, "tab_a61", "join_tab_1", "Контрагент");
                Довідники.Валюти_Pointer.GetJoin(QuerySelect, 
                  РозрахункиЗПостачальниками_Const.Валюта, "tab_a61", "join_tab_2", "Валюта");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ПоступленняТоварівТаПослуг_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.ПрихіднийКасовийОрдер_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.РозхіднийКасовийОрдер_Const.Назва} WHEN join_doc_4.uid IS NOT NULL THEN join_doc_4.{Документи.ПоверненняТоварівПостачальнику_Const.Назва} WHEN join_doc_5.uid IS NOT NULL THEN join_doc_5.{Документи.ВведенняЗалишків_Const.Назва} WHEN join_doc_6.uid IS NOT NULL THEN join_doc_6.{Документи.КорегуванняБоргу_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in РозрахункиЗПостачальниками_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a61", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a6"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a7"]),
                    Сума = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Контрагент.Name = ItemValue["Контрагент"];
                        record.Валюта.Name = ItemValue["Валюта"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a6", record.Контрагент.UnigueID.UGuid},
                    {"col_a7", record.Валюта.UnigueID.UGuid},
                    {"col_a8", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }
    }
    
    
    
    public class РозрахункиЗПостачальниками_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public РозрахункиЗПостачальниками_Залишки_TablePart() : base(Config.Kernel, "tab_b43",
              ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
        
        public const string TABLE = "tab_b43";
        
        public const string Період = "col_a1";
        public const string Контрагент = "col_a2";
        public const string Валюта = "col_a3";
        public const string Сума = "col_a4";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a2"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a3"]),
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Контрагент.UnigueID.UGuid},
                    {"col_a3", record.Валюта.UnigueID.UGuid},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }            
    }
    
    
    public class РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart : RegisterAccumulationTablePart
    {
        public РозрахункиЗПостачальниками_ЗалишкиТаОбороти_TablePart() : base(Config.Kernel, "tab_b45",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
        
        public const string TABLE = "tab_b45";
        
        public const string Період = "col_a1";
        public const string Контрагент = "col_a2";
        public const string Валюта = "col_a3";
        public const string СумаПрихід = "col_a4";
        public const string СумаРозхід = "col_a5";
        public const string СумаЗалишок = "col_a6";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a2"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a3"]),
                    СумаПрихід = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    СумаРозхід = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    СумаЗалишок = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Контрагент.UnigueID.UGuid},
                    {"col_a3", record.Валюта.UnigueID.UGuid},
                    {"col_a4", record.СумаПрихід},
                    {"col_a5", record.СумаРозхід},
                    {"col_a6", record.СумаЗалишок},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal СумаПрихід { get; set; } = 0;
            public decimal СумаРозхід { get; set; } = 0;
            public decimal СумаЗалишок { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "РухКоштів"
    public static class РухКоштів_Const
    {
        public const string FULLNAME = "РухКоштів";
        public const string TABLE = "tab_a78";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a44", "tab_a48", "tab_a83", ];
		    public static readonly string[] AllowDocumentSpendType = ["ПрихіднийКасовийОрдер", "РозхіднийКасовийОрдер", "ВведенняЗалишків", ];
        
        public const string Організація = "col_a1";
        public const string Каса = "col_a2";
        public const string Валюта = "col_a3";
        public const string Сума = "col_a4";
    }
	
    public class РухКоштів_RecordsSet : RegisterAccumulationRecordsSet
    {
        public РухКоштів_RecordsSet() : base(Config.Kernel, "tab_a78", "РухКоштів",
             ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Організації_Pointer.GetJoin(QuerySelect, 
                  РухКоштів_Const.Організація, "tab_a78", "join_tab_1", "Організація");
                Довідники.Каси_Pointer.GetJoin(QuerySelect, 
                  РухКоштів_Const.Каса, "tab_a78", "join_tab_2", "Каса");
                Довідники.Валюти_Pointer.GetJoin(QuerySelect, 
                  РухКоштів_Const.Валюта, "tab_a78", "join_tab_3", "Валюта");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ПрихіднийКасовийОрдер_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.РозхіднийКасовийОрдер_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.ВведенняЗалишків_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in РухКоштів_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a78", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a1"]),
                    Каса = new Довідники.Каси_Pointer(fieldValue["col_a2"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a3"]),
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Організація.Name = ItemValue["Організація"];
                        record.Каса.Name = ItemValue["Каса"];
                        record.Валюта.Name = ItemValue["Валюта"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.Організація.UnigueID.UGuid},
                    {"col_a2", record.Каса.UnigueID.UGuid},
                    {"col_a3", record.Валюта.UnigueID.UGuid},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }
    }
    
    
    
    public class РухКоштів_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public РухКоштів_Залишки_TablePart() : base(Config.Kernel, "tab_b46",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", ]) { }
        
        public const string TABLE = "tab_b46";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string Каса = "col_a3";
        public const string Валюта = "col_a4";
        public const string Сума = "col_a5";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    Каса = new Довідники.Каси_Pointer(fieldValue["col_a3"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a4"]),
                    Сума = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.Каса.UnigueID.UGuid},
                    {"col_a4", record.Валюта.UnigueID.UGuid},
                    {"col_a5", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }            
    }
    
    
    public class РухКоштів_ЗалишкиТаОбороти_TablePart : RegisterAccumulationTablePart
    {
        public РухКоштів_ЗалишкиТаОбороти_TablePart() : base(Config.Kernel, "tab_b48",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ]) { }
        
        public const string TABLE = "tab_b48";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string Каса = "col_a3";
        public const string Валюта = "col_a4";
        public const string СумаПрихід = "col_a5";
        public const string СумаРозхід = "col_a6";
        public const string СумаЗалишок = "col_a7";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    Каса = new Довідники.Каси_Pointer(fieldValue["col_a3"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a4"]),
                    СумаПрихід = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    СумаРозхід = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    СумаЗалишок = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.Каса.UnigueID.UGuid},
                    {"col_a4", record.Валюта.UnigueID.UGuid},
                    {"col_a5", record.СумаПрихід},
                    {"col_a6", record.СумаРозхід},
                    {"col_a7", record.СумаЗалишок},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal СумаПрихід { get; set; } = 0;
            public decimal СумаРозхід { get; set; } = 0;
            public decimal СумаЗалишок { get; set; } = 0;
            
        }            
    }
    
    
    public class РухКоштів_Підсумки_TablePart : RegisterAccumulationTablePart
    {
        public РухКоштів_Підсумки_TablePart() : base(Config.Kernel, "tab_a99",
              ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
        
        public const string TABLE = "tab_a99";
        
        public const string Організація = "col_a1";
        public const string Каса = "col_a2";
        public const string Валюта = "col_a3";
        public const string Сума = "col_a4";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a1"]),
                    Каса = new Довідники.Каси_Pointer(fieldValue["col_a2"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a3"]),
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Організація.UnigueID.UGuid},
                    {"col_a2", record.Каса.UnigueID.UGuid},
                    {"col_a3", record.Валюта.UnigueID.UGuid},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Каси_Pointer Каса { get; set; } = new Довідники.Каси_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "ПартіїТоварів"
    public static class ПартіїТоварів_Const
    {
        public const string FULLNAME = "ПартіїТоварів";
        public const string TABLE = "tab_a79";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a32", "tab_a36", "tab_a31", "tab_a51", "tab_a53", "tab_a83", "tab_a94", "tab_b07", ];
		    public static readonly string[] AllowDocumentSpendType = ["ПоступленняТоварівТаПослуг", "РеалізаціяТоварівТаПослуг", "ПереміщенняТоварів", "ПоверненняТоварівПостачальнику", "ПоверненняТоварівВідКлієнта", "ВведенняЗалишків", "ПсуванняТоварів", "ВнутрішнєСпоживанняТоварів", ];
        
        public const string Організація = "col_a1";
        public const string ПартіяТоварівКомпозит = "col_a9";
        public const string Номенклатура = "col_a5";
        public const string ХарактеристикаНоменклатури = "col_a7";
        public const string Серія = "col_a8";
        public const string Склад = "col_a2";
        public const string Рядок = "col_a6";
        public const string Кількість = "col_a3";
        public const string Собівартість = "col_a4";
        public const string СписанаСобівартість = "col_b5";
    }
	
    public class ПартіїТоварів_RecordsSet : RegisterAccumulationRecordsSet
    {
        public ПартіїТоварів_RecordsSet() : base(Config.Kernel, "tab_a79", "ПартіїТоварів",
             ["col_a1", "col_a9", "col_a5", "col_a7", "col_a8", "col_a2", "col_a6", "col_a3", "col_a4", "col_b5", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Організації_Pointer.GetJoin(QuerySelect, 
                  ПартіїТоварів_Const.Організація, "tab_a79", "join_tab_1", "Організація");
                Довідники.ПартіяТоварівКомпозит_Pointer.GetJoin(QuerySelect, 
                  ПартіїТоварів_Const.ПартіяТоварівКомпозит, "tab_a79", "join_tab_2", "ПартіяТоварівКомпозит");
                Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ПартіїТоварів_Const.Номенклатура, "tab_a79", "join_tab_3", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ПартіїТоварів_Const.ХарактеристикаНоменклатури, "tab_a79", "join_tab_4", "ХарактеристикаНоменклатури");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ПартіїТоварів_Const.Серія, "tab_a79", "join_tab_5", "Серія");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  ПартіїТоварів_Const.Склад, "tab_a79", "join_tab_6", "Склад");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ПоступленняТоварівТаПослуг_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.РеалізаціяТоварівТаПослуг_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.ПереміщенняТоварів_Const.Назва} WHEN join_doc_4.uid IS NOT NULL THEN join_doc_4.{Документи.ПоверненняТоварівПостачальнику_Const.Назва} WHEN join_doc_5.uid IS NOT NULL THEN join_doc_5.{Документи.ПоверненняТоварівВідКлієнта_Const.Назва} WHEN join_doc_6.uid IS NOT NULL THEN join_doc_6.{Документи.ВведенняЗалишків_Const.Назва} WHEN join_doc_7.uid IS NOT NULL THEN join_doc_7.{Документи.ПсуванняТоварів_Const.Назва} WHEN join_doc_8.uid IS NOT NULL THEN join_doc_8.{Документи.ВнутрішнєСпоживанняТоварів_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in ПартіїТоварів_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a79", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a1"]),
                    ПартіяТоварівКомпозит = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a9"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a5"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a7"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a8"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a2"]),
                    Рядок = (fieldValue["col_a6"] != DBNull.Value) ? (int)fieldValue["col_a6"] : 0,
                    Кількість = (fieldValue["col_a3"] != DBNull.Value) ? (decimal)fieldValue["col_a3"] : 0,
                    Собівартість = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    СписанаСобівартість = (fieldValue["col_b5"] != DBNull.Value) ? (decimal)fieldValue["col_b5"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Організація.Name = ItemValue["Організація"];
                        record.ПартіяТоварівКомпозит.Name = ItemValue["ПартіяТоварівКомпозит"];
                        record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.Серія.Name = ItemValue["Серія"];
                        record.Склад.Name = ItemValue["Склад"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.Організація.UnigueID.UGuid},
                    {"col_a9", record.ПартіяТоварівКомпозит.UnigueID.UGuid},
                    {"col_a5", record.Номенклатура.UnigueID.UGuid},
                    {"col_a7", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a8", record.Серія.UnigueID.UGuid},
                    {"col_a2", record.Склад.UnigueID.UGuid},
                    {"col_a6", record.Рядок},
                    {"col_a3", record.Кількість},
                    {"col_a4", record.Собівартість},
                    {"col_b5", record.СписанаСобівартість},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.ПартіяТоварівКомпозит_Pointer ПартіяТоварівКомпозит { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public int Рядок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Собівартість { get; set; } = 0;
            public decimal СписанаСобівартість { get; set; } = 0;
            
        }
    }
    
    
    
    public class ПартіїТоварів_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public ПартіїТоварів_Залишки_TablePart() : base(Config.Kernel, "tab_b49",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_b1", "col_a8", "col_a9", ]) { }
        
        public const string TABLE = "tab_b49";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string ПартіяТоварівКомпозит = "col_a3";
        public const string Номенклатура = "col_a4";
        public const string ХарактеристикаНоменклатури = "col_a5";
        public const string Серія = "col_a6";
        public const string Склад = "col_a7";
        public const string Рядок = "col_b1";
        public const string Кількість = "col_a8";
        public const string Собівартість = "col_a9";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    ПартіяТоварівКомпозит = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a3"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a4"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a5"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a6"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a7"]),
                    Рядок = (fieldValue["col_b1"] != DBNull.Value) ? (int)fieldValue["col_b1"] : 0,
                    Кількість = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Собівартість = (fieldValue["col_a9"] != DBNull.Value) ? (decimal)fieldValue["col_a9"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.ПартіяТоварівКомпозит.UnigueID.UGuid},
                    {"col_a4", record.Номенклатура.UnigueID.UGuid},
                    {"col_a5", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a6", record.Серія.UnigueID.UGuid},
                    {"col_a7", record.Склад.UnigueID.UGuid},
                    {"col_b1", record.Рядок},
                    {"col_a8", record.Кількість},
                    {"col_a9", record.Собівартість},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.ПартіяТоварівКомпозит_Pointer ПартіяТоварівКомпозит { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public int Рядок { get; set; } = 0;
            public decimal Кількість { get; set; } = 0;
            public decimal Собівартість { get; set; } = 0;
            
        }            
    }
    
    
    public class ПартіїТоварів_ЗалишкиТаОбороти_TablePart : RegisterAccumulationTablePart
    {
        public ПартіїТоварів_ЗалишкиТаОбороти_TablePart() : base(Config.Kernel, "tab_b25",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_b5", "col_a8", "col_a9", "col_b1", "col_b2", "col_b3", "col_b4", ]) { }
        
        public const string TABLE = "tab_b25";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string ПартіяТоварівКомпозит = "col_a3";
        public const string Номенклатура = "col_a4";
        public const string ХарактеристикаНоменклатури = "col_a5";
        public const string Серія = "col_a6";
        public const string Склад = "col_a7";
        public const string Рядок = "col_b5";
        public const string КількістьПрихід = "col_a8";
        public const string КількістьРозхід = "col_a9";
        public const string КількістьЗалишок = "col_b1";
        public const string СобівартістьПрихід = "col_b2";
        public const string СобівартістьРозхід = "col_b3";
        public const string СобівартістьЗалишок = "col_b4";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    ПартіяТоварівКомпозит = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a3"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a4"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a5"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a6"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a7"]),
                    Рядок = (fieldValue["col_b5"] != DBNull.Value) ? (int)fieldValue["col_b5"] : 0,
                    КількістьПрихід = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    КількістьРозхід = (fieldValue["col_a9"] != DBNull.Value) ? (decimal)fieldValue["col_a9"] : 0,
                    КількістьЗалишок = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    СобівартістьПрихід = (fieldValue["col_b2"] != DBNull.Value) ? (decimal)fieldValue["col_b2"] : 0,
                    СобівартістьРозхід = (fieldValue["col_b3"] != DBNull.Value) ? (decimal)fieldValue["col_b3"] : 0,
                    СобівартістьЗалишок = (fieldValue["col_b4"] != DBNull.Value) ? (decimal)fieldValue["col_b4"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.ПартіяТоварівКомпозит.UnigueID.UGuid},
                    {"col_a4", record.Номенклатура.UnigueID.UGuid},
                    {"col_a5", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a6", record.Серія.UnigueID.UGuid},
                    {"col_a7", record.Склад.UnigueID.UGuid},
                    {"col_b5", record.Рядок},
                    {"col_a8", record.КількістьПрихід},
                    {"col_a9", record.КількістьРозхід},
                    {"col_b1", record.КількістьЗалишок},
                    {"col_b2", record.СобівартістьПрихід},
                    {"col_b3", record.СобівартістьРозхід},
                    {"col_b4", record.СобівартістьЗалишок},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.ПартіяТоварівКомпозит_Pointer ПартіяТоварівКомпозит { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public int Рядок { get; set; } = 0;
            public decimal КількістьПрихід { get; set; } = 0;
            public decimal КількістьРозхід { get; set; } = 0;
            public decimal КількістьЗалишок { get; set; } = 0;
            public decimal СобівартістьПрихід { get; set; } = 0;
            public decimal СобівартістьРозхід { get; set; } = 0;
            public decimal СобівартістьЗалишок { get; set; } = 0;
            
        }            
    }
    
    
    public class ПартіїТоварів_Підсумки_TablePart : RegisterAccumulationTablePart
    {
        public ПартіїТоварів_Підсумки_TablePart() : base(Config.Kernel, "tab_a62",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a8", ]) { }
        
        public const string TABLE = "tab_a62";
        
        public const string Організація = "col_a1";
        public const string ПартіяТоварівКомпозит = "col_a2";
        public const string Номенклатура = "col_a3";
        public const string ХарактеристикаНоменклатури = "col_a4";
        public const string Серія = "col_a5";
        public const string Склад = "col_a6";
        public const string Кількість = "col_a8";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a1"]),
                    ПартіяТоварівКомпозит = new Довідники.ПартіяТоварівКомпозит_Pointer(fieldValue["col_a2"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a3"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a4"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a5"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a6"]),
                    Кількість = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Організація.UnigueID.UGuid},
                    {"col_a2", record.ПартіяТоварівКомпозит.UnigueID.UGuid},
                    {"col_a3", record.Номенклатура.UnigueID.UGuid},
                    {"col_a4", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a5", record.Серія.UnigueID.UGuid},
                    {"col_a6", record.Склад.UnigueID.UGuid},
                    {"col_a8", record.Кількість},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.ПартіяТоварівКомпозит_Pointer ПартіяТоварівКомпозит { get; set; } = new Довідники.ПартіяТоварівКомпозит_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public decimal Кількість { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "Продажі"
    public static class Продажі_Const
    {
        public const string FULLNAME = "Продажі";
        public const string TABLE = "tab_a66";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a36", "tab_a53", "tab_a81", ];
		    public static readonly string[] AllowDocumentSpendType = ["РеалізаціяТоварівТаПослуг", "ПоверненняТоварівВідКлієнта", "АктВиконанихРобіт", ];
        
        public const string Організація = "col_a5";
        public const string Склад = "col_a6";
        public const string Контрагент = "col_a7";
        public const string Договір = "col_b3";
        public const string Номенклатура = "col_a1";
        public const string ХарактеристикаНоменклатури = "col_a2";
        public const string Кількість = "col_a8";
        public const string Сума = "col_b1";
        public const string Дохід = "col_a4";
        public const string Собівартість = "col_a3";
    }
	
    public class Продажі_RecordsSet : RegisterAccumulationRecordsSet
    {
        public Продажі_RecordsSet() : base(Config.Kernel, "tab_a66", "Продажі",
             ["col_a5", "col_a6", "col_a7", "col_b3", "col_a1", "col_a2", "col_a8", "col_b1", "col_a4", "col_a3", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Організації_Pointer.GetJoin(QuerySelect, 
                  Продажі_Const.Організація, "tab_a66", "join_tab_1", "Організація");
                Довідники.Склади_Pointer.GetJoin(QuerySelect, 
                  Продажі_Const.Склад, "tab_a66", "join_tab_2", "Склад");
                Довідники.Контрагенти_Pointer.GetJoin(QuerySelect, 
                  Продажі_Const.Контрагент, "tab_a66", "join_tab_3", "Контрагент");
                Довідники.ДоговориКонтрагентів_Pointer.GetJoin(QuerySelect, 
                  Продажі_Const.Договір, "tab_a66", "join_tab_4", "Договір");
                Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  Продажі_Const.Номенклатура, "tab_a66", "join_tab_5", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  Продажі_Const.ХарактеристикаНоменклатури, "tab_a66", "join_tab_6", "ХарактеристикаНоменклатури");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.РеалізаціяТоварівТаПослуг_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.ПоверненняТоварівВідКлієнта_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.АктВиконанихРобіт_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in Продажі_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_a66", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a5"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a6"]),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a7"]),
                    Договір = new Довідники.ДоговориКонтрагентів_Pointer(fieldValue["col_b3"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a1"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a2"]),
                    Кількість = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Сума = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    Дохід = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    Собівартість = (fieldValue["col_a3"] != DBNull.Value) ? (decimal)fieldValue["col_a3"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Організація.Name = ItemValue["Організація"];
                        record.Склад.Name = ItemValue["Склад"];
                        record.Контрагент.Name = ItemValue["Контрагент"];
                        record.Договір.Name = ItemValue["Договір"];
                        record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a5", record.Організація.UnigueID.UGuid},
                    {"col_a6", record.Склад.UnigueID.UGuid},
                    {"col_a7", record.Контрагент.UnigueID.UGuid},
                    {"col_b3", record.Договір.UnigueID.UGuid},
                    {"col_a1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a8", record.Кількість},
                    {"col_b1", record.Сума},
                    {"col_a4", record.Дохід},
                    {"col_a3", record.Собівартість},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public decimal Кількість { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Дохід { get; set; } = 0;
            public decimal Собівартість { get; set; } = 0;
            
        }
    }
    
    
    
    public class Продажі_Обороти_TablePart : RegisterAccumulationTablePart
    {
        public Продажі_Обороти_TablePart() : base(Config.Kernel, "tab_a70",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", "col_b1", "col_b2", ]) { }
        
        public const string TABLE = "tab_a70";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string Склад = "col_a3";
        public const string Контрагент = "col_a4";
        public const string Договір = "col_a5";
        public const string Номенклатура = "col_a6";
        public const string ХарактеристикаНоменклатури = "col_a7";
        public const string Кількість = "col_a8";
        public const string Сума = "col_a9";
        public const string Дохід = "col_b1";
        public const string Собівартість = "col_b2";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    Склад = new Довідники.Склади_Pointer(fieldValue["col_a3"]),
                    Контрагент = new Довідники.Контрагенти_Pointer(fieldValue["col_a4"]),
                    Договір = new Довідники.ДоговориКонтрагентів_Pointer(fieldValue["col_a5"]),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a6"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a7"]),
                    Кількість = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    Сума = (fieldValue["col_a9"] != DBNull.Value) ? (decimal)fieldValue["col_a9"] : 0,
                    Дохід = (fieldValue["col_b1"] != DBNull.Value) ? (decimal)fieldValue["col_b1"] : 0,
                    Собівартість = (fieldValue["col_b2"] != DBNull.Value) ? (decimal)fieldValue["col_b2"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.Склад.UnigueID.UGuid},
                    {"col_a4", record.Контрагент.UnigueID.UGuid},
                    {"col_a5", record.Договір.UnigueID.UGuid},
                    {"col_a6", record.Номенклатура.UnigueID.UGuid},
                    {"col_a7", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a8", record.Кількість},
                    {"col_a9", record.Сума},
                    {"col_b1", record.Дохід},
                    {"col_b2", record.Собівартість},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.Склади_Pointer Склад { get; set; } = new Довідники.Склади_Pointer();
            public Довідники.Контрагенти_Pointer Контрагент { get; set; } = new Довідники.Контрагенти_Pointer();
            public Довідники.ДоговориКонтрагентів_Pointer Договір { get; set; } = new Довідники.ДоговориКонтрагентів_Pointer();
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public decimal Кількість { get; set; } = 0;
            public decimal Сума { get; set; } = 0;
            public decimal Дохід { get; set; } = 0;
            public decimal Собівартість { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "ТовариВКомірках"
    public static class ТовариВКомірках_Const
    {
        public const string FULLNAME = "ТовариВКомірках";
        public const string TABLE = "tab_b01";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_a64", "tab_b09", "tab_b27", ];
		    public static readonly string[] AllowDocumentSpendType = ["РозміщенняТоварівНаСкладі", "ПереміщенняТоварівНаСкладі", "ЗбіркаТоварівНаСкладі", ];
        
        public const string Номенклатура = "col_a1";
        public const string ХарактеристикаНоменклатури = "col_a2";
        public const string Пакування = "col_a3";
        public const string Комірка = "col_a4";
        public const string Серія = "col_a5";
        public const string ВНаявності = "col_a6";
    }
	
    public class ТовариВКомірках_RecordsSet : RegisterAccumulationRecordsSet
    {
        public ТовариВКомірках_RecordsSet() : base(Config.Kernel, "tab_b01", "ТовариВКомірках",
             ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Номенклатура_Pointer.GetJoin(QuerySelect, 
                  ТовариВКомірках_Const.Номенклатура, "tab_b01", "join_tab_1", "Номенклатура");
                Довідники.ХарактеристикиНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ТовариВКомірках_Const.ХарактеристикаНоменклатури, "tab_b01", "join_tab_2", "ХарактеристикаНоменклатури");
                Довідники.ПакуванняОдиниціВиміру_Pointer.GetJoin(QuerySelect, 
                  ТовариВКомірках_Const.Пакування, "tab_b01", "join_tab_3", "Пакування");
                Довідники.СкладськіКомірки_Pointer.GetJoin(QuerySelect, 
                  ТовариВКомірках_Const.Комірка, "tab_b01", "join_tab_4", "Комірка");
                Довідники.СеріїНоменклатури_Pointer.GetJoin(QuerySelect, 
                  ТовариВКомірках_Const.Серія, "tab_b01", "join_tab_5", "Серія");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.РозміщенняТоварівНаСкладі_Const.Назва} WHEN join_doc_2.uid IS NOT NULL THEN join_doc_2.{Документи.ПереміщенняТоварівНаСкладі_Const.Назва} WHEN join_doc_3.uid IS NOT NULL THEN join_doc_3.{Документи.ЗбіркаТоварівНаСкладі_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in ТовариВКомірках_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_b01", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a1"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a2"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a3"]),
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a4"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a5"]),
                    ВНаявності = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Номенклатура.Name = ItemValue["Номенклатура"];
                        record.ХарактеристикаНоменклатури.Name = ItemValue["ХарактеристикаНоменклатури"];
                        record.Пакування.Name = ItemValue["Пакування"];
                        record.Комірка.Name = ItemValue["Комірка"];
                        record.Серія.Name = ItemValue["Серія"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a3", record.Пакування.UnigueID.UGuid},
                    {"col_a4", record.Комірка.UnigueID.UGuid},
                    {"col_a5", record.Серія.UnigueID.UGuid},
                    {"col_a6", record.ВНаявності},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            
        }
    }
    
    
    
    public class ТовариВКомірках_ЗалишкиТаОбороти_TablePart : RegisterAccumulationTablePart
    {
        public ТовариВКомірках_ЗалишкиТаОбороти_TablePart() : base(Config.Kernel, "tab_b33",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", "col_a8", "col_a9", ]) { }
        
        public const string TABLE = "tab_b33";
        
        public const string Період = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Пакування = "col_a4";
        public const string Комірка = "col_a5";
        public const string Серія = "col_a6";
        public const string ВНаявностіПрихід = "col_a7";
        public const string ВНаявностіРозхід = "col_a8";
        public const string ВНаявностіЗалишок = "col_a9";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a4"]),
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a5"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a6"]),
                    ВНаявностіПрихід = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    ВНаявностіРозхід = (fieldValue["col_a8"] != DBNull.Value) ? (decimal)fieldValue["col_a8"] : 0,
                    ВНаявностіЗалишок = (fieldValue["col_a9"] != DBNull.Value) ? (decimal)fieldValue["col_a9"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Пакування.UnigueID.UGuid},
                    {"col_a5", record.Комірка.UnigueID.UGuid},
                    {"col_a6", record.Серія.UnigueID.UGuid},
                    {"col_a7", record.ВНаявностіПрихід},
                    {"col_a8", record.ВНаявностіРозхід},
                    {"col_a9", record.ВНаявностіЗалишок},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявностіПрихід { get; set; } = 0;
            public decimal ВНаявностіРозхід { get; set; } = 0;
            public decimal ВНаявностіЗалишок { get; set; } = 0;
            
        }            
    }
    
    
    public class ТовариВКомірках_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public ТовариВКомірках_Залишки_TablePart() : base(Config.Kernel, "tab_b05",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ]) { }
        
        public const string TABLE = "tab_b05";
        
        public const string Період = "col_a1";
        public const string Номенклатура = "col_a2";
        public const string ХарактеристикаНоменклатури = "col_a3";
        public const string Пакування = "col_a4";
        public const string Комірка = "col_a5";
        public const string Серія = "col_a6";
        public const string ВНаявності = "col_a7";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a2"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a3"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a4"]),
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a5"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a6"]),
                    ВНаявності = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Номенклатура.UnigueID.UGuid},
                    {"col_a3", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a4", record.Пакування.UnigueID.UGuid},
                    {"col_a5", record.Комірка.UnigueID.UGuid},
                    {"col_a6", record.Серія.UnigueID.UGuid},
                    {"col_a7", record.ВНаявності},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            
        }            
    }
    
    
    public class ТовариВКомірках_Підсумки_TablePart : RegisterAccumulationTablePart
    {
        public ТовариВКомірках_Підсумки_TablePart() : base(Config.Kernel, "tab_a98",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", ]) { }
        
        public const string TABLE = "tab_a98";
        
        public const string Номенклатура = "col_a1";
        public const string ХарактеристикаНоменклатури = "col_a2";
        public const string Пакування = "col_a3";
        public const string Комірка = "col_a4";
        public const string Серія = "col_a5";
        public const string ВНаявності = "col_a6";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Номенклатура = new Довідники.Номенклатура_Pointer(fieldValue["col_a1"]),
                    ХарактеристикаНоменклатури = new Довідники.ХарактеристикиНоменклатури_Pointer(fieldValue["col_a2"]),
                    Пакування = new Довідники.ПакуванняОдиниціВиміру_Pointer(fieldValue["col_a3"]),
                    Комірка = new Довідники.СкладськіКомірки_Pointer(fieldValue["col_a4"]),
                    Серія = new Довідники.СеріїНоменклатури_Pointer(fieldValue["col_a5"]),
                    ВНаявності = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Номенклатура.UnigueID.UGuid},
                    {"col_a2", record.ХарактеристикаНоменклатури.UnigueID.UGuid},
                    {"col_a3", record.Пакування.UnigueID.UGuid},
                    {"col_a4", record.Комірка.UnigueID.UGuid},
                    {"col_a5", record.Серія.UnigueID.UGuid},
                    {"col_a6", record.ВНаявності},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public Довідники.Номенклатура_Pointer Номенклатура { get; set; } = new Довідники.Номенклатура_Pointer();
            public Довідники.ХарактеристикиНоменклатури_Pointer ХарактеристикаНоменклатури { get; set; } = new Довідники.ХарактеристикиНоменклатури_Pointer();
            public Довідники.ПакуванняОдиниціВиміру_Pointer Пакування { get; set; } = new Довідники.ПакуванняОдиниціВиміру_Pointer();
            public Довідники.СкладськіКомірки_Pointer Комірка { get; set; } = new Довідники.СкладськіКомірки_Pointer();
            public Довідники.СеріїНоменклатури_Pointer Серія { get; set; } = new Довідники.СеріїНоменклатури_Pointer();
            public decimal ВНаявності { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
    #region REGISTER "РухКоштівККМ"
    public static class РухКоштівККМ_Const
    {
        public const string FULLNAME = "РухКоштів ККМ";
        public const string TABLE = "tab_b53";
		    public static readonly string[] AllowDocumentSpendTable = ["tab_b51", ];
		    public static readonly string[] AllowDocumentSpendType = ["ЧекККМ", ];
        
        public const string Організація = "col_a1";
        public const string КасаККМ = "col_a2";
        public const string Валюта = "col_a3";
        public const string Сума = "col_a4";
    }
	
    public class РухКоштівККМ_RecordsSet : RegisterAccumulationRecordsSet
    {
        public РухКоштівККМ_RecordsSet() : base(Config.Kernel, "tab_b53", "РухКоштівККМ",
             ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
		
        public List<Record> Records { get; set; } = [];
        
        public void FillJoin(string[]? orderFields = null, bool docname_required = true)
        {
            QuerySelect.Clear();

            if (orderFields!=null)
              foreach(string field in orderFields)
                QuerySelect.Order.Add(field, SelectOrder.ASC);

            Довідники.Організації_Pointer.GetJoin(QuerySelect, 
                  РухКоштівККМ_Const.Організація, "tab_b53", "join_tab_1", "Організація");
                Довідники.КасиККМ_Pointer.GetJoin(QuerySelect, 
                  РухКоштівККМ_Const.КасаККМ, "tab_b53", "join_tab_2", "КасаККМ");
                Довідники.Валюти_Pointer.GetJoin(QuerySelect, 
                  РухКоштівККМ_Const.Валюта, "tab_b53", "join_tab_3", "Валюта");
                

            //Назва документу
            if (docname_required)
            {
              string query_case = $"CASE WHEN join_doc_1.uid IS NOT NULL THEN join_doc_1.{Документи.ЧекККМ_Const.Назва} END";
              QuerySelect.FieldAndAlias.Add(new ValueName<string>(query_case, "docname"));

              int i = 0;
              foreach (string table in РухКоштівККМ_Const.AllowDocumentSpendTable)
                  QuerySelect.Joins.Add(new Join(table, "owner", "tab_b53", $"join_doc_{++i}"));
            }
        }

        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Period = DateTime.Parse(fieldValue["period"]?.ToString() ?? DateTime.MinValue.ToString()),
                    Income = (bool)fieldValue["income"],
                    Owner = (Guid)fieldValue["owner"],
                    OwnerType = fieldValue["ownertype"] != DBNull.Value ? (NameAndText)fieldValue["ownertype"] : new NameAndText(),
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a1"]),
                    КасаККМ = new Довідники.КасиККМ_Pointer(fieldValue["col_a2"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a3"]),
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
                
                if (JoinValue.TryGetValue(record.UID.ToString(), out var ItemValue))
                {
                    //record.JoinItemValue = ItemValue;
                    if (ItemValue.TryGetValue("docname", out var ownerName)) record.OwnerName = ownerName;
                    record.Організація.Name = ItemValue["Організація"];
                        record.КасаККМ.Name = ItemValue["КасаККМ"];
                        record.Валюта.Name = ItemValue["Валюта"];
                        
                }
                
            }
            base.BaseClear();
        }
        
        public async ValueTask Save(DateTime period, UuidAndText owner) 
        {
            await base.BaseBeginTransaction();
            await base.BaseSelectPeriodForOwner(owner.Uuid, period);
            await base.BaseDelete(owner.Uuid);
            foreach (Record record in Records)
            {
                record.Period = period;
                record.Owner = owner.Uuid;
                record.OwnerType = owner.GetNameAndText();
                Dictionary<string, object> fieldValue = new()
                {
                    {"col_a1", record.Організація.UnigueID.UGuid},
                    {"col_a2", record.КасаККМ.UnigueID.UGuid},
                    {"col_a3", record.Валюта.UnigueID.UGuid},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, record.Period, record.Income, record.Owner, record.OwnerType, fieldValue);
            }
            await base.BaseTrigerAdd(period, owner.Uuid);
            await base.BaseCommitTransaction();
        }

        public async ValueTask Delete(Guid owner)
        {
            await base.BaseSelectPeriodForOwner(owner);
            await base.BaseDelete(owner);
        }
        
        public class Record : RegisterAccumulationRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.КасиККМ_Pointer КасаККМ { get; set; } = new Довідники.КасиККМ_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }
    }
    
    
    
    public class РухКоштівККМ_Підсумки_TablePart : RegisterAccumulationTablePart
    {
        public РухКоштівККМ_Підсумки_TablePart() : base(Config.Kernel, "tab_b56",
              ["col_a1", "col_a2", "col_a3", "col_a4", ]) { }
        
        public const string TABLE = "tab_b56";
        
        public const string Організація = "col_a1";
        public const string КасаККМ = "col_a2";
        public const string Валюта = "col_a3";
        public const string Сума = "col_a4";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a1"]),
                    КасаККМ = new Довідники.КасиККМ_Pointer(fieldValue["col_a2"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a3"]),
                    Сума = (fieldValue["col_a4"] != DBNull.Value) ? (decimal)fieldValue["col_a4"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Організація.UnigueID.UGuid},
                    {"col_a2", record.КасаККМ.UnigueID.UGuid},
                    {"col_a3", record.Валюта.UnigueID.UGuid},
                    {"col_a4", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.КасиККМ_Pointer КасаККМ { get; set; } = new Довідники.КасиККМ_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }            
    }
    
    
    public class РухКоштівККМ_ЗалишкиТаОбороти_TablePart : RegisterAccumulationTablePart
    {
        public РухКоштівККМ_ЗалишкиТаОбороти_TablePart() : base(Config.Kernel, "tab_b55",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", "col_a6", "col_a7", ]) { }
        
        public const string TABLE = "tab_b55";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string КасаККМ = "col_a3";
        public const string Валюта = "col_a4";
        public const string СумаПрихід = "col_a5";
        public const string СумаРозхід = "col_a6";
        public const string СумаЗалишок = "col_a7";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    КасаККМ = new Довідники.КасиККМ_Pointer(fieldValue["col_a3"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a4"]),
                    СумаПрихід = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    СумаРозхід = (fieldValue["col_a6"] != DBNull.Value) ? (decimal)fieldValue["col_a6"] : 0,
                    СумаЗалишок = (fieldValue["col_a7"] != DBNull.Value) ? (decimal)fieldValue["col_a7"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.КасаККМ.UnigueID.UGuid},
                    {"col_a4", record.Валюта.UnigueID.UGuid},
                    {"col_a5", record.СумаПрихід},
                    {"col_a6", record.СумаРозхід},
                    {"col_a7", record.СумаЗалишок},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.КасиККМ_Pointer КасаККМ { get; set; } = new Довідники.КасиККМ_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal СумаПрихід { get; set; } = 0;
            public decimal СумаРозхід { get; set; } = 0;
            public decimal СумаЗалишок { get; set; } = 0;
            
        }            
    }
    
    
    public class РухКоштівККМ_Залишки_TablePart : RegisterAccumulationTablePart
    {
        public РухКоштівККМ_Залишки_TablePart() : base(Config.Kernel, "tab_b54",
              ["col_a1", "col_a2", "col_a3", "col_a4", "col_a5", ]) { }
        
        public const string TABLE = "tab_b54";
        
        public const string Період = "col_a1";
        public const string Організація = "col_a2";
        public const string КасаККМ = "col_a3";
        public const string Валюта = "col_a4";
        public const string Сума = "col_a5";
        public List<Record> Records { get; set; } = [];
    
        public async ValueTask Read()
        {
            Records.Clear();
            await base.BaseRead();
            foreach (Dictionary<string, object> fieldValue in base.FieldValueList) 
            {
                Record record = new Record()
                {
                    UID = (Guid)fieldValue["uid"],
                    Період = (fieldValue["col_a1"] != DBNull.Value) ? DateTime.Parse(fieldValue["col_a1"].ToString() ?? DateTime.MinValue.ToString()) : DateTime.MinValue,
                    Організація = new Довідники.Організації_Pointer(fieldValue["col_a2"]),
                    КасаККМ = new Довідники.КасиККМ_Pointer(fieldValue["col_a3"]),
                    Валюта = new Довідники.Валюти_Pointer(fieldValue["col_a4"]),
                    Сума = (fieldValue["col_a5"] != DBNull.Value) ? (decimal)fieldValue["col_a5"] : 0,
                    
                };
                Records.Add(record);
            }
            base.BaseClear();
        }
    
        public async ValueTask Save(bool clear_all_before_save /*= true*/) 
        {
            await base.BaseBeginTransaction();
            if (clear_all_before_save) await base.BaseDelete();
            foreach (Record record in Records)
            {
                Dictionary<string, object> fieldValue = new Dictionary<string, object>()
                {
                    {"col_a1", record.Період},
                    {"col_a2", record.Організація.UnigueID.UGuid},
                    {"col_a3", record.КасаККМ.UnigueID.UGuid},
                    {"col_a4", record.Валюта.UnigueID.UGuid},
                    {"col_a5", record.Сума},
                    
                };
                record.UID = await base.BaseSave(record.UID, fieldValue);
            }
            await base.BaseCommitTransaction();
        }
        
        public async ValueTask Remove(Record record)
        {
            await base.BaseRemove(record.UID);
            Records.RemoveAll((Record item) => record.UID == item.UID);
        }

        public async ValueTask RemoveAll(List<Record> records)
        {
            List<Guid> removeList = [];

            await base.BaseBeginTransaction();
            foreach (Record record in records)
            {
                removeList.Add(record.UID);
                await base.BaseRemove(record.UID);
            }
            await base.BaseCommitTransaction();

            Records.RemoveAll((Record item) => removeList.Exists((Guid uid) => uid == item.UID));
        }
    
        public async ValueTask Delete()
        {
            await base.BaseDelete();
        }
        
        public class Record : RegisterAccumulationTablePartRecord
        {
            public DateTime Період { get; set; } = DateTime.MinValue;
            public Довідники.Організації_Pointer Організація { get; set; } = new Довідники.Організації_Pointer();
            public Довідники.КасиККМ_Pointer КасаККМ { get; set; } = new Довідники.КасиККМ_Pointer();
            public Довідники.Валюти_Pointer Валюта { get; set; } = new Довідники.Валюти_Pointer();
            public decimal Сума { get; set; } = 0;
            
        }            
    }
    
    #endregion
  
}
  