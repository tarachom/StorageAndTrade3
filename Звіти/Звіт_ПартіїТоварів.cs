
/*
        Звіт_ПартіїТоварів.cs
*/

using Gtk;
using InterfaceGtk3;

using Константи = GeneratedCode.Константи;
using GeneratedCode.Довідники;
using GeneratedCode.РегістриНакопичення;

namespace StorageAndTrade
{
    class Звіт_ПартіїТоварів : ФормаЗвіт
    {
        #region Filters

        Організації_PointerControl Організація = new Організації_PointerControl();
        Номенклатура_MultiplePointerControl Номенклатура = new Номенклатура_MultiplePointerControl();
        Номенклатура_Папки_MultiplePointerControl Номенклатура_Папка = new Номенклатура_Папки_MultiplePointerControl() { Caption = "Номенклатура папка:" };
        ХарактеристикиНоменклатури_MultiplePointerControl ХарактеристикиНоменклатури = new ХарактеристикиНоменклатури_MultiplePointerControl();
        Склади_MultiplePointerControl Склад = new Склади_MultiplePointerControl();
        Склади_Папки_MultiplePointerControl Склад_Папка = new Склади_Папки_MultiplePointerControl() { Caption = "Склад папка:" };
        СеріїНоменклатури_PointerControl Серія = new СеріїНоменклатури_PointerControl();

        struct ПараметриФільтр
        {
            public DateTime ДатаПочатокПеріоду;
            public DateTime ДатаКінецьПеріоду;
            public Організації_Pointer Організація;
            public Номенклатура_Pointer[] Номенклатура;
            public Номенклатура_Папки_Pointer[] Номенклатура_Папка;
            public ХарактеристикиНоменклатури_Pointer[] ХарактеристикиНоменклатури;
            public Склади_Pointer[] Склад;
            public Склади_Папки_Pointer[] Склад_Папка;
            public СеріїНоменклатури_Pointer Серія;
        }

        #endregion

        public Звіт_ПартіїТоварів()
        {
            //Кнопки
            Button bOstatok = new Button("Залишки");
            bOstatok.Clicked += (object? sender, EventArgs args) => Залишки();
            HBoxTop.PackStart(bOstatok, false, false, 10);

            Button bOborot = new Button("Залишки та обороти");
            bOborot.Clicked += (object? sender, EventArgs args) => ЗалишкиТаОбороти();
            HBoxTop.PackStart(bOborot, false, false, 10);

            Button bDocuments = new Button("Документи");
            bDocuments.Clicked += (object? sender, EventArgs args) => Документи();
            HBoxTop.PackStart(bDocuments, false, false, 10);

            ShowAll();
        }

        #region Filters

        protected override void CreateContainer1(Box vBox)
        {
            //Організація
            CreateField(vBox, null, Організація);

            //Номенклатура
            CreateField(vBox, null, Номенклатура);

            //ХарактеристикиНоменклатури
            CreateField(vBox, null, ХарактеристикиНоменклатури);
            ХарактеристикиНоменклатури.BeforeClickOpenFunc = () => ХарактеристикиНоменклатури.Власник = Номенклатура.Pointer;

            //Склад
            CreateField(vBox, null, Склад);
        }

        protected override void CreateContainer2(Box vBox)
        {
            //Номенклатура папка
            CreateField(vBox, null, Номенклатура_Папка);

            //Склад папка
            CreateField(vBox, null, Склад_Папка);

            //Серія
            CreateField(vBox, null, Серія);
        }

        #endregion

        #region Period

        const string КлючНалаштуванняКористувача = "Звіт.ПартіїТоварів";

        public override async ValueTask SetValue()
        {
            await ФункціїНалаштуванняКористувача.ОтриматиПеріодДляЖурналу(КлючНалаштуванняКористувача, Період);
        }

        protected override void PeriodChanged()
        {
            ФункціїНалаштуванняКористувача.ЗаписатиПеріодДляЖурналу(КлючНалаштуванняКористувача, Період.Period.ToString(), Період.DateStart, Період.DateStop);
        }

        #endregion

        ПараметриФільтр СформуватиФільтр()
        {
            return new ПараметриФільтр()
            {
                ДатаПочатокПеріоду = Період.DateStartControl.ПочатокДня(),
                ДатаКінецьПеріоду = Період.DateStopControl.КінецьДня(),
                Організація = Організація.Pointer,
                Номенклатура = Номенклатура.GetPointers(),
                Номенклатура_Папка = Номенклатура_Папка.GetPointers(),
                ХарактеристикиНоменклатури = ХарактеристикиНоменклатури.GetPointers(),
                Склад = Склад.GetPointers(),
                Склад_Папка = Склад_Папка.GetPointers(),
                Серія = Серія.Pointer
            };
        }

        async ValueTask<string> ВідобразитиФільтр(string typeReport, ПараметриФільтр Фільтр)
        {
            string text = "";

            switch (typeReport)
            {
                case "Залишки":
                    {
                        text += "Без періоду; ";
                        break;
                    }
                case "ЗалишкиТаОбороти":
                case "Документи":
                    {
                        text += "З " +
                            Фільтр.ДатаПочатокПеріоду.ToString("dd.MM.yyyy") + " по " +
                            Фільтр.ДатаКінецьПеріоду.ToString("dd.MM.yyyy") + "; ";
                        break;
                    }
            }

            if (Фільтр.Номенклатура.Length > 0)
            {
                foreach (var item in Фільтр.Номенклатура)
                    await item.GetPresentation();

                text += "Номенклатура: " + string.Join(", ", Фільтр.Номенклатура.Select(x => x.Назва)) + "; ";
            }

            if (Фільтр.Номенклатура_Папка.Length > 0)
            {
                foreach (var item in Фільтр.Номенклатура_Папка)
                    await item.GetPresentation();

                text += "Номенклатура папка: " + string.Join(", ", Фільтр.Номенклатура_Папка.Select(x => x.Назва)) + "; ";
            }

            if (Фільтр.ХарактеристикиНоменклатури.Length > 0)
            {
                foreach (var item in Фільтр.ХарактеристикиНоменклатури)
                    await item.GetPresentation();

                text += "Характеристика: " + string.Join(", ", Фільтр.ХарактеристикиНоменклатури.Select(x => x.Назва)) + "; ";
            }

            if (Фільтр.Склад.Length > 0)
            {
                foreach (var item in Фільтр.Склад)
                    await item.GetPresentation();

                text += "Склад: " + string.Join(", ", Фільтр.Склад.Select(x => x.Назва)) + "; ";
            }

            if (Фільтр.Склад_Папка.Length > 0)
            {
                foreach (var item in Фільтр.Склад_Папка)
                    await item.GetPresentation();

                text += "Склад папка: " + string.Join(", ", Фільтр.Склад_Папка.Select(x => x.Назва)) + "; ";
            }

            if (!Фільтр.Серія.IsEmpty())
                text += "Серія: " + await Фільтр.Серія.GetPresentation() + "; ";

            return text;
        }

        async void Залишки()
        {
            ПараметриФільтр Фільтр = СформуватиФільтр();

            #region SELECT

            bool isExistParent = false;

            string query = $@"
SELECT 
    ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Організація} AS Організація, 
    Довідник_Організації.{Організації_Const.Назва} AS Організація_Назва, 
    ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ПартіяТоварівКомпозит} AS ПартіяТоварівКомпозит,
    Довідник_ПартіяТоварівКомпозит.{ПартіяТоварівКомпозит_Const.Назва} AS ПартіяТоварівКомпозит_Назва,
    Довідник_ПартіяТоварівКомпозит.{ПартіяТоварівКомпозит_Const.Дата} AS ПартіяТоварівКомпозит_Дата,
    ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Номенклатура} AS Номенклатура, 
    Довідник_Номенклатура.{Номенклатура_Const.Назва} AS Номенклатура_Назва, 
    ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури,
    Довідник_ХарактеристикиНоменклатури.{ХарактеристикиНоменклатури_Const.Назва} AS ХарактеристикаНоменклатури_Назва,
    ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Серія} AS Серія,
    Довідник_СеріїНоменклатури.{СеріїНоменклатури_Const.Номер} AS Серія_Номер,
    ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Склад} AS Склад,
    Довідник_Склади.{Склади_Const.Назва} AS Склад_Назва,
    ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Рядок} AS Рядок,
    Довідник_ПакуванняОдиниціВиміру.uid AS ОдиницяВиміру,
    Довідник_ПакуванняОдиниціВиміру.{ПакуванняОдиниціВиміру_Const.Назва} AS ОдиницяВиміру_Назва,
    ROUND(SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Кількість}), 2) AS Кількість,
    ROUND(SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Собівартість}), 2) AS Собівартість
FROM 
    {ПартіїТоварів_Залишки_TablePart.TABLE} AS ПартіїТоварів
    LEFT JOIN {Організації_Const.TABLE} AS Довідник_Організації ON Довідник_Організації.uid = 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Організація}
    LEFT JOIN {ПартіяТоварівКомпозит_Const.TABLE} AS Довідник_ПартіяТоварівКомпозит ON Довідник_ПартіяТоварівКомпозит.uid = 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ПартіяТоварівКомпозит}
    LEFT JOIN {Номенклатура_Const.TABLE} AS Довідник_Номенклатура ON Довідник_Номенклатура.uid = 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Номенклатура}
    LEFT JOIN {ХарактеристикиНоменклатури_Const.TABLE} AS Довідник_ХарактеристикиНоменклатури ON Довідник_ХарактеристикиНоменклатури.uid = 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ХарактеристикаНоменклатури}
    LEFT JOIN {СеріїНоменклатури_Const.TABLE} AS Довідник_СеріїНоменклатури ON Довідник_СеріїНоменклатури.uid = 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Серія}
    LEFT JOIN {Склади_Const.TABLE} AS Довідник_Склади ON Довідник_Склади.uid = 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Склад}
    LEFT JOIN {ПакуванняОдиниціВиміру_Const.TABLE} AS Довідник_ПакуванняОдиниціВиміру ON Довідник_ПакуванняОдиниціВиміру.uid = 
        Довідник_Номенклатура.{Номенклатура_Const.ОдиницяВиміру}
";

            #region WHERE

            //Відбір по вибраному елементу Організація
            if (!Фільтр.Організація.IsEmpty())
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Організації.uid = '{Фільтр.Організація.UnigueID}'
";
            }

            //Відбір по всіх вкладених папках вибраної папки Номенклатури
            if (Фільтр.Номенклатура_Папка.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Номенклатура.{Номенклатура_Const.Папка} IN 
(
    WITH RECURSIVE r AS 
    (
        SELECT uid
        FROM {Номенклатура_Папки_Const.TABLE}
        WHERE {Номенклатура_Папки_Const.TABLE}.uid IN ('{string.Join("', '", Фільтр.Номенклатура_Папка.Select(x => x.UnigueID.UGuid))}') 
        UNION ALL
        SELECT {Номенклатура_Папки_Const.TABLE}.uid
        FROM {Номенклатура_Папки_Const.TABLE}
            JOIN r ON {Номенклатура_Папки_Const.TABLE}.{Номенклатура_Папки_Const.Родич} = r.uid
    ) SELECT uid FROM r
)
";
            }

            //Відбір по вибраному елементу Номенклатура
            if (Фільтр.Номенклатура.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Номенклатура.uid IN ('{string.Join("', '", Фільтр.Номенклатура.Select(x => x.UnigueID.UGuid))}') 
";
            }

            //Відбір по вибраному елементу Характеристики Номенклатури
            if (Фільтр.ХарактеристикиНоменклатури.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_ХарактеристикиНоменклатури.uid IN ('{string.Join("', '", Фільтр.ХарактеристикиНоменклатури.Select(x => x.UnigueID.UGuid))}') 
";
            }

            //Відбір по всіх вкладених папках вибраної папки Склади
            if (Фільтр.Склад_Папка.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Склади.{Склади_Const.Папка} IN 
(
    WITH RECURSIVE r AS 
    (
        SELECT uid
        FROM {Склади_Папки_Const.TABLE}
        WHERE {Склади_Папки_Const.TABLE}.uid IN ('{string.Join("', '", Фільтр.Склад_Папка.Select(x => x.UnigueID.UGuid))}')
        UNION ALL
        SELECT {Склади_Папки_Const.TABLE}.uid
        FROM {Склади_Папки_Const.TABLE}
            JOIN r ON {Склади_Папки_Const.TABLE}.{Склади_Папки_Const.Родич} = r.uid
    ) SELECT uid FROM r
)
";
            }

            //Відбір по вибраному елементу Склади
            if (Фільтр.Склад.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Склади.uid IN ('{string.Join("', '", Фільтр.Склад.Select(x => x.UnigueID.UGuid))}')
";
            }

            //Відбір по вибраному елементу Серії Номенклатури
            if (!Фільтр.Серія.IsEmpty())
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_СеріїНоменклатури.uid = '{Фільтр.Серія.UnigueID}'
";
            }

            #endregion

            query += $@"
GROUP BY 
    GROUPING SETS (
    (
        Організація, Організація_Назва, 
        ПартіяТоварівКомпозит, ПартіяТоварівКомпозит_Назва, ПартіяТоварівКомпозит_Дата,
        Номенклатура, Номенклатура_Назва, 
        ХарактеристикаНоменклатури, ХарактеристикаНоменклатури_Назва,
        Серія, Серія_Номер,
        Склад, Склад_Назва,
        Рядок,
        ОдиницяВиміру, ОдиницяВиміру_Назва
    ), ())
HAVING
    SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Кількість}) != 0 OR
    SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Собівартість}) != 0   
ORDER BY 
    Організація_Назва, 
    ПартіяТоварівКомпозит_Дата ASC, 
    Номенклатура_Назва, 
    ХарактеристикаНоменклатури_Назва
";

            #endregion

            ЗвітСторінка Звіт = new ЗвітСторінка()
            {
                ReportName = "Партії товарів",
                Caption = "Залишки",
                Query = query,
                GetInfo = () => ВідобразитиФільтр("Залишки", Фільтр)
            };

            Звіт.ColumnSettings.Add("Організація_Назва", new("Організація", "Організація", Організації_Const.POINTER));
            Звіт.ColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія", "ПартіяТоварівКомпозит", ПартіяТоварівКомпозит_Const.POINTER));
            Звіт.ColumnSettings.Add("Номенклатура_Назва", new("Номенклатура", "Номенклатура", Номенклатура_Const.POINTER));

            if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                Звіт.ColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика", "ХарактеристикаНоменклатури", ХарактеристикиНоменклатури_Const.POINTER));

            if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                Звіт.ColumnSettings.Add("Серія_Номер", new("Серія", "Серія", СеріїНоменклатури_Const.POINTER));

            Звіт.ColumnSettings.Add("Склад_Назва", new("Склад", "Склад", Склади_Const.POINTER));
            Звіт.ColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування", "ОдиницяВиміру", ПакуванняОдиниціВиміру_Const.POINTER));
            Звіт.ColumnSettings.Add("Рядок", new("Рядок", "Рядок", Склади_Const.POINTER, 0.1f, CellDataFunc));
            Звіт.ColumnSettings.Add("Кількість", new("Кількість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("Собівартість", new("Собівартість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));

            //PDF
            {
                Звіт.PDFColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія", 6));
                Звіт.PDFColumnSettings.Add("Номенклатура_Назва", new("Номенклатура", 5));

                if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                    Звіт.PDFColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика", 4));

                if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                    Звіт.PDFColumnSettings.Add("Серія_Номер", new("Серія"));

                Звіт.PDFColumnSettings.Add("Склад_Назва", new("Склад"));
                Звіт.PDFColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування"));
                Звіт.PDFColumnSettings.Add("Кількість", new("Кількість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("Собівартість", new("Собівартість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
            }

            //Excel
            {
                Звіт.ExcelColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія"));
                Звіт.ExcelColumnSettings.Add("Номенклатура_Назва", new("Номенклатура"));

                if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                    Звіт.ExcelColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика"));

                if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                    Звіт.ExcelColumnSettings.Add("Серія_Номер", new("Серія"));

                Звіт.ExcelColumnSettings.Add("Склад_Назва", new("Склад"));
                Звіт.ExcelColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування"));
                Звіт.ExcelColumnSettings.Add("Кількість", new("Кількість", "N"));
                Звіт.ExcelColumnSettings.Add("Собівартість", new("Собівартість", "N"));
            }

            await Звіт.Select();

            Звіт.FillTreeView();
            await Звіт.View(Notebook);
        }

        async void ЗалишкиТаОбороти()
        {
            ПараметриФільтр Фільтр = СформуватиФільтр();

            #region SELECT

            bool isExistParent = false;

            string query = $@"
WITH 
ПочатковийЗалишок AS
(
    SELECT 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Організація} AS Організація, 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ПартіяТоварівКомпозит} AS ПартіяТоварівКомпозит,
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Номенклатура} AS Номенклатура, 
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури,
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Серія} AS Серія,
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Склад} AS Склад,
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Рядок} AS Рядок,
        SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Кількість}) AS Кількість,
        SUM(ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Собівартість}) AS Собівартість
    FROM 
        {ПартіїТоварів_Залишки_TablePart.TABLE} AS ПартіїТоварів
    WHERE
        ПартіїТоварів.{ПартіїТоварів_Залишки_TablePart.Період} < @ПочатокПеріоду
    GROUP BY Організація, ПартіяТоварівКомпозит, Номенклатура, ХарактеристикаНоменклатури, Серія, Склад, Рядок
),
ЗалишкиТаОборотиЗаПеріод AS
(
    SELECT 
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Організація} AS Організація, 
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.ПартіяТоварівКомпозит} AS ПартіяТоварівКомпозит,
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Номенклатура} AS Номенклатура, 
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури,
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Серія} AS Серія,
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Склад} AS Склад,
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Рядок} AS Рядок,
        SUM(ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.КількістьПрихід}) AS КількістьПрихід,
        SUM(ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.КількістьРозхід}) AS КількістьРозхід,
        SUM(ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.КількістьЗалишок}) AS КількістьЗалишок,
        SUM(ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.СобівартістьПрихід}) AS СобівартістьПрихід,
        SUM(ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.СобівартістьРозхід}) AS СобівартістьРозхід,
        SUM(ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.СобівартістьЗалишок}) AS СобівартістьЗалишок
    FROM 
        {ПартіїТоварів_ЗалишкиТаОбороти_TablePart.TABLE} AS ПартіїТоварів
    WHERE
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Період} >= @ПочатокПеріоду AND
        ПартіїТоварів.{ПартіїТоварів_ЗалишкиТаОбороти_TablePart.Період} <= @КінецьПеріоду
    GROUP BY Організація, ПартіяТоварівКомпозит, Номенклатура, ХарактеристикаНоменклатури, Серія, Склад, Рядок
),
КінцевийЗалишок AS
(
    SELECT 
        Організація,
        ПартіяТоварівКомпозит,
        Номенклатура,
        ХарактеристикаНоменклатури,
        Серія,
        Склад,
        Рядок,
        Кількість AS КількістьЗалишок,
        Собівартість AS СобівартістьЗалишок
    FROM ПочатковийЗалишок

    UNION ALL

    SELECT
        Організація,
        ПартіяТоварівКомпозит,
        Номенклатура,
        ХарактеристикаНоменклатури,
        Серія,
        Склад,
        Рядок,
        КількістьЗалишок,
        СобівартістьЗалишок
    FROM ЗалишкиТаОборотиЗаПеріод
)
SELECT 
    Організація,
    Довідник_Організації.{Організації_Const.Назва} AS Організація_Назва, 
    ПартіяТоварівКомпозит,
    Довідник_ПартіяТоварівКомпозит.{ПартіяТоварівКомпозит_Const.Назва} AS ПартіяТоварівКомпозит_Назва,
    Довідник_ПартіяТоварівКомпозит.{ПартіяТоварівКомпозит_Const.Дата} AS ПартіяТоварівКомпозит_Дата,
    Номенклатура,
    Довідник_Номенклатура.{Номенклатура_Const.Назва} AS Номенклатура_Назва, 
    ХарактеристикаНоменклатури,
    Довідник_ХарактеристикиНоменклатури.{ХарактеристикиНоменклатури_Const.Назва} AS ХарактеристикаНоменклатури_Назва,
    Серія,
    Довідник_СеріїНоменклатури.{СеріїНоменклатури_Const.Номер} AS Серія_Номер,
    Склад,
    Довідник_Склади.{Склади_Const.Назва} AS Склад_Назва,
    Рядок,
    Довідник_ПакуванняОдиниціВиміру.uid AS ОдиницяВиміру,
    Довідник_ПакуванняОдиниціВиміру.{ПакуванняОдиниціВиміру_Const.Назва} AS ОдиницяВиміру_Назва,
    ROUND(SUM(КількістьПочатковийЗалишок), 2) AS КількістьПочатковийЗалишок,
    ROUND(SUM(СобівартістьПочатковийЗалишок), 2) AS СобівартістьПочатковийЗалишок,
    ROUND(SUM(КількістьПрихід), 2) AS КількістьПрихід,
    ROUND(SUM(КількістьРозхід), 2) AS КількістьРозхід,
    ROUND(SUM(СобівартістьПрихід), 2) AS СобівартістьПрихід,
    ROUND(SUM(СобівартістьРозхід), 2) AS СобівартістьРозхід,
    ROUND(SUM(КількістьКінцевийЗалишок), 2) AS КількістьКінцевийЗалишок,
    ROUND(SUM(СобівартістьКінцевийЗалишок), 2) AS СобівартістьКінцевийЗалишок
FROM 
(
    SELECT 
        Організація,
        ПартіяТоварівКомпозит,
        Номенклатура,
        ХарактеристикаНоменклатури,
        Серія,
        Склад,
        Рядок,
        Кількість AS КількістьПочатковийЗалишок,
        Собівартість AS СобівартістьПочатковийЗалишок,
        0 AS КількістьПрихід,
        0 AS КількістьРозхід,
        0 AS СобівартістьПрихід,
        0 AS СобівартістьРозхід,
        0 AS КількістьКінцевийЗалишок,
        0 AS СобівартістьКінцевийЗалишок
    FROM ПочатковийЗалишок

    UNION ALL

    SELECT
        Організація,
        ПартіяТоварівКомпозит,
        Номенклатура,
        ХарактеристикаНоменклатури,
        Серія,
        Склад,
        Рядок,
        0 AS КількістьПочатковийЗалишок,
        0 AS СобівартістьПочатковийЗалишок,
        КількістьПрихід AS КількістьПрихід,
        КількістьРозхід AS КількістьРозхід,
        СобівартістьПрихід AS СобівартістьПрихід,
        СобівартістьРозхід AS СобівартістьРозхід,
        0 AS КількістьКінцевийЗалишок,
        0 AS СобівартістьКінцевийЗалишок
    FROM ЗалишкиТаОборотиЗаПеріод

    UNION ALL

    SELECT 
        Організація,
        ПартіяТоварівКомпозит,
        Номенклатура,
        ХарактеристикаНоменклатури,
        Серія,
        Склад,
        Рядок,
        0 AS КількістьПочатковийЗалишок,
        0 AS СобівартістьПочатковийЗалишок,
        0 AS КількістьПрихід,
        0 AS КількістьРозхід,
        0 AS СобівартістьПрихід,
        0 AS СобівартістьРозхід,
        КількістьЗалишок AS КількістьКінцевийЗалишок,
        СобівартістьЗалишок AS СобівартістьКінцевийЗалишок
    FROM КінцевийЗалишок
) AS ЗалишкиТаОбороти
LEFT JOIN {Організації_Const.TABLE} AS Довідник_Організації ON Довідник_Організації.uid = ЗалишкиТаОбороти.Організація
LEFT JOIN {ПартіяТоварівКомпозит_Const.TABLE} AS Довідник_ПартіяТоварівКомпозит ON Довідник_ПартіяТоварівКомпозит.uid = ЗалишкиТаОбороти.ПартіяТоварівКомпозит
LEFT JOIN {Номенклатура_Const.TABLE} AS Довідник_Номенклатура ON Довідник_Номенклатура.uid = ЗалишкиТаОбороти.Номенклатура
LEFT JOIN {ХарактеристикиНоменклатури_Const.TABLE} AS Довідник_ХарактеристикиНоменклатури ON Довідник_ХарактеристикиНоменклатури.uid = ЗалишкиТаОбороти.ХарактеристикаНоменклатури
LEFT JOIN {СеріїНоменклатури_Const.TABLE} AS Довідник_СеріїНоменклатури ON Довідник_СеріїНоменклатури.uid = ЗалишкиТаОбороти.Серія
LEFT JOIN {Склади_Const.TABLE} AS Довідник_Склади ON Довідник_Склади.uid = ЗалишкиТаОбороти.Склад
LEFT JOIN {ПакуванняОдиниціВиміру_Const.TABLE} AS Довідник_ПакуванняОдиниціВиміру ON Довідник_ПакуванняОдиниціВиміру.uid = Довідник_Номенклатура.{Номенклатура_Const.ОдиницяВиміру}
";

            #region WHERE

            //Відбір по вибраному елементу Організація
            if (!Фільтр.Організація.IsEmpty())
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Організації.uid = '{Фільтр.Організація.UnigueID}'
";
            }

            //Відбір по всіх вкладених папках вибраної папки Номенклатури
            if (Фільтр.Номенклатура_Папка.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Номенклатура.{Номенклатура_Const.Папка} IN 
(
    WITH RECURSIVE r AS 
    (
        SELECT uid
        FROM {Номенклатура_Папки_Const.TABLE}
        WHERE {Номенклатура_Папки_Const.TABLE}.uid IN ('{string.Join("', '", Фільтр.Номенклатура_Папка.Select(x => x.UnigueID.UGuid))}')
        UNION ALL
        SELECT {Номенклатура_Папки_Const.TABLE}.uid
        FROM {Номенклатура_Папки_Const.TABLE}
            JOIN r ON {Номенклатура_Папки_Const.TABLE}.{Номенклатура_Папки_Const.Родич} = r.uid
    ) SELECT uid FROM r
)
";
            }

            //Відбір по вибраному елементу Номенклатура
            if (Фільтр.Номенклатура.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Номенклатура.uid IN ('{string.Join("', '", Фільтр.Номенклатура.Select(x => x.UnigueID.UGuid))}')
";
            }

            //Відбір по вибраному елементу Характеристики Номенклатури
            if (Фільтр.ХарактеристикиНоменклатури.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_ХарактеристикиНоменклатури.uid IN ('{string.Join("', '", Фільтр.ХарактеристикиНоменклатури.Select(x => x.UnigueID.UGuid))}')
";
            }

            //Відбір по всіх вкладених папках вибраної папки Склади
            if (Фільтр.Склад_Папка.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Склади.{Склади_Const.Папка} IN 
(
    WITH RECURSIVE r AS 
    (
        SELECT uid
        FROM {Склади_Папки_Const.TABLE}
        WHERE {Склади_Папки_Const.TABLE}.uid IN ('{string.Join("', '", Фільтр.Склад_Папка.Select(x => x.UnigueID.UGuid))}')
        UNION ALL
        SELECT {Склади_Папки_Const.TABLE}.uid
        FROM {Склади_Папки_Const.TABLE}
            JOIN r ON {Склади_Папки_Const.TABLE}.{Склади_Папки_Const.Родич} = r.uid
    ) SELECT uid FROM r
)
";
            }

            //Відбір по вибраному елементу Склади
            if (Фільтр.Склад.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_Склади.uid IN ('{string.Join("', '", Фільтр.Склад.Select(x => x.UnigueID.UGuid))}')
";
            }

            //Відбір по вибраному елементу Серії Номенклатури
            if (!Фільтр.Серія.IsEmpty())
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
Довідник_СеріїНоменклатури.uid = '{Фільтр.Серія.UnigueID}'
";
            }

            #endregion

            query += @"
GROUP BY 
    GROUPING SETS (
    (
        Організація, Організація_Назва, 
        ПартіяТоварівКомпозит, ПартіяТоварівКомпозит_Назва, ПартіяТоварівКомпозит_Дата,
        Номенклатура, Номенклатура_Назва, 
        ХарактеристикаНоменклатури, ХарактеристикаНоменклатури_Назва,
        Серія, Серія_Номер,
        Склад, Склад_Назва,
        Рядок,
        ОдиницяВиміру, ОдиницяВиміру_Назва
    ), ())
HAVING 
    SUM(КількістьПрихід) != 0 OR 
    SUM(КількістьРозхід) != 0 OR
    SUM(СобівартістьПрихід) != 0 OR 
    SUM(СобівартістьРозхід) != 0
ORDER BY 
    Організація_Назва, 
    ПартіяТоварівКомпозит_Дата, 
    Номенклатура_Назва, 
    ХарактеристикаНоменклатури_Назва
";

            #endregion

            Dictionary<string, object> paramQuery = new Dictionary<string, object>
            {
                { "ПочатокПеріоду", Фільтр.ДатаПочатокПеріоду },
                { "КінецьПеріоду", Фільтр.ДатаКінецьПеріоду }
            };

            ЗвітСторінка Звіт = new ЗвітСторінка()
            {
                ReportName = "Партії товарів",
                Caption = "Залишки та обороти",
                Query = query,
                ParamQuery = paramQuery,
                GetInfo = () => ВідобразитиФільтр("ЗалишкиТаОбороти", Фільтр)
            };

            Звіт.ColumnSettings.Add("Організація_Назва", new("Організація", "Організація", Організації_Const.POINTER));
            Звіт.ColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія", "ПартіяТоварівКомпозит", ПартіяТоварівКомпозит_Const.POINTER));
            Звіт.ColumnSettings.Add("Номенклатура_Назва", new("Номенклатура", "Номенклатура", Номенклатура_Const.POINTER));

            if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                Звіт.ColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика", "ХарактеристикаНоменклатури", ХарактеристикиНоменклатури_Const.POINTER));

            if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                Звіт.ColumnSettings.Add("Серія_Номер", new("Серія", "Серія", СеріїНоменклатури_Const.POINTER));

            Звіт.ColumnSettings.Add("Склад_Назва", new("Склад", "Склад", Склади_Const.POINTER));
            Звіт.ColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування", "ОдиницяВиміру", ПакуванняОдиниціВиміру_Const.POINTER));
            Звіт.ColumnSettings.Add("Рядок", new("Рядок", "Рядок", Склади_Const.POINTER, 0.1f, CellDataFunc));
            Звіт.ColumnSettings.Add("КількістьПочатковийЗалишок", new("Кількість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("СобівартістьПочатковийЗалишок", new("Собівартість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("КількістьПрихід", new("Кількість +", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("КількістьРозхід", new("Кількість -", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("СобівартістьПрихід", new("Собівартість +", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("СобівартістьРозхід", new("Собівартість -", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("КількістьКінцевийЗалишок", new("Кількість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("СобівартістьКінцевийЗалишок", new("Собівартість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));

            //PDF
            {
                Звіт.PDFColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія", 6));
                Звіт.PDFColumnSettings.Add("Номенклатура_Назва", new("Номенклатура", 5));

                if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                    Звіт.PDFColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика", 4));

                if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                    Звіт.PDFColumnSettings.Add("Серія_Номер", new("Серія"));

                Звіт.PDFColumnSettings.Add("Склад_Назва", new("Склад"));
                Звіт.PDFColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування"));
                Звіт.PDFColumnSettings.Add("КількістьПочатковийЗалишок", new("Кількість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("СобівартістьПочатковийЗалишок", new("Собівартість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("КількістьПрихід", new("Кількість +", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("КількістьРозхід", new("Кількість -", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("СобівартістьПрихід", new("Собівартість +", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("СобівартістьРозхід", new("Собівартість -", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("КількістьКінцевийЗалишок", new("Кількість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("СобівартістьКінцевийЗалишок", new("Собівартість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
            }

            //Excel
            {
                Звіт.ExcelColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія"));
                Звіт.ExcelColumnSettings.Add("Номенклатура_Назва", new("Номенклатура"));

                if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                    Звіт.ExcelColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика"));

                if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                    Звіт.ExcelColumnSettings.Add("Серія_Номер", new("Серія"));

                Звіт.ExcelColumnSettings.Add("Склад_Назва", new("Склад"));
                Звіт.ExcelColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування"));
                Звіт.ExcelColumnSettings.Add("КількістьПочатковийЗалишок", new("Кількість", "N"));
                Звіт.ExcelColumnSettings.Add("СобівартістьПочатковийЗалишок", new("Собівартість", "N"));
                Звіт.ExcelColumnSettings.Add("КількістьПрихід", new("Кількість +", "N"));
                Звіт.ExcelColumnSettings.Add("КількістьРозхід", new("Кількість -", "N"));
                Звіт.ExcelColumnSettings.Add("СобівартістьПрихід", new("Собівартість +", "N"));
                Звіт.ExcelColumnSettings.Add("СобівартістьРозхід", new("Собівартість -", "N"));
                Звіт.ExcelColumnSettings.Add("КількістьКінцевийЗалишок", new("Кількість", "N"));
                Звіт.ExcelColumnSettings.Add("СобівартістьКінцевийЗалишок", new("Собівартість", "N"));
            }

            await Звіт.Select();

            Звіт.FillTreeView();
            await Звіт.View(Notebook);
        }

        async void Документи()
        {
            ПараметриФільтр Фільтр = СформуватиФільтр(); ;

            #region SELECT

            bool isExistParent = false;

            string query = $@"
WITH register AS
(
     SELECT 
        ПартіїТоварів.period AS period,
        ПартіїТоварів.owner AS owner,
        ПартіїТоварів.income AS income,
        ПартіїТоварів.{ПартіїТоварів_Const.Організація} AS Організація,
        ПартіїТоварів.{ПартіїТоварів_Const.ПартіяТоварівКомпозит} AS ПартіяТоварівКомпозит,
        ПартіїТоварів.{ПартіїТоварів_Const.Номенклатура} AS Номенклатура,
        ПартіїТоварів.{ПартіїТоварів_Const.ХарактеристикаНоменклатури} AS ХарактеристикаНоменклатури,
        ПартіїТоварів.{ПартіїТоварів_Const.Серія} AS Серія,
        ПартіїТоварів.{ПартіїТоварів_Const.Склад} AS Склад,
        ПартіїТоварів.{ПартіїТоварів_Const.Рядок} AS Рядок,
        ПартіїТоварів.{ПартіїТоварів_Const.Кількість} AS Кількість,
        CASE WHEN ПартіїТоварів.{ПартіїТоварів_Const.СписанаСобівартість} != 0 THEN 
            ПартіїТоварів.{ПартіїТоварів_Const.СписанаСобівартість} ELSE 
            ПартіїТоварів.{ПартіїТоварів_Const.Собівартість} END AS Собівартість 
    FROM
        {ПартіїТоварів_Const.TABLE} AS ПартіїТоварів
    WHERE
        (ПартіїТоварів.period >= @ПочатокПеріоду AND ПартіїТоварів.period <= @КінецьПеріоду)
";

            #region WHERE

            isExistParent = true;

            //Відбір по вибраному елементу Організація
            if (!Фільтр.Організація.IsEmpty())
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
ПартіїТоварів.{ПартіїТоварів_Const.Організація} = '{Фільтр.Організація.UnigueID}'
";
            }

            //Відбір по вибраному елементу Номенклатура
            if (Фільтр.Номенклатура.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
ПартіїТоварів.{ПартіїТоварів_Const.Номенклатура} IN ('{string.Join("', '", Фільтр.Номенклатура.Select(x => x.UnigueID.UGuid))}')
";
            }

            //Відбір по вибраному елементу Характеристики Номенклатури
            if (Фільтр.ХарактеристикиНоменклатури.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
ПартіїТоварів.{ПартіїТоварів_Const.ХарактеристикаНоменклатури} IN ('{string.Join("', '", Фільтр.ХарактеристикиНоменклатури.Select(x => x.UnigueID.UGuid))}')
";
            }

            //Відбір по вибраному елементу Склади
            if (Фільтр.Склад.Length > 0)
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
ПартіїТоварів.{ПартіїТоварів_Const.Склад} IN ('{string.Join("', '", Фільтр.Склад.Select(x => x.UnigueID.UGuid))}')
";
            }

            //Відбір по вибраному елементу Серії Номенклатури
            if (!Фільтр.Серія.IsEmpty())
            {
                query += isExistParent ? "AND" : "WHERE";
                isExistParent = true;

                query += $@"
ПартіїТоварів.{ПартіїТоварів_Const.Серія} = '{Фільтр.Серія.UnigueID}'
";
            }

            #endregion

            query += $@"
),
documents AS
(";
            int counter = 0;
            foreach (string table in ПартіїТоварів_Const.AllowDocumentSpendTable)
            {
                string docType = ПартіїТоварів_Const.AllowDocumentSpendType[counter];

                string union = counter > 0 ? "UNION" : "";
                query += $@"
{union}
SELECT 
    CONCAT({table}.uid, ':{docType}') AS Документ,
    {table}.docname AS Документ_Назва,
    register.period, 
    register.income, 
    register.Кількість,
    register.Собівартість,
    register.Організація,
    Довідник_Організації.{Організації_Const.Назва} AS Організація_Назва,
    register.ПартіяТоварівКомпозит,
    Довідник_ПартіяТоварівКомпозит.{ПартіяТоварівКомпозит_Const.Назва} AS ПартіяТоварівКомпозит_Назва,
    register.Номенклатура,
    Довідник_Номенклатура.{Номенклатура_Const.Назва} AS Номенклатура_Назва,
    register.ХарактеристикаНоменклатури,
    Довідник_ХарактеристикиНоменклатури.{ХарактеристикиНоменклатури_Const.Назва} AS ХарактеристикаНоменклатури_Назва,
    register.Серія,
    Довідник_СеріїНоменклатури.{СеріїНоменклатури_Const.Номер} AS Серія_Номер,
    register.Склад,
    Довідник_Склади.{Склади_Const.Назва} AS Склад_Назва,
    Рядок,
    Довідник_ПакуванняОдиниціВиміру.uid AS ОдиницяВиміру,
    Довідник_ПакуванняОдиниціВиміру.{ПакуванняОдиниціВиміру_Const.Назва} AS ОдиницяВиміру_Назва
FROM register INNER JOIN {table} ON {table}.uid = register.owner
    LEFT JOIN {Організації_Const.TABLE} AS Довідник_Організації ON Довідник_Організації.uid = register.Організація
    LEFT JOIN {ПартіяТоварівКомпозит_Const.TABLE} AS Довідник_ПартіяТоварівКомпозит ON Довідник_ПартіяТоварівКомпозит.uid = register.ПартіяТоварівКомпозит
    LEFT JOIN {Номенклатура_Const.TABLE} AS Довідник_Номенклатура ON Довідник_Номенклатура.uid = register.Номенклатура
    LEFT JOIN {ХарактеристикиНоменклатури_Const.TABLE} AS Довідник_ХарактеристикиНоменклатури ON Довідник_ХарактеристикиНоменклатури.uid = register.ХарактеристикаНоменклатури
    LEFT JOIN {СеріїНоменклатури_Const.TABLE} AS Довідник_СеріїНоменклатури ON Довідник_СеріїНоменклатури.uid = register.Серія
    LEFT JOIN {Склади_Const.TABLE} AS Довідник_Склади ON Довідник_Склади.uid = register.Склад
    LEFT JOIN {ПакуванняОдиниціВиміру_Const.TABLE} AS Довідник_ПакуванняОдиниціВиміру ON Довідник_ПакуванняОдиниціВиміру.uid = Довідник_Номенклатура.{Номенклатура_Const.ОдиницяВиміру}
";

                #region WHERE

                isExistParent = false;

                //Відбір по всіх вкладених папках вибраної папки Номенклатури
                if (Фільтр.Номенклатура_Папка.Length > 0)
                {
                    query += isExistParent ? "AND" : "WHERE";
                    isExistParent = true;

                    query += $@"
Довідник_Номенклатура.{Номенклатура_Const.Папка} IN 
(
    WITH RECURSIVE r AS 
    (
        SELECT uid
        FROM {Номенклатура_Папки_Const.TABLE}
        WHERE {Номенклатура_Папки_Const.TABLE}.uid IN ('{string.Join("', '", Фільтр.Номенклатура_Папка.Select(x => x.UnigueID.UGuid))}')
        UNION ALL
        SELECT {Номенклатура_Папки_Const.TABLE}.uid
        FROM {Номенклатура_Папки_Const.TABLE}
            JOIN r ON {Номенклатура_Папки_Const.TABLE}.{Номенклатура_Папки_Const.Родич} = r.uid
    ) SELECT uid FROM r
)
";
                }

                //Відбір по всіх вкладених папках вибраної папки Склади
                if (Фільтр.Склад_Папка.Length > 0)
                {
                    query += isExistParent ? "AND" : "WHERE";
                    isExistParent = true;

                    query += $@"
Довідник_Склади.{Склади_Const.Папка} IN 
(
    WITH RECURSIVE r AS 
    (
        SELECT uid
        FROM {Склади_Папки_Const.TABLE}
        WHERE {Склади_Папки_Const.TABLE}.uid IN ('{string.Join("', '", Фільтр.Склад_Папка.Select(x => x.UnigueID.UGuid))}')
        UNION ALL
        SELECT {Склади_Папки_Const.TABLE}.uid
        FROM {Склади_Папки_Const.TABLE}
            JOIN r ON {Склади_Папки_Const.TABLE}.{Склади_Папки_Const.Родич} = r.uid
    ) SELECT uid FROM r
)
";
                }

                #endregion

                counter++;
            }

            query += $@"
)
SELECT 
    Документ,
    (CASE WHEN income = true THEN '+' ELSE '-' END) AS Рух,
    Документ_Назва,
    Організація,
    Організація_Назва,
    ПартіяТоварівКомпозит,
    ПартіяТоварівКомпозит_Назва,
    Номенклатура,
    Номенклатура_Назва,
    ХарактеристикаНоменклатури,
    ХарактеристикаНоменклатури_Назва,
    Серія,
    Серія_Номер,
    Склад,
    Склад_Назва,
    Рядок,
    ОдиницяВиміру,
    ОдиницяВиміру_Назва,
    ROUND(Кількість, 2) AS Кількість, 
    ROUND(Собівартість, 2) AS Собівартість
FROM documents
ORDER BY 
    period ASC, 
    Організація_Назва, 
    Номенклатура_Назва, 
    ХарактеристикаНоменклатури_Назва
";

            #endregion

            Dictionary<string, object> paramQuery = new Dictionary<string, object>
            {
                { "ПочатокПеріоду", Фільтр.ДатаПочатокПеріоду },
                { "КінецьПеріоду", Фільтр.ДатаКінецьПеріоду }
            };

            ЗвітСторінка Звіт = new ЗвітСторінка()
            {
                ReportName = "Партії товарів",
                Caption = "Документи",
                Query = query,
                ParamQuery = paramQuery,
                GetInfo = () => ВідобразитиФільтр("Документи", Фільтр)
            };

            Звіт.ColumnSettings.Add("Рух", new("Рух", "", "", 0.5f));
            Звіт.ColumnSettings.Add("Документ_Назва", new("Документ", "Документ", "Документи.*"));
            Звіт.ColumnSettings.Add("Організація_Назва", new("Організація", "Організація", Організації_Const.POINTER));
            Звіт.ColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія", "ПартіяТоварівКомпозит", ПартіяТоварівКомпозит_Const.POINTER));
            Звіт.ColumnSettings.Add("Номенклатура_Назва", new("Номенклатура", "Номенклатура", Номенклатура_Const.POINTER));

            if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                Звіт.ColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика", "ХарактеристикаНоменклатури", ХарактеристикиНоменклатури_Const.POINTER));

            if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                Звіт.ColumnSettings.Add("Серія_Номер", new("Серія", "Серія", СеріїНоменклатури_Const.POINTER));

            Звіт.ColumnSettings.Add("Склад_Назва", new("Склад", "Склад", Склади_Const.POINTER));
            Звіт.ColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування", "ОдиницяВиміру", ПакуванняОдиниціВиміру_Const.POINTER));
            Звіт.ColumnSettings.Add("Рядок", new("Рядок", "Рядок", Склади_Const.POINTER, 0.1f, CellDataFunc));
            Звіт.ColumnSettings.Add("Кількість", new("Кількість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));
            Звіт.ColumnSettings.Add("Собівартість", new("Собівартість", "", "", 1, ЗвітСторінка.ФункціяДляКолонкиВідємнеЧислоЧервоним));

            //PDF
            {
                Звіт.PDFColumnSettings.Add("Рух", new("Рух", 15, ЗвітСторінка.TypePDFColumn.Constant, 0.5f));
                Звіт.PDFColumnSettings.Add("Документ_Назва", new("Документ", 6));
                Звіт.PDFColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія", 6));
                Звіт.PDFColumnSettings.Add("Номенклатура_Назва", new("Номенклатура", 5));

                if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                    Звіт.PDFColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика", 4));

                if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                    Звіт.PDFColumnSettings.Add("Серія_Номер", new("Серія"));

                Звіт.PDFColumnSettings.Add("Склад_Назва", new("Склад"));
                Звіт.PDFColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування"));
                Звіт.PDFColumnSettings.Add("Кількість", new("Кількість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
                Звіт.PDFColumnSettings.Add("Собівартість", new("Собівартість", 30, ЗвітСторінка.TypePDFColumn.Constant, 1, ЗвітСторінка.ФункціяДляКолонкиБазоваДляЧисла));
            }

            //Excel
            {
                Звіт.ExcelColumnSettings.Add("Рух", new("Рух"));
                Звіт.ExcelColumnSettings.Add("Документ_Назва", new("Документ"));
                Звіт.ExcelColumnSettings.Add("ПартіяТоварівКомпозит_Назва", new("Партія"));
                Звіт.ExcelColumnSettings.Add("Номенклатура_Назва", new("Номенклатура"));

                if (Константи.Системні.ВестиОблікПоХарактеристикахНоменклатури_Const)
                    Звіт.ExcelColumnSettings.Add("ХарактеристикаНоменклатури_Назва", new("Характеристика"));

                if (Константи.Системні.ВестиОблікПоСеріяхНоменклатури_Const)
                    Звіт.ExcelColumnSettings.Add("Серія_Номер", new("Серія"));

                Звіт.ExcelColumnSettings.Add("Склад_Назва", new("Склад"));
                Звіт.ExcelColumnSettings.Add("ОдиницяВиміру_Назва", new("Пакування"));
                Звіт.ExcelColumnSettings.Add("Кількість", new("Кількість", "N"));
                Звіт.ExcelColumnSettings.Add("Собівартість", new("Собівартість", "N"));
            }

            await Звіт.Select();

            Звіт.FillTreeView();
            await Звіт.View(Notebook);
        }

        //Функція Для Колонки
        //Викликається для кожної клітинки
        void CellDataFunc(TreeViewColumn column, CellRenderer cell, ITreeModel model, TreeIter iter)
        {
            CellRendererText cellText = (CellRendererText)cell;
            if (column.Data.Contains("CellDataFunc"))
            {
                switch ((string)column.Data["CellDataFunc"]!)
                {
                    case "Рядок":
                        {
                            if (!string.IsNullOrEmpty(cellText.Text))
                                cellText.Text = "№ " + cellText.Text;
                            break;
                        }
                }
            }
        }
    }
}